{"version":3,"sources":["../../src/input/input.ts","../../src/output/output.ts","../../src/di/container.ts","../../src/decorators/command.decorator.ts","../../src/decorators/option.decorator.ts","../../src/command/base-command.ts","../../src/ui/ask.ts","../../src/ui/table.ts","../../src/ui/progress-bar.ts","../../src/commands/demo-command.ts"],"names":["chalk","Container","injectable","ICommand","inquirer","QuestionType","Table","cliProgress","DemoCommand"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAOO,IAAM,QAAN,MAA8B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAwBnC,YAAY,IAAgB,EAAA;AAb5B;AAAA;AAAA;AAAA;AAAA,IAAA,IAAA,CAAQ,OAA+B,EAAC;AAMxC;AAAA;AAAA;AAAA;AAAA,IAAA,IAAA,CAAQ,OAAyC,EAAC;AAQhD,IAAA,IAAA,CAAK,MAAM,IAAI,CAAA;AAAA;AACjB;AAAA;AAAA;AAAA;AAAA;AAAA,EAOO,cAAqC,GAAA;AAC1C,IAAA,OAAO,IAAK,CAAA,WAAA;AAAA;AACd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQO,YAAY,IAAkC,EAAA;AACnD,IAAO,OAAA,IAAA,CAAK,KAAK,IAAI,CAAA;AAAA;AACvB;AAAA;AAAA;AAAA;AAAA;AAAA,EAOO,YAAuC,GAAA;AAC5C,IAAO,OAAA,EAAE,GAAG,IAAA,CAAK,IAAK,EAAA;AAAA;AACxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQO,UAAU,IAA4C,EAAA;AAC3D,IAAO,OAAA,IAAA,CAAK,KAAK,IAAI,CAAA;AAAA;AACvB;AAAA;AAAA;AAAA;AAAA;AAAA,EAOO,UAA+C,GAAA;AACpD,IAAO,OAAA,EAAE,GAAG,IAAA,CAAK,IAAK,EAAA;AAAA;AACxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQO,UAAU,IAAuB,EAAA;AACtC,IAAA,OAAO,QAAQ,IAAK,CAAA,IAAA;AAAA;AACtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQQ,MAAM,IAAsB,EAAA;AAClC,IAAI,IAAA,IAAA,CAAK,WAAW,CAAG,EAAA;AACrB,MAAA;AAAA;AAIF,IAAK,IAAA,CAAA,WAAA,GAAc,KAAK,CAAC,CAAA;AAEzB,IAAA,IAAI,CAAI,GAAA,CAAA;AACR,IAAA,IAAI,cAAiB,GAAA,CAAA;AAErB,IAAO,OAAA,CAAA,GAAI,KAAK,MAAQ,EAAA;AACtB,MAAM,MAAA,GAAA,GAAM,KAAK,CAAC,CAAA;AAGlB,MAAI,IAAA,GAAA,CAAI,UAAW,CAAA,IAAI,CAAG,EAAA;AACxB,QAAM,MAAA,OAAA,GAAU,GAAI,CAAA,SAAA,CAAU,CAAC,CAAA;AAG/B,QAAI,IAAA,OAAA,CAAQ,QAAS,CAAA,GAAG,CAAG,EAAA;AACzB,UAAA,MAAM,CAAC,IAAM,EAAA,KAAK,IAAI,OAAQ,CAAA,KAAA,CAAM,KAAK,CAAC,CAAA;AAC1C,UAAK,IAAA,CAAA,IAAA,CAAK,IAAI,CAAI,GAAA,KAAA;AAAA,SACb,MAAA;AAEL,UAAI,IAAA,CAAA,GAAI,CAAI,GAAA,IAAA,CAAK,MAAU,IAAA,CAAC,IAAK,CAAA,CAAA,GAAI,CAAC,CAAA,CAAE,UAAW,CAAA,GAAG,CAAG,EAAA;AACvD,YAAA,IAAA,CAAK,IAAK,CAAA,OAAO,CAAI,GAAA,IAAA,CAAK,IAAI,CAAC,CAAA;AAC/B,YAAA,CAAA,EAAA;AAAA,WACK,MAAA;AACL,YAAK,IAAA,CAAA,IAAA,CAAK,OAAO,CAAI,GAAA,IAAA;AAAA;AACvB;AACF,OACS,MAAA,IAAA,GAAA,CAAI,UAAW,CAAA,GAAG,CAAG,EAAA;AAC9B,QAAM,MAAA,OAAA,GAAU,GAAI,CAAA,SAAA,CAAU,CAAC,CAAA;AAG/B,QAAI,IAAA,OAAA,CAAQ,QAAS,CAAA,GAAG,CAAG,EAAA;AACzB,UAAA,MAAM,CAAC,IAAM,EAAA,KAAK,IAAI,OAAQ,CAAA,KAAA,CAAM,KAAK,CAAC,CAAA;AAC1C,UAAK,IAAA,CAAA,IAAA,CAAK,IAAI,CAAI,GAAA,KAAA;AAAA,SACb,MAAA;AAEL,UAAI,IAAA,CAAA,GAAI,CAAI,GAAA,IAAA,CAAK,MAAU,IAAA,CAAC,IAAK,CAAA,CAAA,GAAI,CAAC,CAAA,CAAE,UAAW,CAAA,GAAG,CAAG,EAAA;AACvD,YAAA,IAAA,CAAK,IAAK,CAAA,OAAO,CAAI,GAAA,IAAA,CAAK,IAAI,CAAC,CAAA;AAC/B,YAAA,CAAA,EAAA;AAAA,WACK,MAAA;AACL,YAAK,IAAA,CAAA,IAAA,CAAK,OAAO,CAAI,GAAA,IAAA;AAAA;AACvB;AACF,OACK,MAAA;AAEL,QAAA,IAAA,CAAK,IAAK,CAAA,cAAA,CAAe,QAAS,EAAC,CAAI,GAAA,GAAA;AACvC,QAAA,cAAA,EAAA;AAAA;AAGF,MAAA,CAAA,EAAA;AAAA;AACF;AAEJ,CAAA;AClJO,IAAM,SAAN,MAAgC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAM9B,MAAM,OAAuB,EAAA;AAClC,IAAQ,OAAA,CAAA,MAAA,CAAO,MAAM,OAAO,CAAA;AAAA;AAC9B;AAAA;AAAA;AAAA;AAAA;AAAA,EAOO,QAAQ,OAAuB,EAAA;AACpC,IAAA,OAAA,CAAQ,IAAI,OAAO,CAAA;AAAA;AACrB;AAAA;AAAA;AAAA;AAAA;AAAA,EAOO,MAAM,OAAuB,EAAA;AAClC,IAAA,OAAA,CAAQ,MAAMA,uBAAM,CAAA,IAAA,CAAK,IAAI,OAAO,CAAA,GAAI,OAAO,OAAO,CAAA;AAAA;AACxD;AAAA;AAAA;AAAA;AAAA;AAAA,EAOO,QAAQ,OAAuB,EAAA;AACpC,IAAA,OAAA,CAAQ,IAAIA,uBAAM,CAAA,IAAA,CAAK,MAAM,SAAS,CAAA,GAAI,OAAO,OAAO,CAAA;AAAA;AAC1D;AAAA;AAAA;AAAA;AAAA;AAAA,EAOO,KAAK,OAAuB,EAAA;AACjC,IAAA,OAAA,CAAQ,IAAIA,uBAAM,CAAA,IAAA,CAAK,KAAK,MAAM,CAAA,GAAI,OAAO,OAAO,CAAA;AAAA;AACtD;AAAA;AAAA;AAAA;AAAA;AAAA,EAOO,QAAQ,OAAuB,EAAA;AACpC,IAAA,OAAA,CAAQ,IAAIA,uBAAM,CAAA,IAAA,CAAK,OAAO,SAAS,CAAA,GAAI,OAAO,OAAO,CAAA;AAAA;AAC3D;AAAA;AAAA;AAAA;AAAA;AAAA,EAOO,QAAQ,OAAuB,EAAA;AACpC,IAAA,OAAA,CAAQ,GAAI,CAAAA,uBAAA,CAAM,IAAK,CAAA,KAAA,GAAQ,OAAO,CAAC,CAAA;AAAA;AAE3C,CAAA;ACjEA,IAAM,SAAA,GAAY,IAAIC,mBAAU,CAAA;AAAA,EAC9B,YAAc,EAAA;AAChB,CAAC,CAAA;;;ACCM,IAAM,oBAAA,GAAuB,OAAO,SAAS,CAAA;AAU7C,SAAS,QAAQ,OAA0C,EAAA;AAChE,EAAA,OAAO,CAAC,MAA2B,KAAA;AApBrC,IAAA,IAAA,EAAA,EAAA,EAAA;AAsBI,IAAA,MAAM,cAAiB,GAAA;AAAA,MACrB,GAAG,OAAA;AAAA,MACH,MAAA,EAAA,CAAQ,EAAQ,GAAA,OAAA,CAAA,MAAA,KAAR,IAAkB,GAAA,EAAA,GAAA,KAAA;AAAA,MAC1B,UAAA,EAAA,CAAY,EAAQ,GAAA,OAAA,CAAA,UAAA,KAAR,IAAsB,GAAA,EAAA,GAAA,IAAA;AAAA,MAClC,WAAA,EAAa,QAAQ,WAAe,IAAA,EAAA;AAAA,MACpC,SAAA,EAAW,OAAQ,CAAA,SAAA,IAAa;AAAC,KACnC;AAGA,IAAQ,OAAA,CAAA,cAAA,CAAe,oBAAsB,EAAA,cAAA,EAAgB,MAAM,CAAA;AAGnE,IAAA,IAAI,eAAe,UAAY,EAAA;AAC7B,MAAAC,oBAAA,GAAa,MAAM,CAAA;AAInB,MAAI,IAAA;AACF,QAAA,SAAA,CACG,KAAKC,gBAAS,CAAA,CAAC,EACf,EAAG,CAAA,MAAa,EAChB,gBAAiB,EAAA;AAAA,eACb,KAAO,EAAA;AAAA;AAGhB;AACF,GACF;AACF;AC7CO,IAAM,mBAAA,GAAsB,OAAO,QAAQ,CAAA;AA8B3C,SAAS,OAAO,OAA2C,EAAA;AAChE,EAAO,OAAA,CAAC,QAAgB,WAAiC,KAAA;AACvD,IAAA,MAAM,QAAW,GAAA;AAAA,MACf,OAAO,OAAQ,CAAA,KAAA;AAAA,MACf,WAAA,EAAa,QAAQ,WAAe,IAAA,EAAA;AAAA,MACpC,cAAc,OAAQ,CAAA,YAAA;AAAA,MACtB;AAAA,KACF;AAGA,IAAA,MAAM,mBAAmB,OAAQ,CAAA,WAAA,CAAY,qBAAqB,MAAO,CAAA,WAAW,KAAK,EAAC;AAG1F,IAAA,gBAAA,CAAiB,KAAK,QAAQ,CAAA;AAG9B,IAAA,OAAA,CAAQ,cAAe,CAAA,mBAAA,EAAqB,gBAAkB,EAAA,MAAA,CAAO,WAAW,CAAA;AAAA,GAClF;AACF;;;ACxCO,IAAe,cAAf,MAA+C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EA6CpD,WAAA,CAAY,IAAe,EAAA,WAAA,GAAc,EAAI,EAAA;AAC3C,IAAA,MAAM,QAAW,GAAA,OAAA,CAAQ,WAAY,CAAA,oBAAA,EAAsB,KAAK,WAAW,CAAA;AAE3E,IAAI,IAAA,CAAC,IAAQ,KAAA,QAAA,IAAA,IAAA,GAAA,MAAA,GAAA,QAAA,CAAU,IAAM,CAAA,EAAA;AAC3B,MAAA,IAAA,CAAK,OAAO,QAAS,CAAA,IAAA;AACrB,MAAK,IAAA,CAAA,WAAA,GAAc,WAAe,IAAA,QAAA,CAAS,WAAe,IAAA,EAAA;AAAA,eACjD,IAAM,EAAA;AACf,MAAA,IAAA,CAAK,IAAO,GAAA,IAAA;AACZ,MAAA,IAAA,CAAK,WAAc,GAAA,WAAA;AAAA,KACd,MAAA;AACL,MAAM,MAAA,IAAI,MAAM,CAA6E,2EAAA,CAAA,CAAA;AAAA;AAG/F,IAAA,IAAA,CAAK,KAAQ,GAAA,IAAI,KAAM,CAAA,EAAE,CAAA;AACzB,IAAK,IAAA,CAAA,MAAA,GAAS,IAAI,MAAO,EAAA;AAAA;AAC3B;AAAA;AAAA;AAAA;AAAA;AAAA,EAOO,OAAkB,GAAA;AACvB,IAAA,OAAO,IAAK,CAAA,IAAA;AAAA;AACd;AAAA;AAAA;AAAA;AAAA;AAAA,EAOO,cAAyB,GAAA;AAC9B,IAAA,OAAO,IAAK,CAAA,WAAA;AAAA;AACd;AAAA;AAAA;AAAA;AAAA;AAAA,EAOO,SAAS,KAAqB,EAAA;AACnC,IAAA,IAAA,CAAK,KAAQ,GAAA,KAAA;AAAA;AACf;AAAA;AAAA;AAAA;AAAA;AAAA,EAOO,QAAmB,GAAA;AACxB,IAAA,OAAO,IAAK,CAAA,KAAA;AAAA;AACd;AAAA;AAAA;AAAA;AAAA;AAAA,EAOO,UAAU,MAAuB,EAAA;AACtC,IAAA,IAAA,CAAK,MAAS,GAAA,MAAA;AAAA;AAChB;AAAA;AAAA;AAAA;AAAA;AAAA,EAOO,SAAqB,GAAA;AAC1B,IAAA,OAAO,IAAK,CAAA,MAAA;AAAA;AACd;AAAA;AAAA;AAAA;AAAA;AAAA,EAOO,aAAa,IAAsB,EAAA;AACxC,IAAK,IAAA,CAAA,OAAA,CAAQ,CAAC,GAAA,EAAK,KAAU,KAAA;AAC1B,MAAC,KAAK,KAAc,CAAA,IAAA,CAAK,KAAM,CAAA,QAAA,EAAU,CAAI,GAAA,GAAA;AAAA,KAC/C,CAAA;AAAA;AACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQO,WAAA,CAAY,KAAa,KAAkB,EAAA;AAC/C,IAAC,IAAK,CAAA,KAAA,CAAc,IAAK,CAAA,GAAG,CAAI,GAAA,KAAA;AAAA;AACnC;AAAA;AAAA;AAAA;AAAA;AAAA,EAOO,YAAoC,GAAA;AACzC,IAAQ,OAAA,IAAA,CAAK,KAAc,CAAA,IAAA,IAAQ,EAAC;AAAA;AACtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQO,YAAY,GAAkB,EAAA;AArKvC,IAAA,IAAA,EAAA;AAsKI,IAAQ,OAAA,CAAA,EAAA,GAAA,IAAA,CAAK,KAAc,CAAA,IAAA,KAAnB,IAA0B,GAAA,MAAA,GAAA,EAAA,CAAA,GAAA,CAAA;AAAA;AACpC;AAAA;AAAA;AAAA;AAAA;AAAA,EAOO,WAAW,OAAoC,EAAA;AACpD,IAAO,MAAA,CAAA,OAAA,CAAQ,OAAO,CAAE,CAAA,OAAA,CAAQ,CAAC,CAAC,GAAA,EAAK,KAAK,CAAM,KAAA;AAC/C,MAAC,IAAK,CAAA,KAAA,CAAc,IAAK,CAAA,GAAG,CAAI,GAAA,KAAA;AAAA,KAClC,CAAA;AAAA;AACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQO,SAAA,CAAU,KAAa,KAAkB,EAAA;AAC7C,IAAC,IAAK,CAAA,KAAA,CAAc,IAAK,CAAA,GAAG,CAAI,GAAA,KAAA;AAAA;AACnC;AAAA;AAAA;AAAA;AAAA;AAAA,EAOO,UAAkC,GAAA;AACvC,IAAQ,OAAA,IAAA,CAAK,KAAc,CAAA,IAAA,IAAQ,EAAC;AAAA;AACtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQO,UAAU,GAAkB,EAAA;AA7MrC,IAAA,IAAA,EAAA;AA8MI,IAAQ,OAAA,CAAA,EAAA,GAAA,IAAA,CAAK,KAAc,CAAA,IAAA,KAAnB,IAA0B,GAAA,MAAA,GAAA,EAAA,CAAA,GAAA,CAAA;AAAA;AACpC;AAAA;AAAA;AAAA;AAAA;AAAA,EAOO,SAAkB,GAAA;AAAA;AAEzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAkBA,MAAa,aAAkC,GAAA;AAC7C,IAAO,OAAA,IAAA;AAAA;AACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,MAAa,aAAa,QAAwC,EAAA;AAAA;AAElE;AAAA;AAAA;AAAA;AAAA;AAAA,EAOU,IAAA,CAAK,UAAU,EAAU,EAAA;AACjC,IAAK,IAAA,CAAA,MAAA,CAAO,QAAQ,OAAO,CAAA;AAAA;AAC7B;AAAA;AAAA;AAAA;AAAA;AAAA,EAOU,KAAK,OAAuB,EAAA;AACpC,IAAK,IAAA,CAAA,MAAA,CAAO,KAAK,OAAO,CAAA;AAAA;AAC1B;AAAA;AAAA;AAAA;AAAA;AAAA,EAOU,QAAQ,OAAuB,EAAA;AACvC,IAAK,IAAA,CAAA,MAAA,CAAO,QAAQ,OAAO,CAAA;AAAA;AAC7B;AAAA;AAAA;AAAA;AAAA;AAAA,EAOU,MAAM,OAAuB,EAAA;AACrC,IAAK,IAAA,CAAA,MAAA,CAAO,MAAM,OAAO,CAAA;AAAA;AAC3B;AAAA;AAAA;AAAA;AAAA;AAAA,EAOU,QAAQ,OAAuB,EAAA;AACvC,IAAK,IAAA,CAAA,MAAA,CAAO,QAAQ,OAAO,CAAA;AAAA;AAC7B;AAAA;AAAA;AAAA;AAAA;AAAA,EAOU,QAAQ,OAAuB,EAAA;AACvC,IAAK,IAAA,CAAA,MAAA,CAAO,QAAQ,OAAO,CAAA;AAAA;AAE/B,CAAA;AAAA;AAAA;AAAA;AAjSsB,WAAA,CAIG,OAAU,GAAA,CAAA;AAAA;AAAA;AAAA;AAJb,WAAA,CASG,OAAU,GAAA,CAAA;AAAA;AAAA;AAAA;AATb,WAAA,CAcG,OAAU,GAAA,CAAA;ACf5B,IAAM,MAAN,MAA0B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAO/B,MAAa,SAAS,QAAmC,EAAA;AACvD,IAAO,OAAA,GAAA,CAAI,SAAS,QAAQ,CAAA;AAAA;AAC9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,MAAa,UAAU,SAAsD,EAAA;AAC3E,IAAO,OAAA,GAAA,CAAI,UAAU,SAAS,CAAA;AAAA;AAChC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,MAAa,KAAM,CAAA,OAAA,EAAiB,YAAwC,EAAA;AAC1E,IAAO,OAAA,GAAA,CAAI,KAAM,CAAA,OAAA,EAAS,YAAY,CAAA;AAAA;AACxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,MAAa,OAAA,CAAQ,OAAiB,EAAA,YAAA,GAAe,KAAyB,EAAA;AAC5E,IAAO,OAAA,GAAA,CAAI,OAAQ,CAAA,OAAA,EAAS,YAAY,CAAA;AAAA;AAC1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,MAAa,MAAA,CACX,OACA,EAAA,OAAA,EACA,YACc,EAAA;AACd,IAAA,OAAO,GAAI,CAAA,MAAA,CAAO,OAAS,EAAA,OAAA,EAAS,YAAY,CAAA;AAAA;AAClD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,MAAa,WAAA,CACX,OACA,EAAA,OAAA,EACA,YACgB,EAAA;AAChB,IAAA,OAAO,GAAI,CAAA,WAAA,CAAY,OAAS,EAAA,OAAA,EAAS,YAAY,CAAA;AAAA;AACvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,MAAa,SAAS,OAAkC,EAAA;AACtD,IAAO,OAAA,GAAA,CAAI,SAAS,OAAO,CAAA;AAAA;AAC7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,aAAoB,SAAS,QAAmC,EAAA;AAC9D,IAAA,MAAM,UAAU,MAAMC,yBAAA,CAAS,MAAO,CAAA,CAAC,QAAQ,CAAC,CAAA;AAChD,IAAO,OAAA,OAAA,CAAQ,SAAS,IAAI,CAAA;AAAA;AAC9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,aAAoB,UAAU,SAAsD,EAAA;AAClF,IAAO,OAAAA,yBAAA,CAAS,OAAO,SAAS,CAAA;AAAA;AAClC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,aAAoB,KAAM,CAAA,OAAA,EAAiB,YAAwC,EAAA;AACjF,IAAA,OAAO,IAAI,QAAS,CAAA;AAAA,MAClB,MAAMC,oBAAa,CAAA,KAAA;AAAA,MACnB,IAAM,EAAA,OAAA;AAAA,MACN,OAAA;AAAA,MACA,OAAS,EAAA;AAAA,KACV,CAAA;AAAA;AACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,aAAoB,OAAA,CAAQ,OAAiB,EAAA,YAAA,GAAe,KAAyB,EAAA;AACnF,IAAA,OAAO,IAAI,QAAS,CAAA;AAAA,MAClB,MAAMA,oBAAa,CAAA,OAAA;AAAA,MACnB,IAAM,EAAA,SAAA;AAAA,MACN,OAAA;AAAA,MACA,OAAS,EAAA;AAAA,KACV,CAAA;AAAA;AACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,aAAoB,MAAA,CAClB,OACA,EAAA,OAAA,EACA,YACc,EAAA;AACd,IAAA,OAAO,IAAI,QAAS,CAAA;AAAA,MAClB,MAAMA,oBAAa,CAAA,IAAA;AAAA,MACnB,IAAM,EAAA,QAAA;AAAA,MACN,OAAA;AAAA,MACA,OAAA;AAAA,MACA,OAAS,EAAA;AAAA,KACV,CAAA;AAAA;AACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,aAAoB,WAAA,CAClB,OACA,EAAA,OAAA,EACA,YACgB,EAAA;AAChB,IAAA,OAAO,IAAI,QAAS,CAAA;AAAA,MAClB,MAAMA,oBAAa,CAAA,QAAA;AAAA,MACnB,IAAM,EAAA,aAAA;AAAA,MACN,OAAA;AAAA,MACA,OAAA;AAAA,MACA,OAAS,EAAA;AAAA,KACV,CAAA;AAAA;AACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,aAAoB,SAAS,OAAkC,EAAA;AAC7D,IAAA,OAAO,IAAI,QAAS,CAAA;AAAA,MAClB,MAAMA,oBAAa,CAAA,QAAA;AAAA,MACnB,IAAM,EAAA,UAAA;AAAA,MACN;AAAA,KACD,CAAA;AAAA;AAEL,CAAA;AAnMa,GAAN,GAAA,eAAA,CAAA;AAAA,EADNH,oBAAW;AAAA,CACC,EAAA,GAAA,CAAA;ACDN,IAAM,cAAN,MAA0C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAa/C,WAAY,CAAA,OAAA,GAAoB,EAAC,EAAG,KAAqB,EAAA;AACvD,IAAK,IAAA,CAAA,KAAA,GAAQ,IAAII,sBAAM,CAAA;AAAA,MACrB,IAAM,EAAA,OAAA;AAAA,MACN,GAAG;AAAA,KACJ,CAAA;AAAA;AACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQO,OAAO,GAAyB,EAAA;AACrC,IAAK,IAAA,CAAA,KAAA,CAAM,KAAK,GAAG,CAAA;AACnB,IAAO,OAAA,IAAA;AAAA;AACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQO,QAAQ,IAA4B,EAAA;AACzC,IAAA,IAAA,CAAK,QAAQ,CAAC,GAAA,KAAQ,IAAK,CAAA,MAAA,CAAO,GAAG,CAAC,CAAA;AACtC,IAAO,OAAA,IAAA;AAAA;AACT;AAAA;AAAA;AAAA;AAAA;AAAA,EAOO,QAAmB,GAAA;AACxB,IAAO,OAAA,IAAA,CAAK,MAAM,QAAS,EAAA;AAAA;AAC7B;AAAA;AAAA;AAAA,EAKO,MAAe,GAAA;AACpB,IAAQ,OAAA,CAAA,GAAA,CAAI,IAAK,CAAA,QAAA,EAAU,CAAA;AAAA;AAC7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,OAAc,WAAA,CAAY,IAA6B,EAAA,OAAA,EAAmB,KAAkC,EAAA;AAC1G,IAAA,MAAM,OAAU,GAAA,OAAA;AAChB,IAAA,MAAM,KAAQ,GAAA,IAAI,WAAY,CAAA,OAAA,EAAS,KAAK,CAAA;AAE5C,IAAK,IAAA,CAAA,OAAA,CAAQ,CAAC,IAAS,KAAA;AACrB,MAAA,MAAM,GAAM,GAAA,OAAA,CAAQ,GAAI,CAAA,CAAC,MAAQ,KAAA;AAlFvC,QAAA,IAAA,EAAA;AAkF0C,QAAK,OAAA,CAAA,EAAA,GAAA,IAAA,CAAA,MAAM,MAAX,IAAgB,GAAA,EAAA,GAAA,EAAA;AAAA,OAAE,CAAA;AACtD,MAAA,KAAA,CAAM,OAAO,GAAG,CAAA;AAAA,KACjB,CAAA;AAED,IAAO,OAAA,KAAA;AAAA;AAEX,CAAA;AA7Ea,WAAN,GAAA,eAAA,CAAA;AAAA,EADNJ,oBAAW;AAAA,CACC,EAAA,WAAA,CAAA;ACCN,IAAM,cAAN,MAA0C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAa/C,WAAA,CAAY,KAAQ,GAAA,GAAA,EAAK,MAA6B,EAAA;AACpD,IAAK,IAAA,CAAA,GAAA,GAAM,IAAIK,4BAAA,CAAY,SAAU,CAAA;AAAA,MACnC,SAAQ,MAAQ,IAAA,IAAA,GAAA,MAAA,GAAA,MAAA,CAAA,MAAA,KAAU,GAAGP,uBAAM,CAAA,IAAA,CAAK,OAAO,CAAC,CAAA,8CAAA,CAAA;AAAA,MAChD,eAAA,EAAA,CAAiB,iCAAQ,eAAmB,KAAA,QAAA;AAAA,MAC5C,iBAAA,EAAA,CAAmB,iCAAQ,iBAAqB,KAAA;AAAA,KACjD,CAAA;AAED,IAAK,IAAA,CAAA,GAAA,CAAI,KAAM,CAAA,KAAA,EAAO,CAAC,CAAA;AAAA;AACzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQO,MAAA,CAAO,OAAe,OAAqC,EAAA;AAChE,IAAK,IAAA,CAAA,GAAA,CAAI,MAAO,CAAA,KAAA,EAAO,OAAO,CAAA;AAAA;AAChC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQO,SAAA,CAAU,KAAQ,GAAA,CAAA,EAAG,OAAqC,EAAA;AAC/D,IAAK,IAAA,CAAA,GAAA,CAAI,SAAU,CAAA,KAAA,EAAO,OAAO,CAAA;AAAA;AACnC;AAAA;AAAA;AAAA,EAKO,IAAa,GAAA;AAClB,IAAA,IAAA,CAAK,IAAI,IAAK,EAAA;AAAA;AAChB;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,OAAc,cAAuC,GAAA;AACnD,IAAO,OAAA,IAAIO,6BAAY,QAAS,CAAA;AAAA,MAC9B,MAAQ,EAAA,CAAA,EAAGP,uBAAM,CAAA,IAAA,CAAK,OAAO,CAAC,CAAA,8CAAA,CAAA;AAAA,MAC9B,eAAiB,EAAA,QAAA;AAAA,MACjB,iBAAmB,EAAA;AAAA,KACpB,CAAA;AAAA;AAEL,CAAA;AA9Da,WAAN,GAAA,eAAA,CAAA;AAAA,EADNE,oBAAW;AAAA,CACC,EAAA,WAAA,CAAA;;;ACcAM,mBAAA,GAAN,0BAA0B,WAAY,CAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAe3C,MAAa,OAA2B,GAAA;AACtC,IAAI,IAAA;AACF,MAAA,MAAM,UAAW,IAAK,CAAA,KAAA,CAAM,SAAU,CAAA,SAAS,KAAgB,IAAK,CAAA,OAAA;AAEpE,MAAA,IAAI,CAAC,OAAS,EAAA;AAEZ,QAAA,MAAM,eAAkB,GAAA,MAAM,GAAI,CAAA,MAAA,CAAO,sCAAwC,EAAA;AAAA,UAC/E,EAAE,IAAA,EAAM,qBAAuB,EAAA,KAAA,EAAO,KAAM,EAAA;AAAA,UAC5C,EAAE,IAAA,EAAM,QAAU,EAAA,KAAA,EAAO,OAAQ,EAAA;AAAA,UACjC,EAAE,IAAA,EAAM,eAAiB,EAAA,KAAA,EAAO,UAAW,EAAA;AAAA,UAC3C,EAAE,IAAA,EAAM,cAAgB,EAAA,KAAA,EAAO,KAAM;AAAA,SACtC,CAAA;AAED,QAAA,IAAI,oBAAoB,KAAO,EAAA;AAC7B,UAAA,MAAM,KAAK,OAAQ,EAAA;AACnB,UAAA,MAAM,KAAK,SAAU,EAAA;AACrB,UAAA,MAAM,KAAK,YAAa,EAAA;AAAA,SAC1B,MAAA,IAAW,oBAAoB,KAAO,EAAA;AACpC,UAAA,MAAM,KAAK,OAAQ,EAAA;AAAA,SACrB,MAAA,IAAW,oBAAoB,OAAS,EAAA;AACtC,UAAA,MAAM,KAAK,SAAU,EAAA;AAAA,SACvB,MAAA,IAAW,oBAAoB,UAAY,EAAA;AACzC,UAAA,MAAM,KAAK,YAAa,EAAA;AAAA;AAC1B,OACK,MAAA;AACL,QAAA,IAAI,YAAY,KAAO,EAAA;AACrB,UAAA,MAAM,KAAK,OAAQ,EAAA;AAAA,SACrB,MAAA,IAAW,YAAY,OAAS,EAAA;AAC9B,UAAA,MAAM,KAAK,SAAU,EAAA;AAAA,SACvB,MAAA,IAAW,YAAY,UAAY,EAAA;AACjC,UAAA,MAAM,KAAK,YAAa,EAAA;AAAA,SACnB,MAAA;AACL,UAAK,IAAA,CAAA,KAAA,CAAM,CAAoB,iBAAA,EAAA,OAAO,CAAE,CAAA,CAAA;AACxC,UAAA,OAAO,WAAY,CAAA,OAAA;AAAA;AACrB;AAGF,MAAA,OAAO,WAAY,CAAA,OAAA;AAAA,aACZ,KAAO,EAAA;AACd,MAAK,IAAA,CAAA,KAAA,CAAM,sBAAsB,KAAiB,YAAA,KAAA,GAAQ,MAAM,OAAU,GAAA,MAAA,CAAO,KAAK,CAAC,CAAE,CAAA,CAAA;AACzF,MAAA,OAAO,WAAY,CAAA,OAAA;AAAA;AACrB;AACF;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAc,OAAyB,GAAA;AACrC,IAAA,IAAA,CAAK,KAAK,sCAAsC,CAAA;AAEhD,IAAA,MAAM,IAAO,GAAA,MAAM,GAAI,CAAA,KAAA,CAAM,mBAAmB,CAAA;AAChD,IAAM,MAAA,GAAA,GAAM,MAAM,GAAA,CAAI,QAAS,CAAA;AAAA,MAC7B,MAAMH,oBAAa,CAAA,MAAA;AAAA,MACnB,IAAM,EAAA,KAAA;AAAA,MACN,OAAS,EAAA,kBAAA;AAAA,MACT,QAAA,EAAU,CAAC,KAAU,KAAA;AACnB,QAAA,IAAI,KAAM,CAAA,KAAK,CAAK,IAAA,KAAA,GAAQ,CAAG,EAAA;AAC7B,UAAO,OAAA,0BAAA;AAAA;AAET,QAAO,OAAA,IAAA;AAAA;AACT,KACD,CAAA;AAED,IAAA,MAAM,QAAW,GAAA,MAAM,GAAI,CAAA,OAAA,CAAQ,wBAAwB,CAAA;AAE3D,IAAA,MAAM,aAAgB,GAAA,MAAM,GAAI,CAAA,MAAA,CAAO,6BAA+B,EAAA;AAAA,MACpE,KAAA;AAAA,MACA,OAAA;AAAA,MACA,MAAA;AAAA,MACA,QAAA;AAAA,MACA;AAAA,KACD,CAAA;AAED,IAAA,MAAM,SAAY,GAAA,MAAM,GAAI,CAAA,WAAA,CAAY,0CAA4C,EAAA;AAAA,MAClF,YAAA;AAAA,MACA,YAAA;AAAA,MACA,KAAA;AAAA,MACA,QAAA;AAAA,MACA,MAAA;AAAA,MACA,IAAA;AAAA,MACA,MAAA;AAAA,MACA;AAAA,KACD,CAAA;AAED,IAAA,IAAA,CAAK,IAAK,EAAA;AACV,IAAA,IAAA,CAAK,QAAQ,kBAAkB,CAAA;AAC/B,IAAA,IAAA,CAAK,IAAK,EAAA;AACV,IAAA,IAAA,CAAK,KAAK,CAASL,MAAAA,EAAAA,uBAAAA,CAAM,IAAK,CAAA,IAAI,CAAC,CAAE,CAAA,CAAA;AACrC,IAAA,IAAA,CAAK,KAAK,CAAQA,KAAAA,EAAAA,uBAAAA,CAAM,IAAK,CAAA,GAAG,CAAC,CAAE,CAAA,CAAA;AACnC,IAAK,IAAA,CAAA,IAAA,CAAK,CAAc,WAAA,EAAA,QAAA,GAAWA,uBAAM,CAAA,KAAA,CAAM,KAAK,CAAA,GAAIA,uBAAM,CAAA,GAAA,CAAI,IAAI,CAAC,CAAE,CAAA,CAAA;AACzE,IAAA,IAAA,CAAK,KAAK,CAAmBA,gBAAAA,EAAAA,uBAAAA,CAAM,IAAK,CAAA,aAAa,CAAC,CAAE,CAAA,CAAA;AACxD,IAAA,IAAA,CAAK,IAAK,CAAA,CAAA,WAAA,EAAc,SAAU,CAAA,GAAA,CAAI,CAAC,CAAMA,KAAAA,uBAAAA,CAAM,IAAK,CAAA,CAAC,CAAC,CAAA,CAAE,IAAK,CAAA,IAAI,CAAC,CAAE,CAAA,CAAA;AACxE,IAAA,IAAA,CAAK,IAAK,EAAA;AAAA;AACZ;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAc,SAA2B,GAAA;AACvC,IAAA,IAAA,CAAK,KAAK,yBAAyB,CAAA;AAGnC,IAAM,MAAA,KAAA,GAAQ,IAAI,WAAY,CAAA,CAAC,MAAM,MAAQ,EAAA,OAAA,EAAS,MAAM,CAAC,CAAA;AAE7D,IAAA,KAAA,CAAM,OAAQ,CAAA;AAAA,MACZ,CAAC,CAAA,EAAG,UAAY,EAAA,kBAAA,EAAoB,OAAO,CAAA;AAAA,MAC3C,CAAC,CAAA,EAAG,YAAc,EAAA,kBAAA,EAAoB,MAAM,CAAA;AAAA,MAC5C,CAAC,CAAA,EAAG,aAAe,EAAA,iBAAA,EAAmB,QAAQ;AAAA,KAC/C,CAAA;AAED,IAAA,IAAA,CAAK,IAAK,EAAA;AACV,IAAA,KAAA,CAAM,MAAO,EAAA;AACb,IAAA,IAAA,CAAK,IAAK,EAAA;AAGV,IAAA,MAAM,KAAQ,GAAA;AAAA,MACZ,EAAE,EAAI,EAAA,CAAA,EAAG,IAAM,EAAA,UAAA,EAAY,OAAO,kBAAoB,EAAA,IAAA,EAAM,OAAS,EAAA,MAAA,EAAQ,IAAK,EAAA;AAAA,MAClF,EAAE,EAAI,EAAA,CAAA,EAAG,IAAM,EAAA,YAAA,EAAc,OAAO,kBAAoB,EAAA,IAAA,EAAM,MAAQ,EAAA,MAAA,EAAQ,KAAM,EAAA;AAAA,MACpF,EAAE,EAAI,EAAA,CAAA,EAAG,IAAM,EAAA,aAAA,EAAe,OAAO,iBAAmB,EAAA,IAAA,EAAM,QAAU,EAAA,MAAA,EAAQ,IAAK;AAAA,KACvF;AAEA,IAAM,MAAA,WAAA,GAAc,YAAY,WAAY,CAAA,KAAA,EAAO,CAAC,IAAM,EAAA,MAAA,EAAQ,OAAS,EAAA,MAAM,CAAG,EAAA;AAAA,MAClF,KAAO,EAAA;AAAA,QACL,IAAA,EAAM,CAAC,MAAM,CAAA;AAAA,QACb,MAAA,EAAQ,CAAC,MAAM;AAAA;AACjB,KACD,CAAA;AAED,IAAA,IAAA,CAAK,IAAK,EAAA;AACV,IAAA,WAAA,CAAY,MAAO,EAAA;AACnB,IAAA,IAAA,CAAK,IAAK,EAAA;AAAA;AACZ;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAc,YAA8B,GAAA;AAC1C,IAAA,IAAA,CAAK,KAAK,gCAAgC,CAAA;AAG1C,IAAA,MAAM,KAAQ,GAAA,GAAA;AACd,IAAM,MAAA,GAAA,GAAM,IAAI,WAAA,CAAY,KAAK,CAAA;AAEjC,IAAA,KAAA,IAAS,CAAI,GAAA,CAAA,EAAG,CAAK,IAAA,KAAA,EAAO,CAAK,EAAA,EAAA;AAC/B,MAAA,GAAA,CAAI,OAAO,CAAC,CAAA;AACZ,MAAM,MAAA,IAAA,CAAK,MAAM,EAAE,CAAA;AAAA;AAGrB,IAAA,GAAA,CAAI,IAAK,EAAA;AACT,IAAA,IAAA,CAAK,IAAK,EAAA;AAGV,IAAA,IAAA,CAAK,KAAK,yCAAyC,CAAA;AAEnD,IAAM,MAAA,QAAA,GAAW,YAAY,cAAe,EAAA;AAE5C,IAAM,MAAA,IAAA,GAAO,SAAS,MAAO,CAAA,GAAA,EAAK,GAAG,EAAE,IAAA,EAAM,UAAU,CAAA;AACvD,IAAM,MAAA,IAAA,GAAO,SAAS,MAAO,CAAA,GAAA,EAAK,GAAG,EAAE,IAAA,EAAM,UAAU,CAAA;AACvD,IAAM,MAAA,IAAA,GAAO,SAAS,MAAO,CAAA,GAAA,EAAK,GAAG,EAAE,IAAA,EAAM,UAAU,CAAA;AAEvD,IAAA,KAAA,IAAS,CAAI,GAAA,CAAA,EAAG,CAAK,IAAA,GAAA,EAAK,CAAK,EAAA,EAAA;AAC7B,MAAA,IAAA,CAAK,MAAO,CAAA,CAAA,EAAG,EAAE,IAAA,EAAM,UAAU,CAAA;AAEjC,MAAA,IAAI,KAAK,EAAI,EAAA;AACX,QAAA,IAAA,CAAK,MAAO,CAAA,IAAA,CAAK,GAAI,CAAA,IAAA,CAAK,OAAO,CAAI,GAAA,EAAA,IAAM,GAAG,CAAA,EAAG,GAAG,CAAA,EAAG,EAAE,IAAA,EAAM,UAAU,CAAA;AAAA;AAG3E,MAAA,IAAI,KAAK,EAAI,EAAA;AACX,QAAA,IAAA,CAAK,MAAO,CAAA,IAAA,CAAK,GAAI,CAAA,IAAA,CAAK,OAAO,CAAI,GAAA,EAAA,IAAM,GAAG,CAAA,EAAG,GAAG,CAAA,EAAG,EAAE,IAAA,EAAM,UAAU,CAAA;AAAA;AAG3E,MAAM,MAAA,IAAA,CAAK,MAAM,EAAE,CAAA;AAAA;AAGrB,IAAA,QAAA,CAAS,IAAK,EAAA;AACd,IAAA,IAAA,CAAK,IAAK,EAAA;AAEV,IAAA,IAAA,CAAK,QAAQ,sCAAsC,CAAA;AAAA;AACrD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASQ,MAAM,EAA2B,EAAA;AACvC,IAAA,OAAO,IAAI,OAAQ,CAAA,CAAC,YAAY,UAAW,CAAA,OAAA,EAAS,EAAE,CAAC,CAAA;AAAA;AAE3D;AA3MU,eAAA,CAAA;AAAA,EAJP,MAAO,CAAA;AAAA,IACN,KAAO,EAAA,yBAAA;AAAA,IACP,WAAa,EAAA;AAAA,GACd;AAAA,CAAA,EAPUQ,mBAQH,CAAA,SAAA,EAAA,SAAA,EAAA,CAAA,CAAA;AARGA,mBAAN,GAAA,eAAA,CAAA;AAAA,EAVN,OAAQ,CAAA;AAAA,IACP,IAAM,EAAA,MAAA;AAAA,IACN,WAAa,EAAA,yBAAA;AAAA,IACb,SAAW,EAAA;AAAA,MACT;AAAA,QACE,IAAM,EAAA,IAAA;AAAA,QACN,WAAa,EAAA;AAAA;AACf;AACF,GACD;AAAA,CACY,EAAAA,mBAAA,CAAA","file":"demo-command.js","sourcesContent":["import type { IInput } from \"@pixielity/ts-types\"\n\n/**\n * Implementation of the IInput interface\n *\n * Parses command line arguments and provides access to them.\n */\nexport class Input implements IInput {\n  /**\n   * The command name\n   * @private\n   */\n  private commandName?: string\n\n  /**\n   * Map of argument names to values\n   * @private\n   */\n  private args: Record<string, string> = {}\n\n  /**\n   * Map of option names to values\n   * @private\n   */\n  private opts: Record<string, string | boolean> = {}\n\n  /**\n   * Creates a new Input instance\n   *\n   * @param {string[]} argv - The command line arguments\n   */\n  constructor(argv: string[]) {\n    this.parse(argv)\n  }\n\n  /**\n   * Gets the command name from the input\n   *\n   * @returns {string | undefined} The command name or undefined if not provided\n   */\n  public getCommandName(): string | undefined {\n    return this.commandName\n  }\n\n  /**\n   * Gets an argument value by name\n   *\n   * @param {string} name - The name of the argument\n   * @returns {string | undefined} The argument value or undefined if not provided\n   */\n  public getArgument(name: string): string | undefined {\n    return this.args[name]\n  }\n\n  /**\n   * Gets all arguments\n   *\n   * @returns {Record<string, string>} Map of argument names to values\n   */\n  public getArguments(): Record<string, string> {\n    return { ...this.args }\n  }\n\n  /**\n   * Gets an option value by name\n   *\n   * @param {string} name - The name of the option\n   * @returns {string | boolean | undefined} The option value or undefined if not provided\n   */\n  public getOption(name: string): string | boolean | undefined {\n    return this.opts[name]\n  }\n\n  /**\n   * Gets all options\n   *\n   * @returns {Record<string, string | boolean>} Map of option names to values\n   */\n  public getOptions(): Record<string, string | boolean> {\n    return { ...this.opts }\n  }\n\n  /**\n   * Checks if an option is set\n   *\n   * @param {string} name - The name of the option\n   * @returns {boolean} True if the option is set, false otherwise\n   */\n  public hasOption(name: string): boolean {\n    return name in this.opts\n  }\n\n  /**\n   * Parses the command line arguments\n   *\n   * @param {string[]} argv - The command line arguments\n   * @private\n   */\n  private parse(argv: string[]): void {\n    if (argv.length === 0) {\n      return\n    }\n\n    // First argument is the command name\n    this.commandName = argv[0]\n\n    let i = 1\n    let currentArgName = 0\n\n    while (i < argv.length) {\n      const arg = argv[i]\n\n      // Handle options (--option or -o)\n      if (arg.startsWith(\"--\")) {\n        const optName = arg.substring(2)\n\n        // Handle --option=value\n        if (optName.includes(\"=\")) {\n          const [name, value] = optName.split(\"=\", 2)\n          this.opts[name] = value\n        } else {\n          // Handle --option value or --option (boolean flag)\n          if (i + 1 < argv.length && !argv[i + 1].startsWith(\"-\")) {\n            this.opts[optName] = argv[i + 1]\n            i++\n          } else {\n            this.opts[optName] = true\n          }\n        }\n      } else if (arg.startsWith(\"-\")) {\n        const optName = arg.substring(1)\n\n        // Handle -o=value\n        if (optName.includes(\"=\")) {\n          const [name, value] = optName.split(\"=\", 2)\n          this.opts[name] = value\n        } else {\n          // Handle -o value or -o (boolean flag)\n          if (i + 1 < argv.length && !argv[i + 1].startsWith(\"-\")) {\n            this.opts[optName] = argv[i + 1]\n            i++\n          } else {\n            this.opts[optName] = true\n          }\n        }\n      } else {\n        // Handle positional arguments\n        this.args[currentArgName.toString()] = arg\n        currentArgName++\n      }\n\n      i++\n    }\n  }\n}\n","import chalk from \"chalk\"\nimport type { IOutput } from \"@pixielity/ts-types\"\n\n/**\n * Implementation of the IOutput interface\n *\n * Provides methods for writing to the console with formatting using chalk.\n */\nexport class Output implements IOutput {\n  /**\n   * Writes a message to the output\n   *\n   * @param {string} message - The message to write\n   */\n  public write(message: string): void {\n    process.stdout.write(message)\n  }\n\n  /**\n   * Writes a message to the output followed by a newline\n   *\n   * @param {string} message - The message to write\n   */\n  public writeln(message: string): void {\n    console.log(message)\n  }\n\n  /**\n   * Writes an error message to the output\n   *\n   * @param {string} message - The error message to write\n   */\n  public error(message: string): void {\n    console.error(chalk.bold.red(\"ERROR\") + \": \" + message)\n  }\n\n  /**\n   * Writes a success message to the output\n   *\n   * @param {string} message - The success message to write\n   */\n  public success(message: string): void {\n    console.log(chalk.bold.green(\"SUCCESS\") + \": \" + message)\n  }\n\n  /**\n   * Writes an info message to the output\n   *\n   * @param {string} message - The info message to write\n   */\n  public info(message: string): void {\n    console.log(chalk.bold.blue(\"INFO\") + \": \" + message)\n  }\n\n  /**\n   * Writes a warning message to the output\n   *\n   * @param {string} message - The warning message to write\n   */\n  public warning(message: string): void {\n    console.log(chalk.bold.yellow(\"WARNING\") + \": \" + message)\n  }\n\n  /**\n   * Writes a comment message to the output\n   *\n   * @param {string} message - The comment message to write\n   */\n  public comment(message: string): void {\n    console.log(chalk.gray(\"// \" + message))\n  }\n}\n","import { Container } from \"inversify\"\nimport \"reflect-metadata\"\n\n/**\n * The global Inversify container instance\n */\nconst container = new Container({\n  defaultScope: \"Singleton\",\n})\n\nexport { container }\n","import 'reflect-metadata'\nimport { injectable } from 'inversify'\nimport { ICommand, ICommandOptions } from '@pixielity/ts-types'\n\nimport { container } from '../di/container'\n\n/**\n * Metadata key for command\n */\nexport const COMMAND_METADATA_KEY = Symbol('command')\n\n/**\n * Command decorator\n *\n * Marks a class as a console command and registers it with the container\n *\n * @param {CommandOptions} options - The command options\n * @returns {ClassDecorator} The class decorator\n */\nexport function Command(options: ICommandOptions): ClassDecorator {\n  return (target: Function): void => {\n    // Set default values for options\n    const commandOptions = {\n      ...options,\n      hidden: options.hidden ?? false,\n      injectable: options.injectable ?? true,\n      description: options.description || '',\n      shortcuts: options.shortcuts || [],\n    }\n\n    // Store command metadata with defaults applied\n    Reflect.defineMetadata(COMMAND_METADATA_KEY, commandOptions, target)\n\n    // Make the class injectable if not explicitly disabled\n    if (commandOptions.injectable) {\n      injectable()(target)\n\n      // Register the command with the container\n      // We use a multi-injection approach for commands\n      try {\n        container\n          .bind(ICommand.$)\n          .to(target as any)\n          .inSingletonScope()\n      } catch (error) {\n        // If the binding already exists, we can ignore the error\n        // This can happen during hot reloading\n      }\n    }\n  }\n}\n","import \"reflect-metadata\"\n\n/**\n * Metadata key for options\n */\nexport const OPTION_METADATA_KEY = Symbol(\"option\")\n\n/**\n * Option options interface\n */\nexport interface OptionOptions {\n  /**\n   * The flags for the option (e.g., \"-n, --name\")\n   */\n  flags: string\n\n  /**\n   * The description of the option\n   */\n  description?: string\n\n  /**\n   * The default value of the option\n   */\n  defaultValue?: any\n}\n\n/**\n * Option decorator\n *\n * Defines a command option\n *\n * @param {OptionOptions} options - The option options\n * @returns {PropertyDecorator} The property decorator\n */\nexport function Option(options: OptionOptions): PropertyDecorator {\n  return (target: Object, propertyKey: string | symbol) => {\n    const metadata = {\n      flags: options.flags,\n      description: options.description || \"\",\n      defaultValue: options.defaultValue,\n      propertyKey,\n    }\n\n    // Get existing metadata or initialize empty array\n    const existingMetadata = Reflect.getMetadata(OPTION_METADATA_KEY, target.constructor) || []\n\n    // Add new metadata\n    existingMetadata.push(metadata)\n\n    // Update metadata\n    Reflect.defineMetadata(OPTION_METADATA_KEY, existingMetadata, target.constructor)\n  }\n}\n","import type { ICommand } from '@pixielity/ts-types'\nimport type { IInput } from '@pixielity/ts-types'\nimport type { IOutput } from '@pixielity/ts-types'\nimport { Input } from '../input/input'\nimport { Output } from '../output/output'\nimport { COMMAND_METADATA_KEY } from '../decorators'\n\n/**\n * Abstract base class for console commands.\n *\n * Provides a consistent structure and common functionality for defining and executing\n * commands in the console. Supports Laravel/Symfony-inspired argument and option handling.\n */\nexport abstract class BaseCommand implements ICommand {\n  /**\n   * Exit code for successful execution.\n   */\n  public static readonly SUCCESS = 0\n\n  /**\n   * Exit code indicating a general failure.\n   */\n  public static readonly FAILURE = 1\n\n  /**\n   * Exit code for invalid user input.\n   */\n  public static readonly INVALID = 2\n\n  /**\n   * Name of the command.\n   * Defined in the constructor or through the `@Command` decorator metadata.\n   */\n  protected name: string\n\n  /**\n   * Description of the command.\n   * Shown in help output and can be set via constructor or metadata.\n   */\n  protected description: string\n\n  /**\n   * Input instance for handling command-line arguments and options.\n   */\n  protected input: IInput\n\n  /**\n   * Output instance for writing messages to the terminal.\n   */\n  protected output: IOutput\n\n  /**\n   * Creates a new instance of the BaseCommand.\n   *\n   * @param name - The name of the command (optional if using decorator)\n   * @param description - The description of the command\n   * @throws Will throw if name is missing and no decorator metadata is found.\n   */\n  constructor(name?: string, description = '') {\n    const metadata = Reflect.getMetadata(COMMAND_METADATA_KEY, this.constructor)\n\n    if (!name && metadata?.name) {\n      this.name = metadata.name\n      this.description = description || metadata.description || ''\n    } else if (name) {\n      this.name = name\n      this.description = description\n    } else {\n      throw new Error(`Command name is required. Provide it via constructor or @Command decorator.`)\n    }\n\n    this.input = new Input([])\n    this.output = new Output()\n  }\n\n  /**\n   * Returns the name of the command.\n   *\n   * @returns The command name.\n   */\n  public getName(): string {\n    return this.name\n  }\n\n  /**\n   * Returns the description of the command.\n   *\n   * @returns The command description.\n   */\n  public getDescription(): string {\n    return this.description\n  }\n\n  /**\n   * Sets the input instance used by this command.\n   *\n   * @param input - The input instance.\n   */\n  public setInput(input: IInput): void {\n    this.input = input\n  }\n\n  /**\n   * Retrieves the current input instance.\n   *\n   * @returns The input instance.\n   */\n  public getInput(): IInput {\n    return this.input\n  }\n\n  /**\n   * Sets the output instance used by this command.\n   *\n   * @param output - The output instance.\n   */\n  public setOutput(output: IOutput): void {\n    this.output = output\n  }\n\n  /**\n   * Retrieves the current output instance.\n   *\n   * @returns The output instance.\n   */\n  public getOutput(): IOutput {\n    return this.output\n  }\n\n  /**\n   * Sets multiple arguments for the command.\n   *\n   * @param args - Positional arguments as an array.\n   */\n  public setArguments(args: string[]): void {\n    args.forEach((arg, index) => {\n      ;(this.input as any).args[index.toString()] = arg\n    })\n  }\n\n  /**\n   * Sets a single named argument.\n   *\n   * @param key - The argument name.\n   * @param value - The argument value.\n   */\n  public setArgument(key: string, value: any): void {\n    ;(this.input as any).args[key] = value\n  }\n\n  /**\n   * Retrieves all arguments as a key-value object.\n   *\n   * @returns Object containing all arguments.\n   */\n  public getArguments(): Record<string, any> {\n    return (this.input as any).args || {}\n  }\n\n  /**\n   * Retrieves a single argument by name.\n   *\n   * @param key - The argument name.\n   * @returns The value of the argument or undefined if not found.\n   */\n  public getArgument(key: string): any {\n    return (this.input as any).args?.[key]\n  }\n\n  /**\n   * Sets multiple options for the command.\n   *\n   * @param options - Object of option keys and values.\n   */\n  public setOptions(options: Record<string, any>): void {\n    Object.entries(options).forEach(([key, value]) => {\n      ;(this.input as any).opts[key] = value\n    })\n  }\n\n  /**\n   * Sets a single named option.\n   *\n   * @param key - The option name.\n   * @param value - The option value.\n   */\n  public setOption(key: string, value: any): void {\n    ;(this.input as any).opts[key] = value\n  }\n\n  /**\n   * Retrieves all options as a key-value object.\n   *\n   * @returns Object containing all options.\n   */\n  public getOptions(): Record<string, any> {\n    return (this.input as any).opts || {}\n  }\n\n  /**\n   * Retrieves a single option by name.\n   *\n   * @param key - The option name.\n   * @returns The value of the option or undefined if not found.\n   */\n  public getOption(key: string): any {\n    return (this.input as any).opts?.[key]\n  }\n\n  /**\n   * Configures arguments and options.\n   *\n   * Should be overridden in the subclass to define expected inputs.\n   */\n  public configure(): void {\n    // To be implemented in subclasses\n  }\n\n  /**\n   * Abstract method that executes the command's logic.\n   *\n   * Must be implemented in the subclass.\n   *\n   * @returns Exit code or void.\n   */\n  public abstract execute(): Promise<number | void>\n\n  /**\n   * Lifecycle hook that runs before command execution.\n   *\n   * Override this method to add pre-execution checks or setup.\n   *\n   * @returns True if execution should proceed, false to abort.\n   */\n  public async beforeExecute(): Promise<boolean> {\n    return true\n  }\n\n  /**\n   * Lifecycle hook that runs after command execution.\n   *\n   * Override this method to add post-processing or cleanup.\n   *\n   * @param exitCode - The result of command execution.\n   */\n  public async afterExecute(exitCode: number | void): Promise<void> {\n    // Optional: post-execution logic\n  }\n\n  /**\n   * Writes a simple message line to output.\n   *\n   * @param message - The message to write.\n   */\n  protected line(message = ''): void {\n    this.output.writeln(message)\n  }\n\n  /**\n   * Writes an informational message to output.\n   *\n   * @param message - The message to write.\n   */\n  protected info(message: string): void {\n    this.output.info(message)\n  }\n\n  /**\n   * Writes a success message to output.\n   *\n   * @param message - The message to write.\n   */\n  protected success(message: string): void {\n    this.output.success(message)\n  }\n\n  /**\n   * Writes an error message to output.\n   *\n   * @param message - The message to write.\n   */\n  protected error(message: string): void {\n    this.output.error(message)\n  }\n\n  /**\n   * Writes a warning message to output.\n   *\n   * @param message - The message to write.\n   */\n  protected warning(message: string): void {\n    this.output.warning(message)\n  }\n\n  /**\n   * Writes a comment-style message to output.\n   *\n   * @param message - The message to write.\n   */\n  protected comment(message: string): void {\n    this.output.comment(message)\n  }\n}\n","import inquirer from 'inquirer'\nimport { injectable } from 'inversify'\nimport type { IAsk } from '@pixielity/ts-types'\nimport type { IQuestion } from '@pixielity/ts-types'\nimport { QuestionType } from '@pixielity/ts-types'\n\n/**\n * Ask utility class\n *\n * Provides methods for asking questions in the console.\n */\n@injectable()\nexport class Ask implements IAsk {\n  /**\n   * Asks a single question\n   *\n   * @param {IQuestion} question - The question to ask\n   * @returns {Promise<any>} The answer\n   */\n  public async question(question: IQuestion): Promise<any> {\n    return Ask.question(question)\n  }\n\n  /**\n   * Asks multiple questions\n   *\n   * @param {IQuestion[]} questions - The questions to ask\n   * @returns {Promise<Record<string, any>>} The answers\n   */\n  public async questions(questions: IQuestion[]): Promise<Record<string, any>> {\n    return Ask.questions(questions)\n  }\n\n  /**\n   * Asks for input\n   *\n   * @param {string} message - The message to display\n   * @param {string} defaultValue - The default value\n   * @returns {Promise<string>} The input\n   */\n  public async input(message: string, defaultValue?: string): Promise<string> {\n    return Ask.input(message, defaultValue)\n  }\n\n  /**\n   * Asks for confirmation\n   *\n   * @param {string} message - The message to display\n   * @param {boolean} defaultValue - The default value\n   * @returns {Promise<boolean>} The confirmation\n   */\n  public async confirm(message: string, defaultValue = false): Promise<boolean> {\n    return Ask.confirm(message, defaultValue)\n  }\n\n  /**\n   * Asks for a selection from a list\n   *\n   * @param {string} message - The message to display\n   * @param {string[] | { name: string; value: any }[]} choices - The choices\n   * @param {any} defaultValue - The default value\n   * @returns {Promise<any>} The selection\n   */\n  public async select(\n    message: string,\n    choices: string[] | { name: string; value: any }[],\n    defaultValue?: any,\n  ): Promise<any> {\n    return Ask.select(message, choices, defaultValue)\n  }\n\n  /**\n   * Asks for multiple selections from a list\n   *\n   * @param {string} message - The message to display\n   * @param {string[] | { name: string; value: any }[]} choices - The choices\n   * @param {any[]} defaultValue - The default values\n   * @returns {Promise<any[]>} The selections\n   */\n  public async multiSelect(\n    message: string,\n    choices: string[] | { name: string; value: any }[],\n    defaultValue?: any[],\n  ): Promise<any[]> {\n    return Ask.multiSelect(message, choices, defaultValue)\n  }\n\n  /**\n   * Asks for a password\n   *\n   * @param {string} message - The message to display\n   * @returns {Promise<string>} The password\n   */\n  public async password(message: string): Promise<string> {\n    return Ask.password(message)\n  }\n\n  /**\n   * Asks a single question\n   *\n   * @param {IQuestion} question - The question to ask\n   * @returns {Promise<any>} The answer\n   */\n  public static async question(question: IQuestion): Promise<any> {\n    const answers = await inquirer.prompt([question])\n    return answers[question.name]\n  }\n\n  /**\n   * Asks multiple questions\n   *\n   * @param {IQuestion[]} questions - The questions to ask\n   * @returns {Promise<Record<string, any>>} The answers\n   */\n  public static async questions(questions: IQuestion[]): Promise<Record<string, any>> {\n    return inquirer.prompt(questions)\n  }\n\n  /**\n   * Asks for input\n   *\n   * @param {string} message - The message to display\n   * @param {string} defaultValue - The default value\n   * @returns {Promise<string>} The input\n   */\n  public static async input(message: string, defaultValue?: string): Promise<string> {\n    return Ask.question({\n      type: QuestionType.Input,\n      name: 'input',\n      message,\n      default: defaultValue,\n    })\n  }\n\n  /**\n   * Asks for confirmation\n   *\n   * @param {string} message - The message to display\n   * @param {boolean} defaultValue - The default value\n   * @returns {Promise<boolean>} The confirmation\n   */\n  public static async confirm(message: string, defaultValue = false): Promise<boolean> {\n    return Ask.question({\n      type: QuestionType.Confirm,\n      name: 'confirm',\n      message,\n      default: defaultValue,\n    })\n  }\n\n  /**\n   * Asks for a selection from a list\n   *\n   * @param {string} message - The message to display\n   * @param {string[] | { name: string; value: any }[]} choices - The choices\n   * @param {any} defaultValue - The default value\n   * @returns {Promise<any>} The selection\n   */\n  public static async select(\n    message: string,\n    choices: string[] | { name: string; value: any }[],\n    defaultValue?: any,\n  ): Promise<any> {\n    return Ask.question({\n      type: QuestionType.List,\n      name: 'select',\n      message,\n      choices,\n      default: defaultValue,\n    })\n  }\n\n  /**\n   * Asks for multiple selections from a list\n   *\n   * @param {string} message - The message to display\n   * @param {string[] | { name: string; value: any }[]} choices - The choices\n   * @param {any[]} defaultValue - The default values\n   * @returns {Promise<any[]>} The selections\n   */\n  public static async multiSelect(\n    message: string,\n    choices: string[] | { name: string; value: any }[],\n    defaultValue?: any[],\n  ): Promise<any[]> {\n    return Ask.question({\n      type: QuestionType.Checkbox,\n      name: 'multiSelect',\n      message,\n      choices,\n      default: defaultValue,\n    })\n  }\n\n  /**\n   * Asks for a password\n   *\n   * @param {string} message - The message to display\n   * @returns {Promise<string>} The password\n   */\n  public static async password(message: string): Promise<string> {\n    return Ask.question({\n      type: QuestionType.Password,\n      name: 'password',\n      message,\n    })\n  }\n}\n","import Table from 'cli-table3'\nimport { injectable } from \"inversify\"\nimport type { ITableOutput } from '@pixielity/ts-types'\nimport type { ITableStyle } from '@pixielity/ts-types'\n\n/**\n * Table utility class\n *\n * Provides methods for displaying tables in the console.\n */\n@injectable()\nexport class TableOutput implements ITableOutput {\n  /**\n   * The table instance\n   * @private\n   */\n  private table: Table.Table\n\n  /**\n   * Creates a new TableOutput instance\n   *\n   * @param {string[]} headers - The table headers\n   * @param {ITableStyle} style - The table style\n   */\n  constructor(headers: string[] = [], style?: ITableStyle) {\n    this.table = new Table({\n      head: headers,\n      ...style,\n    })\n  }\n\n  /**\n   * Adds a row to the table\n   *\n   * @param {any[]} row - The row data\n   * @returns {TableOutput} The table instance for chaining\n   */\n  public addRow(row: any[]): TableOutput {\n    this.table.push(row)\n    return this\n  }\n\n  /**\n   * Adds multiple rows to the table\n   *\n   * @param {any[][]} rows - The rows data\n   * @returns {TableOutput} The table instance for chaining\n   */\n  public addRows(rows: any[][]): TableOutput {\n    rows.forEach((row) => this.addRow(row))\n    return this\n  }\n\n  /**\n   * Renders the table to a string\n   *\n   * @returns {string} The rendered table\n   */\n  public toString(): string {\n    return this.table.toString()\n  }\n\n  /**\n   * Renders the table to the console\n   */\n  public render(): void {\n    console.log(this.toString())\n  }\n\n  /**\n   * Creates a new table from an array of objects\n   *\n   * @param {Record<string, any>[]} data - The data\n   * @param {string[]} columns - The columns to include\n   * @param {ITableStyle} style - The table style\n   * @returns {TableOutput} The table instance\n   */\n  public static fromObjects(data: Record<string, any>[], columns: string[], style?: ITableStyle): TableOutput {\n    const headers = columns\n    const table = new TableOutput(headers, style)\n\n    data.forEach((item) => {\n      const row = columns.map((column) => item[column] ?? \"\")\n      table.addRow(row)\n    })\n\n    return table\n  }\n}\n","import cliProgress from \"cli-progress\"\nimport chalk from \"chalk\"\nimport type { IProgressBar } from \"@pixielity/ts-types\"\nimport type { IProgressBarFormat } from \"@pixielity/ts-types\"\nimport { injectable } from \"inversify\"\n\n/**\n * Progress bar utility class\n *\n * Provides methods for displaying progress bars in the console.\n */\n@injectable()\nexport class ProgressBar implements IProgressBar {\n  /**\n   * The progress bar instance\n   * @private\n   */\n  private bar: cliProgress.SingleBar\n\n  /**\n   * Creates a new ProgressBar instance\n   *\n   * @param {number} total - The total value\n   * @param {IProgressBarFormat} format - The format options\n   */\n  constructor(total = 100, format?: IProgressBarFormat) {\n    this.bar = new cliProgress.SingleBar({\n      format: format?.format || `${chalk.cyan(\"{bar}\")} {percentage}% | ETA: {eta}s | {value}/{total}`,\n      barCompleteChar: format?.barCompleteChar || \"\\u2588\",\n      barIncompleteChar: format?.barIncompleteChar || \"\\u2591\",\n    })\n\n    this.bar.start(total, 0)\n  }\n\n  /**\n   * Updates the progress bar\n   *\n   * @param {number} value - The current value\n   * @param {Record<string, any>} payload - Additional payload data\n   */\n  public update(value: number, payload?: Record<string, any>): void {\n    this.bar.update(value, payload)\n  }\n\n  /**\n   * Increments the progress bar\n   *\n   * @param {number} value - The value to increment by\n   * @param {Record<string, any>} payload - Additional payload data\n   */\n  public increment(value = 1, payload?: Record<string, any>): void {\n    this.bar.increment(value, payload)\n  }\n\n  /**\n   * Stops the progress bar\n   */\n  public stop(): void {\n    this.bar.stop()\n  }\n\n  /**\n   * Creates a multi-bar container\n   *\n   * @returns {cliProgress.MultiBar} The multi-bar container\n   */\n  public static createMultiBar(): cliProgress.MultiBar {\n    return new cliProgress.MultiBar({\n      format: `${chalk.cyan(\"{bar}\")} {percentage}% | ETA: {eta}s | {value}/{total}`,\n      barCompleteChar: \"\\u2588\",\n      barIncompleteChar: \"\\u2591\",\n    })\n  }\n}\n","import chalk from 'chalk'\nimport { QuestionType } from '@pixielity/ts-types'\n\nimport { BaseCommand } from '../command/base-command'\nimport { Command } from '../decorators/command.decorator'\nimport { Option } from '../decorators/option.decorator'\n\nimport { Ask } from '../ui/ask'\nimport { TableOutput } from '../ui/table'\nimport { ProgressBar } from '../ui/progress-bar'\n\n/**\n * DemoCommand implementation\n *\n * Demonstrates UI features.\n */\n@Command({\n  name: 'demo',\n  description: 'Demonstrate UI features',\n  shortcuts: [\n    {\n      flag: '-d',\n      description: 'Demonstrate UI features',\n    },\n  ],\n})\nexport class DemoCommand extends BaseCommand {\n  /**\n   * The feature option\n   */\n  @Option({\n    flags: '-f, --feature <feature>',\n    description: 'The feature to demonstrate (ask, table, progress)',\n  })\n  private feature!: string\n\n  /**\n   * Executes the command\n   *\n   * @returns {Promise<number>} The exit code\n   */\n  public async execute(): Promise<number> {\n    try {\n      const feature = (this.input.getOption('feature') as string) || this.feature\n\n      if (!feature) {\n        // If no feature specified, ask for it\n        const selectedFeature = await Ask.select('Which feature would you like to see?', [\n          { name: 'Interactive prompts', value: 'ask' },\n          { name: 'Tables', value: 'table' },\n          { name: 'Progress bars', value: 'progress' },\n          { name: 'All features', value: 'all' },\n        ])\n\n        if (selectedFeature === 'all') {\n          await this.demoAsk()\n          await this.demoTable()\n          await this.demoProgress()\n        } else if (selectedFeature === 'ask') {\n          await this.demoAsk()\n        } else if (selectedFeature === 'table') {\n          await this.demoTable()\n        } else if (selectedFeature === 'progress') {\n          await this.demoProgress()\n        }\n      } else {\n        if (feature === 'ask') {\n          await this.demoAsk()\n        } else if (feature === 'table') {\n          await this.demoTable()\n        } else if (feature === 'progress') {\n          await this.demoProgress()\n        } else {\n          this.error(`Unknown feature: ${feature}`)\n          return BaseCommand.FAILURE\n        }\n      }\n\n      return BaseCommand.SUCCESS\n    } catch (error) {\n      this.error(`An error occurred: ${error instanceof Error ? error.message : String(error)}`)\n      return BaseCommand.FAILURE\n    }\n  }\n\n  /**\n   * Demonstrates the Ask utility\n   *\n   * @private\n   */\n  private async demoAsk(): Promise<void> {\n    this.info('Demonstrating interactive prompts...')\n\n    const name = await Ask.input(\"What's your name?\")\n    const age = await Ask.question({\n      type: QuestionType.Number,\n      name: 'age',\n      message: 'How old are you?',\n      validate: (input) => {\n        if (isNaN(input) || input < 0) {\n          return 'Please enter a valid age'\n        }\n        return true\n      },\n    })\n\n    const likesCli = await Ask.confirm('Do you like CLI tools?')\n\n    const favoriteColor = await Ask.select(\"What's your favorite color?\", [\n      'Red',\n      'Green',\n      'Blue',\n      'Yellow',\n      'Other',\n    ])\n\n    const languages = await Ask.multiSelect('Which programming languages do you know?', [\n      'JavaScript',\n      'TypeScript',\n      'PHP',\n      'Python',\n      'Ruby',\n      'Go',\n      'Java',\n      'C#',\n    ])\n\n    this.line()\n    this.success('Survey complete!')\n    this.line()\n    this.line(`Name: ${chalk.cyan(name)}`)\n    this.line(`Age: ${chalk.cyan(age)}`)\n    this.line(`Likes CLI: ${likesCli ? chalk.green('Yes') : chalk.red('No')}`)\n    this.line(`Favorite color: ${chalk.cyan(favoriteColor)}`)\n    this.line(`Languages: ${languages.map((l) => chalk.cyan(l)).join(', ')}`)\n    this.line()\n  }\n\n  /**\n   * Demonstrates the TableOutput utility\n   *\n   * @private\n   */\n  private async demoTable(): Promise<void> {\n    this.info('Demonstrating tables...')\n\n    // Simple table\n    const table = new TableOutput(['ID', 'Name', 'Email', 'Role'])\n\n    table.addRows([\n      [1, 'John Doe', 'john@example.com', 'Admin'],\n      [2, 'Jane Smith', 'jane@example.com', 'User'],\n      [3, 'Bob Johnson', 'bob@example.com', 'Editor'],\n    ])\n\n    this.line()\n    table.render()\n    this.line()\n\n    // Table from objects\n    const users = [\n      { id: 1, name: 'John Doe', email: 'john@example.com', role: 'Admin', active: true },\n      { id: 2, name: 'Jane Smith', email: 'jane@example.com', role: 'User', active: false },\n      { id: 3, name: 'Bob Johnson', email: 'bob@example.com', role: 'Editor', active: true },\n    ]\n\n    const objectTable = TableOutput.fromObjects(users, ['id', 'name', 'email', 'role'], {\n      style: {\n        head: ['cyan'],\n        border: ['gray'],\n      },\n    })\n\n    this.line()\n    objectTable.render()\n    this.line()\n  }\n\n  /**\n   * Demonstrates the ProgressBar utility\n   *\n   * @private\n   */\n  private async demoProgress(): Promise<void> {\n    this.info('Demonstrating progress bars...')\n\n    // Simple progress bar\n    const total = 100\n    const bar = new ProgressBar(total)\n\n    for (let i = 0; i <= total; i++) {\n      bar.update(i)\n      await this.sleep(20)\n    }\n\n    bar.stop()\n    this.line()\n\n    // Multi-bar\n    this.info('Demonstrating multiple progress bars...')\n\n    const multiBar = ProgressBar.createMultiBar()\n\n    const bar1 = multiBar.create(100, 0, { task: 'Task 1' })\n    const bar2 = multiBar.create(100, 0, { task: 'Task 2' })\n    const bar3 = multiBar.create(100, 0, { task: 'Task 3' })\n\n    for (let i = 0; i <= 100; i++) {\n      bar1.update(i, { task: 'Task 1' })\n\n      if (i >= 30) {\n        bar2.update(Math.min(Math.floor((i - 30) * 1.5), 100), { task: 'Task 2' })\n      }\n\n      if (i >= 60) {\n        bar3.update(Math.min(Math.floor((i - 60) * 2.5), 100), { task: 'Task 3' })\n      }\n\n      await this.sleep(30)\n    }\n\n    multiBar.stop()\n    this.line()\n\n    this.success('Progress bar demonstration complete!')\n  }\n\n  /**\n   * Sleeps for the specified number of milliseconds\n   *\n   * @param {number} ms - The number of milliseconds to sleep\n   * @returns {Promise<void>} A promise that resolves after the specified time\n   * @private\n   */\n  private sleep(ms: number): Promise<void> {\n    return new Promise((resolve) => setTimeout(resolve, ms))\n  }\n}\n"]}