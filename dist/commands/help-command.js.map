{"version":3,"sources":["../../src/input/input.ts","../../src/output/output.ts","../../src/decorators/argument.decorator.ts","../../src/di/container.ts","../../src/decorators/command.decorator.ts","../../src/decorators/option.decorator.ts","../../src/command/base-command.ts","../../src/commands/help-command.ts"],"names":["chalk","Container","injectable","ICommand","HelpCommand","inject","ICommandRegistry"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAOO,IAAM,QAAN,MAA8B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAwBnC,YAAY,IAAgB,EAAA;AAb5B;AAAA;AAAA;AAAA;AAAA,IAAA,IAAA,CAAQ,OAA+B,EAAC;AAMxC;AAAA;AAAA;AAAA;AAAA,IAAA,IAAA,CAAQ,OAAyC,EAAC;AAQhD,IAAA,IAAA,CAAK,MAAM,IAAI,CAAA;AAAA;AACjB;AAAA;AAAA;AAAA;AAAA;AAAA,EAOO,cAAqC,GAAA;AAC1C,IAAA,OAAO,IAAK,CAAA,WAAA;AAAA;AACd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQO,YAAY,IAAkC,EAAA;AACnD,IAAO,OAAA,IAAA,CAAK,KAAK,IAAI,CAAA;AAAA;AACvB;AAAA;AAAA;AAAA;AAAA;AAAA,EAOO,YAAuC,GAAA;AAC5C,IAAO,OAAA,EAAE,GAAG,IAAA,CAAK,IAAK,EAAA;AAAA;AACxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQO,UAAU,IAA4C,EAAA;AAC3D,IAAO,OAAA,IAAA,CAAK,KAAK,IAAI,CAAA;AAAA;AACvB;AAAA;AAAA;AAAA;AAAA;AAAA,EAOO,UAA+C,GAAA;AACpD,IAAO,OAAA,EAAE,GAAG,IAAA,CAAK,IAAK,EAAA;AAAA;AACxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQO,UAAU,IAAuB,EAAA;AACtC,IAAA,OAAO,QAAQ,IAAK,CAAA,IAAA;AAAA;AACtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQQ,MAAM,IAAsB,EAAA;AAClC,IAAI,IAAA,IAAA,CAAK,WAAW,CAAG,EAAA;AACrB,MAAA;AAAA;AAIF,IAAK,IAAA,CAAA,WAAA,GAAc,KAAK,CAAC,CAAA;AAEzB,IAAA,IAAI,CAAI,GAAA,CAAA;AACR,IAAA,IAAI,cAAiB,GAAA,CAAA;AAErB,IAAO,OAAA,CAAA,GAAI,KAAK,MAAQ,EAAA;AACtB,MAAM,MAAA,GAAA,GAAM,KAAK,CAAC,CAAA;AAGlB,MAAI,IAAA,GAAA,CAAI,UAAW,CAAA,IAAI,CAAG,EAAA;AACxB,QAAM,MAAA,OAAA,GAAU,GAAI,CAAA,SAAA,CAAU,CAAC,CAAA;AAG/B,QAAI,IAAA,OAAA,CAAQ,QAAS,CAAA,GAAG,CAAG,EAAA;AACzB,UAAA,MAAM,CAAC,IAAM,EAAA,KAAK,IAAI,OAAQ,CAAA,KAAA,CAAM,KAAK,CAAC,CAAA;AAC1C,UAAK,IAAA,CAAA,IAAA,CAAK,IAAI,CAAI,GAAA,KAAA;AAAA,SACb,MAAA;AAEL,UAAI,IAAA,CAAA,GAAI,CAAI,GAAA,IAAA,CAAK,MAAU,IAAA,CAAC,IAAK,CAAA,CAAA,GAAI,CAAC,CAAA,CAAE,UAAW,CAAA,GAAG,CAAG,EAAA;AACvD,YAAA,IAAA,CAAK,IAAK,CAAA,OAAO,CAAI,GAAA,IAAA,CAAK,IAAI,CAAC,CAAA;AAC/B,YAAA,CAAA,EAAA;AAAA,WACK,MAAA;AACL,YAAK,IAAA,CAAA,IAAA,CAAK,OAAO,CAAI,GAAA,IAAA;AAAA;AACvB;AACF,OACS,MAAA,IAAA,GAAA,CAAI,UAAW,CAAA,GAAG,CAAG,EAAA;AAC9B,QAAM,MAAA,OAAA,GAAU,GAAI,CAAA,SAAA,CAAU,CAAC,CAAA;AAG/B,QAAI,IAAA,OAAA,CAAQ,QAAS,CAAA,GAAG,CAAG,EAAA;AACzB,UAAA,MAAM,CAAC,IAAM,EAAA,KAAK,IAAI,OAAQ,CAAA,KAAA,CAAM,KAAK,CAAC,CAAA;AAC1C,UAAK,IAAA,CAAA,IAAA,CAAK,IAAI,CAAI,GAAA,KAAA;AAAA,SACb,MAAA;AAEL,UAAI,IAAA,CAAA,GAAI,CAAI,GAAA,IAAA,CAAK,MAAU,IAAA,CAAC,IAAK,CAAA,CAAA,GAAI,CAAC,CAAA,CAAE,UAAW,CAAA,GAAG,CAAG,EAAA;AACvD,YAAA,IAAA,CAAK,IAAK,CAAA,OAAO,CAAI,GAAA,IAAA,CAAK,IAAI,CAAC,CAAA;AAC/B,YAAA,CAAA,EAAA;AAAA,WACK,MAAA;AACL,YAAK,IAAA,CAAA,IAAA,CAAK,OAAO,CAAI,GAAA,IAAA;AAAA;AACvB;AACF,OACK,MAAA;AAEL,QAAA,IAAA,CAAK,IAAK,CAAA,cAAA,CAAe,QAAS,EAAC,CAAI,GAAA,GAAA;AACvC,QAAA,cAAA,EAAA;AAAA;AAGF,MAAA,CAAA,EAAA;AAAA;AACF;AAEJ,CAAA;AClJO,IAAM,SAAN,MAAgC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAM9B,MAAM,OAAuB,EAAA;AAClC,IAAQ,OAAA,CAAA,MAAA,CAAO,MAAM,OAAO,CAAA;AAAA;AAC9B;AAAA;AAAA;AAAA;AAAA;AAAA,EAOO,QAAQ,OAAuB,EAAA;AACpC,IAAA,OAAA,CAAQ,IAAI,OAAO,CAAA;AAAA;AACrB;AAAA;AAAA;AAAA;AAAA;AAAA,EAOO,MAAM,OAAuB,EAAA;AAClC,IAAA,OAAA,CAAQ,MAAMA,uBAAM,CAAA,IAAA,CAAK,IAAI,OAAO,CAAA,GAAI,OAAO,OAAO,CAAA;AAAA;AACxD;AAAA;AAAA;AAAA;AAAA;AAAA,EAOO,QAAQ,OAAuB,EAAA;AACpC,IAAA,OAAA,CAAQ,IAAIA,uBAAM,CAAA,IAAA,CAAK,MAAM,SAAS,CAAA,GAAI,OAAO,OAAO,CAAA;AAAA;AAC1D;AAAA;AAAA;AAAA;AAAA;AAAA,EAOO,KAAK,OAAuB,EAAA;AACjC,IAAA,OAAA,CAAQ,IAAIA,uBAAM,CAAA,IAAA,CAAK,KAAK,MAAM,CAAA,GAAI,OAAO,OAAO,CAAA;AAAA;AACtD;AAAA;AAAA;AAAA;AAAA;AAAA,EAOO,QAAQ,OAAuB,EAAA;AACpC,IAAA,OAAA,CAAQ,IAAIA,uBAAM,CAAA,IAAA,CAAK,OAAO,SAAS,CAAA,GAAI,OAAO,OAAO,CAAA;AAAA;AAC3D;AAAA;AAAA;AAAA;AAAA;AAAA,EAOO,QAAQ,OAAuB,EAAA;AACpC,IAAA,OAAA,CAAQ,GAAI,CAAAA,uBAAA,CAAM,IAAK,CAAA,KAAA,GAAQ,OAAO,CAAC,CAAA;AAAA;AAE3C,CAAA;AClEO,IAAM,qBAAA,GAAwB,OAAO,UAAU,CAAA;ACCtD,IAAM,SAAA,GAAY,IAAIC,mBAAU,CAAA;AAAA,EAC9B,YAAc,EAAA;AAChB,CAAC,CAAA;;;ACCM,IAAM,oBAAA,GAAuB,OAAO,SAAS,CAAA;AAU7C,SAAS,QAAQ,OAA0C,EAAA;AAChE,EAAA,OAAO,CAAC,MAA2B,KAAA;AApBrC,IAAA,IAAA,EAAA,EAAA,EAAA;AAsBI,IAAA,MAAM,cAAiB,GAAA;AAAA,MACrB,GAAG,OAAA;AAAA,MACH,MAAA,EAAA,CAAQ,EAAQ,GAAA,OAAA,CAAA,MAAA,KAAR,IAAkB,GAAA,EAAA,GAAA,KAAA;AAAA,MAC1B,UAAA,EAAA,CAAY,EAAQ,GAAA,OAAA,CAAA,UAAA,KAAR,IAAsB,GAAA,EAAA,GAAA,IAAA;AAAA,MAClC,WAAA,EAAa,QAAQ,WAAe,IAAA,EAAA;AAAA,MACpC,SAAA,EAAW,OAAQ,CAAA,SAAA,IAAa;AAAC,KACnC;AAGA,IAAQ,OAAA,CAAA,cAAA,CAAe,oBAAsB,EAAA,cAAA,EAAgB,MAAM,CAAA;AAGnE,IAAA,IAAI,eAAe,UAAY,EAAA;AAC7B,MAAAC,oBAAA,GAAa,MAAM,CAAA;AAInB,MAAI,IAAA;AACF,QAAA,SAAA,CACG,KAAKC,gBAAS,CAAA,CAAC,EACf,EAAG,CAAA,MAAa,EAChB,gBAAiB,EAAA;AAAA,eACb,KAAO,EAAA;AAAA;AAGhB;AACF,GACF;AACF;AC7CO,IAAM,mBAAA,GAAsB,OAAO,QAAQ,CAAA;;;ACQ3C,IAAe,cAAf,MAA+C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EA6CpD,WAAA,CAAY,IAAe,EAAA,WAAA,GAAc,EAAI,EAAA;AAC3C,IAAA,MAAM,QAAW,GAAA,OAAA,CAAQ,WAAY,CAAA,oBAAA,EAAsB,KAAK,WAAW,CAAA;AAE3E,IAAI,IAAA,CAAC,IAAQ,KAAA,QAAA,IAAA,IAAA,GAAA,MAAA,GAAA,QAAA,CAAU,IAAM,CAAA,EAAA;AAC3B,MAAA,IAAA,CAAK,OAAO,QAAS,CAAA,IAAA;AACrB,MAAK,IAAA,CAAA,WAAA,GAAc,WAAe,IAAA,QAAA,CAAS,WAAe,IAAA,EAAA;AAAA,eACjD,IAAM,EAAA;AACf,MAAA,IAAA,CAAK,IAAO,GAAA,IAAA;AACZ,MAAA,IAAA,CAAK,WAAc,GAAA,WAAA;AAAA,KACd,MAAA;AACL,MAAM,MAAA,IAAI,MAAM,CAA6E,2EAAA,CAAA,CAAA;AAAA;AAG/F,IAAA,IAAA,CAAK,KAAQ,GAAA,IAAI,KAAM,CAAA,EAAE,CAAA;AACzB,IAAK,IAAA,CAAA,MAAA,GAAS,IAAI,MAAO,EAAA;AAAA;AAC3B;AAAA;AAAA;AAAA;AAAA;AAAA,EAOO,OAAkB,GAAA;AACvB,IAAA,OAAO,IAAK,CAAA,IAAA;AAAA;AACd;AAAA;AAAA;AAAA;AAAA;AAAA,EAOO,cAAyB,GAAA;AAC9B,IAAA,OAAO,IAAK,CAAA,WAAA;AAAA;AACd;AAAA;AAAA;AAAA;AAAA;AAAA,EAOO,SAAS,KAAqB,EAAA;AACnC,IAAA,IAAA,CAAK,KAAQ,GAAA,KAAA;AAAA;AACf;AAAA;AAAA;AAAA;AAAA;AAAA,EAOO,QAAmB,GAAA;AACxB,IAAA,OAAO,IAAK,CAAA,KAAA;AAAA;AACd;AAAA;AAAA;AAAA;AAAA;AAAA,EAOO,UAAU,MAAuB,EAAA;AACtC,IAAA,IAAA,CAAK,MAAS,GAAA,MAAA;AAAA;AAChB;AAAA;AAAA;AAAA;AAAA;AAAA,EAOO,SAAqB,GAAA;AAC1B,IAAA,OAAO,IAAK,CAAA,MAAA;AAAA;AACd;AAAA;AAAA;AAAA;AAAA;AAAA,EAOO,aAAa,IAAsB,EAAA;AACxC,IAAK,IAAA,CAAA,OAAA,CAAQ,CAAC,GAAA,EAAK,KAAU,KAAA;AAC1B,MAAC,KAAK,KAAc,CAAA,IAAA,CAAK,KAAM,CAAA,QAAA,EAAU,CAAI,GAAA,GAAA;AAAA,KAC/C,CAAA;AAAA;AACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQO,WAAA,CAAY,KAAa,KAAkB,EAAA;AAC/C,IAAC,IAAK,CAAA,KAAA,CAAc,IAAK,CAAA,GAAG,CAAI,GAAA,KAAA;AAAA;AACnC;AAAA;AAAA;AAAA;AAAA;AAAA,EAOO,YAAoC,GAAA;AACzC,IAAQ,OAAA,IAAA,CAAK,KAAc,CAAA,IAAA,IAAQ,EAAC;AAAA;AACtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQO,YAAY,GAAkB,EAAA;AArKvC,IAAA,IAAA,EAAA;AAsKI,IAAQ,OAAA,CAAA,EAAA,GAAA,IAAA,CAAK,KAAc,CAAA,IAAA,KAAnB,IAA0B,GAAA,MAAA,GAAA,EAAA,CAAA,GAAA,CAAA;AAAA;AACpC;AAAA;AAAA;AAAA;AAAA;AAAA,EAOO,WAAW,OAAoC,EAAA;AACpD,IAAO,MAAA,CAAA,OAAA,CAAQ,OAAO,CAAE,CAAA,OAAA,CAAQ,CAAC,CAAC,GAAA,EAAK,KAAK,CAAM,KAAA;AAC/C,MAAC,IAAK,CAAA,KAAA,CAAc,IAAK,CAAA,GAAG,CAAI,GAAA,KAAA;AAAA,KAClC,CAAA;AAAA;AACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQO,SAAA,CAAU,KAAa,KAAkB,EAAA;AAC7C,IAAC,IAAK,CAAA,KAAA,CAAc,IAAK,CAAA,GAAG,CAAI,GAAA,KAAA;AAAA;AACnC;AAAA;AAAA;AAAA;AAAA;AAAA,EAOO,UAAkC,GAAA;AACvC,IAAQ,OAAA,IAAA,CAAK,KAAc,CAAA,IAAA,IAAQ,EAAC;AAAA;AACtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQO,UAAU,GAAkB,EAAA;AA7MrC,IAAA,IAAA,EAAA;AA8MI,IAAQ,OAAA,CAAA,EAAA,GAAA,IAAA,CAAK,KAAc,CAAA,IAAA,KAAnB,IAA0B,GAAA,MAAA,GAAA,EAAA,CAAA,GAAA,CAAA;AAAA;AACpC;AAAA;AAAA;AAAA;AAAA;AAAA,EAOO,SAAkB,GAAA;AAAA;AAEzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAkBA,MAAa,aAAkC,GAAA;AAC7C,IAAO,OAAA,IAAA;AAAA;AACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,MAAa,aAAa,QAAwC,EAAA;AAAA;AAElE;AAAA;AAAA;AAAA;AAAA;AAAA,EAOU,IAAA,CAAK,UAAU,EAAU,EAAA;AACjC,IAAK,IAAA,CAAA,MAAA,CAAO,QAAQ,OAAO,CAAA;AAAA;AAC7B;AAAA;AAAA;AAAA;AAAA;AAAA,EAOU,KAAK,OAAuB,EAAA;AACpC,IAAK,IAAA,CAAA,MAAA,CAAO,KAAK,OAAO,CAAA;AAAA;AAC1B;AAAA;AAAA;AAAA;AAAA;AAAA,EAOU,QAAQ,OAAuB,EAAA;AACvC,IAAK,IAAA,CAAA,MAAA,CAAO,QAAQ,OAAO,CAAA;AAAA;AAC7B;AAAA;AAAA;AAAA;AAAA;AAAA,EAOU,MAAM,OAAuB,EAAA;AACrC,IAAK,IAAA,CAAA,MAAA,CAAO,MAAM,OAAO,CAAA;AAAA;AAC3B;AAAA;AAAA;AAAA;AAAA;AAAA,EAOU,QAAQ,OAAuB,EAAA;AACvC,IAAK,IAAA,CAAA,MAAA,CAAO,QAAQ,OAAO,CAAA;AAAA;AAC7B;AAAA;AAAA;AAAA;AAAA;AAAA,EAOU,QAAQ,OAAuB,EAAA;AACvC,IAAK,IAAA,CAAA,MAAA,CAAO,QAAQ,OAAO,CAAA;AAAA;AAE/B,CAAA;AAAA;AAAA;AAAA;AAjSsB,WAAA,CAIG,OAAU,GAAA,CAAA;AAAA;AAAA;AAAA;AAJb,WAAA,CASG,OAAU,GAAA,CAAA;AAAA;AAAA;AAAA;AATb,WAAA,CAcG,OAAU,GAAA,CAAA;;;ACAtBC,mBAAA,GAAN,0BAA0B,WAAY,CAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAY3C,YAAwC,QAA4B,EAAA;AAClE,IAAA,KAAA,CAAM,QAAQ,4BAA4B,CAAA;AAC1C,IAAA,IAAA,CAAK,QAAW,GAAA,QAAA;AAAA;AAClB;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAa,OAA2B,GAAA;AACtC,IAAI,IAAA;AACF,MAAA,MAAM,WAAc,GAAA,IAAA,CAAK,KAAM,CAAA,WAAA,CAAY,GAAG,CAAA;AAE9C,MAAA,IAAI,CAAC,WAAa,EAAA;AAChB,QAAA,IAAA,CAAK,MAAM,2BAA2B,CAAA;AACtC,QAAA,IAAA,CAAK,KAAK,EAAE,CAAA;AACZ,QAAA,IAAA,CAAK,KAAK,uBAAuB,CAAA;AACjC,QAAA,OAAO,WAAY,CAAA,OAAA;AAAA;AAGrB,MAAA,MAAM,OAAU,GAAA,IAAA,CAAK,QAAS,CAAA,GAAA,CAAI,WAAW,CAAA;AAE7C,MAAA,IAAI,CAAC,OAAS,EAAA;AACZ,QAAK,IAAA,CAAA,KAAA,CAAM,CAAY,SAAA,EAAA,WAAW,CAAc,YAAA,CAAA,CAAA;AAChD,QAAA,OAAO,WAAY,CAAA,OAAA;AAAA;AAIrB,MAAA,MAAM,WAAW,OAAQ,CAAA,WAAA,CAAY,sBAAsB,OAAQ,CAAA,WAAW,KAAK,EAAC;AAEpF,MAAA,IAAA,CAAK,IAAKJ,CAAAA,uBAAAA,CAAM,IAAK,CAAA,CAAA,EAAG,OAAQ,CAAA,OAAA,EAAS,CAAA,EAAA,EAAK,OAAQ,CAAA,cAAA,EAAgB,CAAA,CAAE,CAAC,CAAA;AACzE,MAAA,IAAA,CAAK,KAAK,EAAE,CAAA;AAGZ,MAAA,IAAI,QAAS,CAAA,OAAA,IAAW,QAAS,CAAA,OAAA,CAAQ,SAAS,CAAG,EAAA;AACnD,QAAA,IAAA,CAAK,IAAKA,CAAAA,uBAAAA,CAAM,IAAK,CAAA,UAAU,CAAC,CAAA;AAChC,QAAS,QAAA,CAAA,OAAA,CAAQ,OAAQ,CAAA,CAAC,KAAkB,KAAA;AAC1C,UAAA,IAAA,CAAK,KAAK,CAAKA,EAAAA,EAAAA,uBAAAA,CAAM,MAAO,CAAA,KAAK,CAAC,CAAE,CAAA,CAAA;AAAA,SACrC,CAAA;AACD,QAAA,IAAA,CAAK,KAAK,EAAE,CAAA;AAAA;AAId,MAAA,IAAI,QAAS,CAAA,SAAA,IAAa,QAAS,CAAA,SAAA,CAAU,SAAS,CAAG,EAAA;AACvD,QAAA,IAAA,CAAK,IAAKA,CAAAA,uBAAAA,CAAM,IAAK,CAAA,YAAY,CAAC,CAAA;AAClC,QAAS,QAAA,CAAA,SAAA,CAAU,OAAQ,CAAA,CAAC,QAAkB,KAAA;AAC5C,UAAK,IAAA,CAAA,IAAA,CAAK,CAAKA,EAAAA,EAAAA,uBAAAA,CAAM,OAAQ,CAAA,QAAA,CAAS,IAAI,CAAC,CAAA,EAAA,EAAK,QAAS,CAAA,WAAW,CAAE,CAAA,CAAA;AAAA,SACvE,CAAA;AACD,QAAA,IAAA,CAAK,KAAK,EAAE,CAAA;AAAA;AAId,MAAA,MAAM,oBACJ,OAAQ,CAAA,WAAA,CAAY,uBAAuB,OAAQ,CAAA,WAAW,KAAK,EAAC;AACtE,MAAI,IAAA,iBAAA,CAAkB,SAAS,CAAG,EAAA;AAChC,QAAA,IAAA,CAAK,IAAKA,CAAAA,uBAAAA,CAAM,IAAK,CAAA,YAAY,CAAC,CAAA;AAClC,QAAkB,iBAAA,CAAA,OAAA,CAAQ,CAAC,GAAa,KAAA;AACtC,UAAK,IAAA,CAAA,IAAA,CAAK,CAAKA,EAAAA,EAAAA,uBAAAA,CAAM,KAAM,CAAA,GAAA,CAAI,IAAI,CAAC,CAAK,EAAA,EAAA,GAAA,CAAI,WAAe,IAAA,gBAAgB,CAAE,CAAA,CAAA;AAAA,SAC/E,CAAA;AACD,QAAA,IAAA,CAAK,KAAK,EAAE,CAAA;AAAA;AAId,MAAA,MAAM,kBAAkB,OAAQ,CAAA,WAAA,CAAY,qBAAqB,OAAQ,CAAA,WAAW,KAAK,EAAC;AAC1F,MAAI,IAAA,eAAA,CAAgB,SAAS,CAAG,EAAA;AAC9B,QAAA,IAAA,CAAK,IAAKA,CAAAA,uBAAAA,CAAM,IAAK,CAAA,UAAU,CAAC,CAAA;AAChC,QAAgB,eAAA,CAAA,OAAA,CAAQ,CAAC,GAAa,KAAA;AACpC,UAAK,IAAA,CAAA,IAAA,CAAK,CAAKA,EAAAA,EAAAA,uBAAAA,CAAM,KAAM,CAAA,GAAA,CAAI,KAAK,CAAC,CAAK,EAAA,EAAA,GAAA,CAAI,WAAe,IAAA,gBAAgB,CAAE,CAAA,CAAA;AAAA,SAChF,CAAA;AACD,QAAA,IAAA,CAAK,KAAK,EAAE,CAAA;AAAA;AAGd,MAAA,OAAO,WAAY,CAAA,OAAA;AAAA,aACZ,KAAO,EAAA;AACd,MAAK,IAAA,CAAA,KAAA,CAAM,sBAAsB,KAAiB,YAAA,KAAA,GAAQ,MAAM,OAAU,GAAA,MAAA,CAAO,KAAK,CAAC,CAAE,CAAA,CAAA;AACzF,MAAA,OAAO,WAAY,CAAA,OAAA;AAAA;AACrB;AAEJ;AA3FaI,mBAAN,GAAA,eAAA,CAAA;AAAA,EAVN,OAAQ,CAAA;AAAA,IACP,IAAM,EAAA,MAAA;AAAA,IACN,WAAa,EAAA,4BAAA;AAAA,IACb,SAAW,EAAA;AAAA,MACT;AAAA,QACE,IAAM,EAAA,0BAAA;AAAA,QACN,WAAa,EAAA;AAAA;AACf;AACF,GACD,CAAA;AAAA,EAac,eAAA,CAAA,CAAA,EAAAC,gBAAA,CAAOC,yBAAiB,CAAC,CAAA;AAAA,CAZ3B,EAAAF,mBAAA,CAAA","file":"help-command.js","sourcesContent":["import type { IInput } from '@pixielity/ts-types'\n\n/**\n * Implementation of the IInput interface\n *\n * Parses command line arguments and provides access to them.\n */\nexport class Input implements IInput {\n  /**\n   * The command name\n   * @private\n   */\n  private commandName?: string\n\n  /**\n   * Map of argument names to values\n   * @private\n   */\n  private args: Record<string, string> = {}\n\n  /**\n   * Map of option names to values\n   * @private\n   */\n  private opts: Record<string, string | boolean> = {}\n\n  /**\n   * Creates a new Input instance\n   *\n   * @param {string[]} argv - The command line arguments\n   */\n  constructor(argv: string[]) {\n    this.parse(argv)\n  }\n\n  /**\n   * Gets the command name from the input\n   *\n   * @returns {string | undefined} The command name or undefined if not provided\n   */\n  public getCommandName(): string | undefined {\n    return this.commandName\n  }\n\n  /**\n   * Gets an argument value by name\n   *\n   * @param {string} name - The name of the argument\n   * @returns {string | undefined} The argument value or undefined if not provided\n   */\n  public getArgument(name: string): string | undefined {\n    return this.args[name]\n  }\n\n  /**\n   * Gets all arguments\n   *\n   * @returns {Record<string, string>} Map of argument names to values\n   */\n  public getArguments(): Record<string, string> {\n    return { ...this.args }\n  }\n\n  /**\n   * Gets an option value by name\n   *\n   * @param {string} name - The name of the option\n   * @returns {string | boolean | undefined} The option value or undefined if not provided\n   */\n  public getOption(name: string): string | boolean | undefined {\n    return this.opts[name]\n  }\n\n  /**\n   * Gets all options\n   *\n   * @returns {Record<string, string | boolean>} Map of option names to values\n   */\n  public getOptions(): Record<string, string | boolean> {\n    return { ...this.opts }\n  }\n\n  /**\n   * Checks if an option is set\n   *\n   * @param {string} name - The name of the option\n   * @returns {boolean} True if the option is set, false otherwise\n   */\n  public hasOption(name: string): boolean {\n    return name in this.opts\n  }\n\n  /**\n   * Parses the command line arguments\n   *\n   * @param {string[]} argv - The command line arguments\n   * @private\n   */\n  private parse(argv: string[]): void {\n    if (argv.length === 0) {\n      return\n    }\n\n    // First argument is the command name\n    this.commandName = argv[0]\n\n    let i = 1\n    let currentArgName = 0\n\n    while (i < argv.length) {\n      const arg = argv[i]\n\n      // Handle options (--option or -o)\n      if (arg.startsWith('--')) {\n        const optName = arg.substring(2)\n\n        // Handle --option=value\n        if (optName.includes('=')) {\n          const [name, value] = optName.split('=', 2)\n          this.opts[name] = value\n        } else {\n          // Handle --option value or --option (boolean flag)\n          if (i + 1 < argv.length && !argv[i + 1].startsWith('-')) {\n            this.opts[optName] = argv[i + 1]\n            i++\n          } else {\n            this.opts[optName] = true\n          }\n        }\n      } else if (arg.startsWith('-')) {\n        const optName = arg.substring(1)\n\n        // Handle -o=value\n        if (optName.includes('=')) {\n          const [name, value] = optName.split('=', 2)\n          this.opts[name] = value\n        } else {\n          // Handle -o value or -o (boolean flag)\n          if (i + 1 < argv.length && !argv[i + 1].startsWith('-')) {\n            this.opts[optName] = argv[i + 1]\n            i++\n          } else {\n            this.opts[optName] = true\n          }\n        }\n      } else {\n        // Handle positional arguments\n        this.args[currentArgName.toString()] = arg\n        currentArgName++\n      }\n\n      i++\n    }\n  }\n}\n","import chalk from 'chalk'\nimport type { IOutput } from '@pixielity/ts-types'\n\n/**\n * Implementation of the IOutput interface\n *\n * Provides methods for writing to the console with formatting using chalk.\n */\nexport class Output implements IOutput {\n  /**\n   * Writes a message to the output\n   *\n   * @param {string} message - The message to write\n   */\n  public write(message: string): void {\n    process.stdout.write(message)\n  }\n\n  /**\n   * Writes a message to the output followed by a newline\n   *\n   * @param {string} message - The message to write\n   */\n  public writeln(message: string): void {\n    console.log(message)\n  }\n\n  /**\n   * Writes an error message to the output\n   *\n   * @param {string} message - The error message to write\n   */\n  public error(message: string): void {\n    console.error(chalk.bold.red('ERROR') + ': ' + message)\n  }\n\n  /**\n   * Writes a success message to the output\n   *\n   * @param {string} message - The success message to write\n   */\n  public success(message: string): void {\n    console.log(chalk.bold.green('SUCCESS') + ': ' + message)\n  }\n\n  /**\n   * Writes an info message to the output\n   *\n   * @param {string} message - The info message to write\n   */\n  public info(message: string): void {\n    console.log(chalk.bold.blue('INFO') + ': ' + message)\n  }\n\n  /**\n   * Writes a warning message to the output\n   *\n   * @param {string} message - The warning message to write\n   */\n  public warning(message: string): void {\n    console.log(chalk.bold.yellow('WARNING') + ': ' + message)\n  }\n\n  /**\n   * Writes a comment message to the output\n   *\n   * @param {string} message - The comment message to write\n   */\n  public comment(message: string): void {\n    console.log(chalk.gray('// ' + message))\n  }\n}\n","import 'reflect-metadata'\n\n/**\n * Metadata key for arguments\n */\nexport const ARGUMENT_METADATA_KEY = Symbol('argument')\n\n/**\n * Argument options interface\n */\nexport interface ArgumentOptions {\n  /**\n   * The name of the argument\n   */\n  name: string\n\n  /**\n   * The description of the argument\n   */\n  description?: string\n\n  /**\n   * The default value of the argument\n   */\n  defaultValue?: any\n\n  /**\n   * Whether the argument is required\n   */\n  required?: boolean\n\n  /**\n   * Whether the argument is an array (variadic)\n   */\n  isArray?: boolean\n}\n\n/**\n * Argument decorator\n *\n * Defines a command argument\n *\n * @param {ArgumentOptions} options - The argument options\n * @returns {PropertyDecorator} The property decorator\n */\nexport function Argument(options: ArgumentOptions): PropertyDecorator {\n  return (target: Object, propertyKey: string | symbol) => {\n    // Format the argument name for Commander\n    // If it's required, don't add brackets\n    // If it's an array, add ellipsis\n    let name = options.name\n    if (!options.required) {\n      name = `[${name}]`\n    } else {\n      name = `<${name}>`\n    }\n\n    if (options.isArray) {\n      name = `${name}...`\n    }\n\n    const metadata = {\n      name,\n      description: options.description || '',\n      defaultValue: options.defaultValue,\n      propertyKey,\n    }\n\n    // Get existing metadata or initialize empty array\n    const existingMetadata = Reflect.getMetadata(ARGUMENT_METADATA_KEY, target.constructor) || []\n\n    // Add new metadata\n    existingMetadata.push(metadata)\n\n    // Update metadata\n    Reflect.defineMetadata(ARGUMENT_METADATA_KEY, existingMetadata, target.constructor)\n  }\n}\n","import { Container } from 'inversify'\nimport 'reflect-metadata'\n\n/**\n * The global Inversify container instance\n */\nconst container = new Container({\n  defaultScope: 'Singleton',\n})\n\nexport { container }\n","import 'reflect-metadata'\nimport { injectable } from 'inversify'\nimport { ICommand, ICommandOptions } from '@pixielity/ts-types'\n\nimport { container } from '../di/container'\n\n/**\n * Metadata key for command\n */\nexport const COMMAND_METADATA_KEY = Symbol('command')\n\n/**\n * Command decorator\n *\n * Marks a class as a console command and registers it with the container\n *\n * @param {CommandOptions} options - The command options\n * @returns {ClassDecorator} The class decorator\n */\nexport function Command(options: ICommandOptions): ClassDecorator {\n  return (target: Function): void => {\n    // Set default values for options\n    const commandOptions = {\n      ...options,\n      hidden: options.hidden ?? false,\n      injectable: options.injectable ?? true,\n      description: options.description || '',\n      shortcuts: options.shortcuts || [],\n    }\n\n    // Store command metadata with defaults applied\n    Reflect.defineMetadata(COMMAND_METADATA_KEY, commandOptions, target)\n\n    // Make the class injectable if not explicitly disabled\n    if (commandOptions.injectable) {\n      injectable()(target)\n\n      // Register the command with the container\n      // We use a multi-injection approach for commands\n      try {\n        container\n          .bind(ICommand.$)\n          .to(target as any)\n          .inSingletonScope()\n      } catch (error) {\n        // If the binding already exists, we can ignore the error\n        // This can happen during hot reloading\n      }\n    }\n  }\n}\n","import 'reflect-metadata'\n\n/**\n * Metadata key for options\n */\nexport const OPTION_METADATA_KEY = Symbol('option')\n\n/**\n * Option options interface\n */\nexport interface OptionOptions {\n  /**\n   * The flags for the option (e.g., \"-n, --name\")\n   */\n  flags: string\n\n  /**\n   * The description of the option\n   */\n  description?: string\n\n  /**\n   * The default value of the option\n   */\n  defaultValue?: any\n}\n\n/**\n * Option decorator\n *\n * Defines a command option\n *\n * @param {OptionOptions} options - The option options\n * @returns {PropertyDecorator} The property decorator\n */\nexport function Option(options: OptionOptions): PropertyDecorator {\n  return (target: Object, propertyKey: string | symbol) => {\n    const metadata = {\n      flags: options.flags,\n      description: options.description || '',\n      defaultValue: options.defaultValue,\n      propertyKey,\n    }\n\n    // Get existing metadata or initialize empty array\n    const existingMetadata = Reflect.getMetadata(OPTION_METADATA_KEY, target.constructor) || []\n\n    // Add new metadata\n    existingMetadata.push(metadata)\n\n    // Update metadata\n    Reflect.defineMetadata(OPTION_METADATA_KEY, existingMetadata, target.constructor)\n  }\n}\n","import type { ICommand } from '@pixielity/ts-types'\nimport type { IInput } from '@pixielity/ts-types'\nimport type { IOutput } from '@pixielity/ts-types'\nimport { Input } from '../input/input'\nimport { Output } from '../output/output'\nimport { COMMAND_METADATA_KEY } from '../decorators'\n\n/**\n * Abstract base class for console commands.\n *\n * Provides a consistent structure and common functionality for defining and executing\n * commands in the console. Supports Laravel/Symfony-inspired argument and option handling.\n */\nexport abstract class BaseCommand implements ICommand {\n  /**\n   * Exit code for successful execution.\n   */\n  public static readonly SUCCESS = 0\n\n  /**\n   * Exit code indicating a general failure.\n   */\n  public static readonly FAILURE = 1\n\n  /**\n   * Exit code for invalid user input.\n   */\n  public static readonly INVALID = 2\n\n  /**\n   * Name of the command.\n   * Defined in the constructor or through the `@Command` decorator metadata.\n   */\n  protected name: string\n\n  /**\n   * Description of the command.\n   * Shown in help output and can be set via constructor or metadata.\n   */\n  protected description: string\n\n  /**\n   * Input instance for handling command-line arguments and options.\n   */\n  protected input: IInput\n\n  /**\n   * Output instance for writing messages to the terminal.\n   */\n  protected output: IOutput\n\n  /**\n   * Creates a new instance of the BaseCommand.\n   *\n   * @param name - The name of the command (optional if using decorator)\n   * @param description - The description of the command\n   * @throws Will throw if name is missing and no decorator metadata is found.\n   */\n  constructor(name?: string, description = '') {\n    const metadata = Reflect.getMetadata(COMMAND_METADATA_KEY, this.constructor)\n\n    if (!name && metadata?.name) {\n      this.name = metadata.name\n      this.description = description || metadata.description || ''\n    } else if (name) {\n      this.name = name\n      this.description = description\n    } else {\n      throw new Error(`Command name is required. Provide it via constructor or @Command decorator.`)\n    }\n\n    this.input = new Input([])\n    this.output = new Output()\n  }\n\n  /**\n   * Returns the name of the command.\n   *\n   * @returns The command name.\n   */\n  public getName(): string {\n    return this.name\n  }\n\n  /**\n   * Returns the description of the command.\n   *\n   * @returns The command description.\n   */\n  public getDescription(): string {\n    return this.description\n  }\n\n  /**\n   * Sets the input instance used by this command.\n   *\n   * @param input - The input instance.\n   */\n  public setInput(input: IInput): void {\n    this.input = input\n  }\n\n  /**\n   * Retrieves the current input instance.\n   *\n   * @returns The input instance.\n   */\n  public getInput(): IInput {\n    return this.input\n  }\n\n  /**\n   * Sets the output instance used by this command.\n   *\n   * @param output - The output instance.\n   */\n  public setOutput(output: IOutput): void {\n    this.output = output\n  }\n\n  /**\n   * Retrieves the current output instance.\n   *\n   * @returns The output instance.\n   */\n  public getOutput(): IOutput {\n    return this.output\n  }\n\n  /**\n   * Sets multiple arguments for the command.\n   *\n   * @param args - Positional arguments as an array.\n   */\n  public setArguments(args: string[]): void {\n    args.forEach((arg, index) => {\n      ;(this.input as any).args[index.toString()] = arg\n    })\n  }\n\n  /**\n   * Sets a single named argument.\n   *\n   * @param key - The argument name.\n   * @param value - The argument value.\n   */\n  public setArgument(key: string, value: any): void {\n    ;(this.input as any).args[key] = value\n  }\n\n  /**\n   * Retrieves all arguments as a key-value object.\n   *\n   * @returns Object containing all arguments.\n   */\n  public getArguments(): Record<string, any> {\n    return (this.input as any).args || {}\n  }\n\n  /**\n   * Retrieves a single argument by name.\n   *\n   * @param key - The argument name.\n   * @returns The value of the argument or undefined if not found.\n   */\n  public getArgument(key: string): any {\n    return (this.input as any).args?.[key]\n  }\n\n  /**\n   * Sets multiple options for the command.\n   *\n   * @param options - Object of option keys and values.\n   */\n  public setOptions(options: Record<string, any>): void {\n    Object.entries(options).forEach(([key, value]) => {\n      ;(this.input as any).opts[key] = value\n    })\n  }\n\n  /**\n   * Sets a single named option.\n   *\n   * @param key - The option name.\n   * @param value - The option value.\n   */\n  public setOption(key: string, value: any): void {\n    ;(this.input as any).opts[key] = value\n  }\n\n  /**\n   * Retrieves all options as a key-value object.\n   *\n   * @returns Object containing all options.\n   */\n  public getOptions(): Record<string, any> {\n    return (this.input as any).opts || {}\n  }\n\n  /**\n   * Retrieves a single option by name.\n   *\n   * @param key - The option name.\n   * @returns The value of the option or undefined if not found.\n   */\n  public getOption(key: string): any {\n    return (this.input as any).opts?.[key]\n  }\n\n  /**\n   * Configures arguments and options.\n   *\n   * Should be overridden in the subclass to define expected inputs.\n   */\n  public configure(): void {\n    // To be implemented in subclasses\n  }\n\n  /**\n   * Abstract method that executes the command's logic.\n   *\n   * Must be implemented in the subclass.\n   *\n   * @returns Exit code or void.\n   */\n  public abstract execute(): Promise<number | void>\n\n  /**\n   * Lifecycle hook that runs before command execution.\n   *\n   * Override this method to add pre-execution checks or setup.\n   *\n   * @returns True if execution should proceed, false to abort.\n   */\n  public async beforeExecute(): Promise<boolean> {\n    return true\n  }\n\n  /**\n   * Lifecycle hook that runs after command execution.\n   *\n   * Override this method to add post-processing or cleanup.\n   *\n   * @param exitCode - The result of command execution.\n   */\n  public async afterExecute(exitCode: number | void): Promise<void> {\n    // Optional: post-execution logic\n  }\n\n  /**\n   * Writes a simple message line to output.\n   *\n   * @param message - The message to write.\n   */\n  protected line(message = ''): void {\n    this.output.writeln(message)\n  }\n\n  /**\n   * Writes an informational message to output.\n   *\n   * @param message - The message to write.\n   */\n  protected info(message: string): void {\n    this.output.info(message)\n  }\n\n  /**\n   * Writes a success message to output.\n   *\n   * @param message - The message to write.\n   */\n  protected success(message: string): void {\n    this.output.success(message)\n  }\n\n  /**\n   * Writes an error message to output.\n   *\n   * @param message - The message to write.\n   */\n  protected error(message: string): void {\n    this.output.error(message)\n  }\n\n  /**\n   * Writes a warning message to output.\n   *\n   * @param message - The message to write.\n   */\n  protected warning(message: string): void {\n    this.output.warning(message)\n  }\n\n  /**\n   * Writes a comment-style message to output.\n   *\n   * @param message - The message to write.\n   */\n  protected comment(message: string): void {\n    this.output.comment(message)\n  }\n}\n","import chalk from 'chalk'\nimport { inject } from 'inversify'\nimport { ICommandRegistry } from '@pixielity/ts-types'\n\nimport { BaseCommand } from '../command/base-command'\nimport {\n  ARGUMENT_METADATA_KEY,\n  Command,\n  COMMAND_METADATA_KEY,\n  OPTION_METADATA_KEY,\n} from '../decorators'\n\n/**\n * HelpCommand implementation\n *\n * Displays help information for a specific command.\n */\n@Command({\n  name: 'help',\n  description: 'Display help for a command',\n  shortcuts: [\n    {\n      flag: '-h, --help-cmd <command>',\n      description: 'Display help for a specific command',\n    },\n  ],\n})\nexport class HelpCommand extends BaseCommand {\n  /**\n   * The command registry\n   * @private\n   */\n  private registry: ICommandRegistry\n\n  /**\n   * Creates a new HelpCommand instance\n   *\n   * @param {ICommandRegistry} registry - The command registry\n   */\n  constructor(@inject(ICommandRegistry.$) registry: ICommandRegistry) {\n    super('help', 'Display help for a command')\n    this.registry = registry\n  }\n\n  /**\n   * Executes the command\n   *\n   * @returns {Promise<number>} The exit code\n   */\n  public async execute(): Promise<number> {\n    try {\n      const commandName = this.input.getArgument('0')\n\n      if (!commandName) {\n        this.error('Command name is required.')\n        this.line('')\n        this.line('Usage: help <command>')\n        return BaseCommand.INVALID\n      }\n\n      const command = this.registry.get(commandName)\n\n      if (!command) {\n        this.error(`Command \"${commandName}\" not found.`)\n        return BaseCommand.FAILURE\n      }\n\n      // Get command metadata\n      const metadata = Reflect.getMetadata(COMMAND_METADATA_KEY, command.constructor) || {}\n\n      this.line(chalk.bold(`${command.getName()}: ${command.getDescription()}`))\n      this.line('')\n\n      // Show aliases if available\n      if (metadata.aliases && metadata.aliases.length > 0) {\n        this.line(chalk.cyan('Aliases:'))\n        metadata.aliases.forEach((alias: string) => {\n          this.line(`  ${chalk.yellow(alias)}`)\n        })\n        this.line('')\n      }\n\n      // Show shortcuts if available\n      if (metadata.shortcuts && metadata.shortcuts.length > 0) {\n        this.line(chalk.cyan('Shortcuts:'))\n        metadata.shortcuts.forEach((shortcut: any) => {\n          this.line(`  ${chalk.magenta(shortcut.flag)}: ${shortcut.description}`)\n        })\n        this.line('')\n      }\n\n      // Show arguments if available\n      const argumentsMetadata =\n        Reflect.getMetadata(ARGUMENT_METADATA_KEY, command.constructor) || []\n      if (argumentsMetadata.length > 0) {\n        this.line(chalk.cyan('Arguments:'))\n        argumentsMetadata.forEach((arg: any) => {\n          this.line(`  ${chalk.green(arg.name)}: ${arg.description || 'No description'}`)\n        })\n        this.line('')\n      }\n\n      // Show options if available\n      const optionsMetadata = Reflect.getMetadata(OPTION_METADATA_KEY, command.constructor) || []\n      if (optionsMetadata.length > 0) {\n        this.line(chalk.cyan('Options:'))\n        optionsMetadata.forEach((opt: any) => {\n          this.line(`  ${chalk.green(opt.flags)}: ${opt.description || 'No description'}`)\n        })\n        this.line('')\n      }\n\n      return BaseCommand.SUCCESS\n    } catch (error) {\n      this.error(`An error occurred: ${error instanceof Error ? error.message : String(error)}`)\n      return BaseCommand.FAILURE\n    }\n  }\n}\n"]}