{"version":3,"sources":["../../src/input/input.ts","../../src/output/output.ts","../../src/decorators/argument.decorator.ts","../../src/di/container.ts","../../src/decorators/command.decorator.ts","../../src/ui/ask.ts","../../src/ui/progress-bar.ts","../../src/ui/table.ts","../../src/command/base-command.ts","../../src/commands/schedule-command.ts"],"names":["injectable","chalk"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAOO,IAAM,QAAN,MAA8B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAwBnC,YAAY,IAAgB,EAAA;AAb5B;AAAA;AAAA;AAAA;AAAA,IAAA,IAAA,CAAQ,OAA+B,EAAC;AAMxC;AAAA;AAAA;AAAA;AAAA,IAAA,IAAA,CAAQ,OAAyC,EAAC;AAQhD,IAAA,IAAA,CAAK,MAAM,IAAI,CAAA;AAAA;AACjB;AAAA;AAAA;AAAA;AAAA;AAAA,EAOO,cAAqC,GAAA;AAC1C,IAAA,OAAO,IAAK,CAAA,WAAA;AAAA;AACd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQO,YAAY,IAAkC,EAAA;AACnD,IAAO,OAAA,IAAA,CAAK,KAAK,IAAI,CAAA;AAAA;AACvB;AAAA;AAAA;AAAA;AAAA;AAAA,EAOO,YAAuC,GAAA;AAC5C,IAAO,OAAA,EAAE,GAAG,IAAA,CAAK,IAAK,EAAA;AAAA;AACxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQO,UAAU,IAA4C,EAAA;AAC3D,IAAO,OAAA,IAAA,CAAK,KAAK,IAAI,CAAA;AAAA;AACvB;AAAA;AAAA;AAAA;AAAA;AAAA,EAOO,UAA+C,GAAA;AACpD,IAAO,OAAA,EAAE,GAAG,IAAA,CAAK,IAAK,EAAA;AAAA;AACxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQO,UAAU,IAAuB,EAAA;AACtC,IAAA,OAAO,QAAQ,IAAK,CAAA,IAAA;AAAA;AACtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQQ,MAAM,IAAsB,EAAA;AAClC,IAAI,IAAA,IAAA,CAAK,WAAW,CAAG,EAAA;AACrB,MAAA;AAAA;AAIF,IAAK,IAAA,CAAA,WAAA,GAAc,KAAK,CAAC,CAAA;AAEzB,IAAA,IAAI,CAAI,GAAA,CAAA;AACR,IAAA,IAAI,cAAiB,GAAA,CAAA;AAErB,IAAO,OAAA,CAAA,GAAI,KAAK,MAAQ,EAAA;AACtB,MAAM,MAAA,GAAA,GAAM,KAAK,CAAC,CAAA;AAGlB,MAAI,IAAA,GAAA,CAAI,UAAW,CAAA,IAAI,CAAG,EAAA;AACxB,QAAM,MAAA,OAAA,GAAU,GAAI,CAAA,SAAA,CAAU,CAAC,CAAA;AAG/B,QAAI,IAAA,OAAA,CAAQ,QAAS,CAAA,GAAG,CAAG,EAAA;AACzB,UAAA,MAAM,CAAC,IAAM,EAAA,KAAK,IAAI,OAAQ,CAAA,KAAA,CAAM,KAAK,CAAC,CAAA;AAC1C,UAAK,IAAA,CAAA,IAAA,CAAK,IAAI,CAAI,GAAA,KAAA;AAAA,SACb,MAAA;AAEL,UAAI,IAAA,CAAA,GAAI,CAAI,GAAA,IAAA,CAAK,MAAU,IAAA,CAAC,IAAK,CAAA,CAAA,GAAI,CAAC,CAAA,CAAE,UAAW,CAAA,GAAG,CAAG,EAAA;AACvD,YAAA,IAAA,CAAK,IAAK,CAAA,OAAO,CAAI,GAAA,IAAA,CAAK,IAAI,CAAC,CAAA;AAC/B,YAAA,CAAA,EAAA;AAAA,WACK,MAAA;AACL,YAAK,IAAA,CAAA,IAAA,CAAK,OAAO,CAAI,GAAA,IAAA;AAAA;AACvB;AACF,OACS,MAAA,IAAA,GAAA,CAAI,UAAW,CAAA,GAAG,CAAG,EAAA;AAC9B,QAAM,MAAA,OAAA,GAAU,GAAI,CAAA,SAAA,CAAU,CAAC,CAAA;AAG/B,QAAI,IAAA,OAAA,CAAQ,QAAS,CAAA,GAAG,CAAG,EAAA;AACzB,UAAA,MAAM,CAAC,IAAM,EAAA,KAAK,IAAI,OAAQ,CAAA,KAAA,CAAM,KAAK,CAAC,CAAA;AAC1C,UAAK,IAAA,CAAA,IAAA,CAAK,IAAI,CAAI,GAAA,KAAA;AAAA,SACb,MAAA;AAEL,UAAI,IAAA,CAAA,GAAI,CAAI,GAAA,IAAA,CAAK,MAAU,IAAA,CAAC,IAAK,CAAA,CAAA,GAAI,CAAC,CAAA,CAAE,UAAW,CAAA,GAAG,CAAG,EAAA;AACvD,YAAA,IAAA,CAAK,IAAK,CAAA,OAAO,CAAI,GAAA,IAAA,CAAK,IAAI,CAAC,CAAA;AAC/B,YAAA,CAAA,EAAA;AAAA,WACK,MAAA;AACL,YAAK,IAAA,CAAA,IAAA,CAAK,OAAO,CAAI,GAAA,IAAA;AAAA;AACvB;AACF,OACK,MAAA;AAEL,QAAA,IAAA,CAAK,IAAK,CAAA,cAAA,CAAe,QAAS,EAAC,CAAI,GAAA,GAAA;AACvC,QAAA,cAAA,EAAA;AAAA;AAGF,MAAA,CAAA,EAAA;AAAA;AACF;AAEJ,CAAA;AClJO,IAAM,SAAN,MAAgC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAM9B,MAAM,OAAuB,EAAA;AAClC,IAAQ,OAAA,CAAA,MAAA,CAAO,MAAM,OAAO,CAAA;AAAA;AAC9B;AAAA;AAAA;AAAA;AAAA;AAAA,EAOO,QAAQ,OAAuB,EAAA;AACpC,IAAA,OAAA,CAAQ,IAAI,OAAO,CAAA;AAAA;AACrB;AAAA;AAAA;AAAA;AAAA;AAAA,EAOO,MAAM,OAAuB,EAAA;AAClC,IAAA,OAAA,CAAQ,MAAM,KAAM,CAAA,IAAA,CAAK,IAAI,OAAO,CAAA,GAAI,OAAO,OAAO,CAAA;AAAA;AACxD;AAAA;AAAA;AAAA;AAAA;AAAA,EAOO,QAAQ,OAAuB,EAAA;AACpC,IAAA,OAAA,CAAQ,IAAI,KAAM,CAAA,IAAA,CAAK,MAAM,SAAS,CAAA,GAAI,OAAO,OAAO,CAAA;AAAA;AAC1D;AAAA;AAAA;AAAA;AAAA;AAAA,EAOO,KAAK,OAAuB,EAAA;AACjC,IAAA,OAAA,CAAQ,IAAI,KAAM,CAAA,IAAA,CAAK,KAAK,MAAM,CAAA,GAAI,OAAO,OAAO,CAAA;AAAA;AACtD;AAAA;AAAA;AAAA;AAAA;AAAA,EAOO,QAAQ,OAAuB,EAAA;AACpC,IAAA,OAAA,CAAQ,IAAI,KAAM,CAAA,IAAA,CAAK,OAAO,SAAS,CAAA,GAAI,OAAO,OAAO,CAAA;AAAA;AAC3D;AAAA;AAAA;AAAA;AAAA;AAAA,EAOO,QAAQ,OAAuB,EAAA;AACpC,IAAA,OAAA,CAAQ,GAAI,CAAA,KAAA,CAAM,IAAK,CAAA,KAAA,GAAQ,OAAO,CAAC,CAAA;AAAA;AAE3C,CAAA;AClEO,IAAM,qBAAA,GAAwB,OAAO,UAAU,CAAA;AAwC/C,SAAS,SAAS,OAA6C,EAAA;AACpE,EAAO,OAAA,CAAC,QAAgB,WAAiC,KAAA;AAIvD,IAAA,IAAI,OAAO,OAAQ,CAAA,IAAA;AACnB,IAEO;AACL,MAAA,IAAA,GAAO,IAAI,IAAI,CAAA,CAAA,CAAA;AAAA;AAGjB,IAAA,IAAI,QAAQ,OAAS,EAAA;AACnB,MAAA,IAAA,GAAO,GAAG,IAAI,CAAA,GAAA,CAAA;AAAA;AAGhB,IAAA,MAAM,QAAW,GAAA;AAAA,MACf,IAAA;AAAA,MACA,WAAA,EAAa,QAAQ,WAAe,IAAA,EAAA;AAAA,MACpC,cAAc,OAAQ,CAAA,YAAA;AAAA,MACtB;AAAA,KACF;AAGA,IAAA,MAAM,mBAAmB,OAAQ,CAAA,WAAA,CAAY,uBAAuB,MAAO,CAAA,WAAW,KAAK,EAAC;AAG5F,IAAA,gBAAA,CAAiB,KAAK,QAAQ,CAAA;AAG9B,IAAA,OAAA,CAAQ,cAAe,CAAA,qBAAA,EAAuB,gBAAkB,EAAA,MAAA,CAAO,WAAW,CAAA;AAAA,GACpF;AACF;ACvEA,IAAM,SAAA,GAAY,IAAI,SAAU,CAAA;AAAA,EAC9B,YAAc,EAAA;AAChB,CAAC,CAAA;;;ACCM,IAAM,oBAAA,GAAuB,OAAO,SAAS,CAAA;AAU7C,SAAS,QAAQ,OAA0C,EAAA;AAChE,EAAA,OAAO,CAAC,MAA2B,KAAA;AApBrC,IAAA,IAAA,EAAA,EAAA,EAAA;AAsBI,IAAA,MAAM,cAAiB,GAAA;AAAA,MACrB,GAAG,OAAA;AAAA,MACH,MAAA,EAAA,CAAQ,EAAQ,GAAA,OAAA,CAAA,MAAA,KAAR,IAAkB,GAAA,EAAA,GAAA,KAAA;AAAA,MAC1B,UAAA,EAAA,CAAY,EAAQ,GAAA,OAAA,CAAA,UAAA,KAAR,IAAsB,GAAA,EAAA,GAAA,IAAA;AAAA,MAClC,WAAA,EAAa,QAAQ,WAAe,IAAA,EAAA;AAAA,MACpC,SAAA,EAAW,OAAQ,CAAA,SAAA,IAAa;AAAC,KACnC;AAGA,IAAQ,OAAA,CAAA,cAAA,CAAe,oBAAsB,EAAA,cAAA,EAAgB,MAAM,CAAA;AAGnE,IAAA,IAAI,eAAe,UAAY,EAAA;AAC7B,MAAA,UAAA,GAAa,MAAM,CAAA;AAInB,MAAI,IAAA;AACF,QAAA,SAAA,CACG,KAAK,QAAS,CAAA,CAAC,EACf,EAAG,CAAA,MAAa,EAChB,gBAAiB,EAAA;AAAA,eACb,KAAO,EAAA;AAAA;AAGhB;AACF,GACF;AACF;ACtCO,IAAM,MAAN,MAA0B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAO/B,MAAa,SAAS,QAAmC,EAAA;AACvD,IAAO,OAAA,GAAA,CAAI,SAAS,QAAQ,CAAA;AAAA;AAC9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,MAAa,UAAU,SAAsD,EAAA;AAC3E,IAAO,OAAA,GAAA,CAAI,UAAU,SAAS,CAAA;AAAA;AAChC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,MAAa,KAAM,CAAA,OAAA,EAAiB,YAAwC,EAAA;AAC1E,IAAO,OAAA,GAAA,CAAI,KAAM,CAAA,OAAA,EAAS,YAAY,CAAA;AAAA;AACxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,MAAa,OAAA,CAAQ,OAAiB,EAAA,YAAA,GAAe,KAAyB,EAAA;AAC5E,IAAO,OAAA,GAAA,CAAI,OAAQ,CAAA,OAAA,EAAS,YAAY,CAAA;AAAA;AAC1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,MAAa,MAAA,CACX,OACA,EAAA,OAAA,EACA,YACc,EAAA;AACd,IAAA,OAAO,GAAI,CAAA,MAAA,CAAO,OAAS,EAAA,OAAA,EAAS,YAAY,CAAA;AAAA;AAClD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,MAAa,WAAA,CACX,OACA,EAAA,OAAA,EACA,YACgB,EAAA;AAChB,IAAA,OAAO,GAAI,CAAA,WAAA,CAAY,OAAS,EAAA,OAAA,EAAS,YAAY,CAAA;AAAA;AACvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,MAAa,SAAS,OAAkC,EAAA;AACtD,IAAO,OAAA,GAAA,CAAI,SAAS,OAAO,CAAA;AAAA;AAC7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,aAAoB,SAAS,QAAmC,EAAA;AAC9D,IAAA,MAAM,UAAU,MAAM,QAAA,CAAS,MAAO,CAAA,CAAC,QAAQ,CAAC,CAAA;AAChD,IAAO,OAAA,OAAA,CAAQ,SAAS,IAAI,CAAA;AAAA;AAC9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,aAAoB,UAAU,SAAsD,EAAA;AAClF,IAAO,OAAA,QAAA,CAAS,OAAO,SAAS,CAAA;AAAA;AAClC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,aAAoB,KAAM,CAAA,OAAA,EAAiB,YAAwC,EAAA;AACjF,IAAA,OAAO,IAAI,QAAS,CAAA;AAAA,MAClB,MAAM,YAAa,CAAA,KAAA;AAAA,MACnB,IAAM,EAAA,OAAA;AAAA,MACN,OAAA;AAAA,MACA,OAAS,EAAA;AAAA,KACV,CAAA;AAAA;AACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,aAAoB,OAAA,CAAQ,OAAiB,EAAA,YAAA,GAAe,KAAyB,EAAA;AACnF,IAAA,OAAO,IAAI,QAAS,CAAA;AAAA,MAClB,MAAM,YAAa,CAAA,OAAA;AAAA,MACnB,IAAM,EAAA,SAAA;AAAA,MACN,OAAA;AAAA,MACA,OAAS,EAAA;AAAA,KACV,CAAA;AAAA;AACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,aAAoB,MAAA,CAClB,OACA,EAAA,OAAA,EACA,YACc,EAAA;AACd,IAAA,OAAO,IAAI,QAAS,CAAA;AAAA,MAClB,MAAM,YAAa,CAAA,IAAA;AAAA,MACnB,IAAM,EAAA,QAAA;AAAA,MACN,OAAA;AAAA,MACA,OAAA;AAAA,MACA,OAAS,EAAA;AAAA,KACV,CAAA;AAAA;AACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,aAAoB,WAAA,CAClB,OACA,EAAA,OAAA,EACA,YACgB,EAAA;AAChB,IAAA,OAAO,IAAI,QAAS,CAAA;AAAA,MAClB,MAAM,YAAa,CAAA,QAAA;AAAA,MACnB,IAAM,EAAA,aAAA;AAAA,MACN,OAAA;AAAA,MACA,OAAA;AAAA,MACA,OAAS,EAAA;AAAA,KACV,CAAA;AAAA;AACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,aAAoB,SAAS,OAAkC,EAAA;AAC7D,IAAA,OAAO,IAAI,QAAS,CAAA;AAAA,MAClB,MAAM,YAAa,CAAA,QAAA;AAAA,MACnB,IAAM,EAAA,UAAA;AAAA,MACN;AAAA,KACD,CAAA;AAAA;AAEL,CAAA;AAnMa,GAAN,GAAA,eAAA,CAAA;AAAA,EADNA,UAAW;AAAA,CACC,EAAA,GAAA,CAAA;ACAN,IAAM,cAAN,MAA0C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAa/C,WAAA,CAAY,KAAQ,GAAA,GAAA,EAAK,MAA6B,EAAA;AACpD,IAAK,IAAA,CAAA,GAAA,GAAM,IAAI,WAAA,CAAY,SAAU,CAAA;AAAA,MACnC,SACE,MAAQ,IAAA,IAAA,GAAA,MAAA,GAAA,MAAA,CAAA,MAAA,KAAU,GAAGC,KAAM,CAAA,IAAA,CAAK,OAAO,CAAC,CAAA,8CAAA,CAAA;AAAA,MAC1C,eAAA,EAAA,CAAiB,iCAAQ,eAAmB,KAAA,QAAA;AAAA,MAC5C,iBAAA,EAAA,CAAmB,iCAAQ,iBAAqB,KAAA;AAAA,KACjD,CAAA;AAED,IAAK,IAAA,CAAA,GAAA,CAAI,KAAM,CAAA,KAAA,EAAO,CAAC,CAAA;AAAA;AACzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQO,MAAA,CAAO,OAAe,OAAqC,EAAA;AAChE,IAAK,IAAA,CAAA,GAAA,CAAI,MAAO,CAAA,KAAA,EAAO,OAAO,CAAA;AAAA;AAChC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQO,SAAA,CAAU,KAAQ,GAAA,CAAA,EAAG,OAAqC,EAAA;AAC/D,IAAK,IAAA,CAAA,GAAA,CAAI,SAAU,CAAA,KAAA,EAAO,OAAO,CAAA;AAAA;AACnC;AAAA;AAAA;AAAA,EAKO,IAAa,GAAA;AAClB,IAAA,IAAA,CAAK,IAAI,IAAK,EAAA;AAAA;AAChB;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,OAAc,cAAuC,GAAA;AACnD,IAAO,OAAA,IAAI,YAAY,QAAS,CAAA;AAAA,MAC9B,MAAQ,EAAA,CAAA,EAAGA,KAAM,CAAA,IAAA,CAAK,OAAO,CAAC,CAAA,8CAAA,CAAA;AAAA,MAC9B,eAAiB,EAAA,QAAA;AAAA,MACjB,iBAAmB,EAAA;AAAA,KACpB,CAAA;AAAA;AAEL,CAAA;AA/Da,WAAN,GAAA,eAAA,CAAA;AAAA,EADND,UAAW;AAAA,CACC,EAAA,WAAA,CAAA;ACDN,IAAM,cAAN,MAA0C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAa/C,WAAY,CAAA,OAAA,GAAoB,EAAC,EAAG,KAAqB,EAAA;AACvD,IAAK,IAAA,CAAA,KAAA,GAAQ,IAAI,KAAM,CAAA;AAAA,MACrB,IAAM,EAAA,OAAA;AAAA,MACN,GAAG;AAAA,KACJ,CAAA;AAAA;AACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQO,OAAO,GAAyB,EAAA;AACrC,IAAK,IAAA,CAAA,KAAA,CAAM,KAAK,GAAG,CAAA;AACnB,IAAO,OAAA,IAAA;AAAA;AACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQO,QAAQ,IAA4B,EAAA;AACzC,IAAA,IAAA,CAAK,QAAQ,CAAC,GAAA,KAAQ,IAAK,CAAA,MAAA,CAAO,GAAG,CAAC,CAAA;AACtC,IAAO,OAAA,IAAA;AAAA;AACT;AAAA;AAAA;AAAA;AAAA;AAAA,EAOO,QAAmB,GAAA;AACxB,IAAO,OAAA,IAAA,CAAK,MAAM,QAAS,EAAA;AAAA;AAC7B;AAAA;AAAA;AAAA,EAKO,MAAe,GAAA;AACpB,IAAQ,OAAA,CAAA,GAAA,CAAI,IAAK,CAAA,QAAA,EAAU,CAAA;AAAA;AAC7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,OAAc,WAAA,CACZ,IACA,EAAA,OAAA,EACA,KACa,EAAA;AACb,IAAA,MAAM,OAAU,GAAA,OAAA;AAChB,IAAA,MAAM,KAAQ,GAAA,IAAI,WAAY,CAAA,OAAA,EAAS,KAAK,CAAA;AAE5C,IAAK,IAAA,CAAA,OAAA,CAAQ,CAAC,IAAS,KAAA;AACrB,MAAA,MAAM,GAAM,GAAA,OAAA,CAAQ,GAAI,CAAA,CAAC,MAAQ,KAAA;AAtFvC,QAAA,IAAA,EAAA;AAsF0C,QAAK,OAAA,CAAA,EAAA,GAAA,IAAA,CAAA,MAAM,MAAX,IAAgB,GAAA,EAAA,GAAA,EAAA;AAAA,OAAE,CAAA;AACtD,MAAA,KAAA,CAAM,OAAO,GAAG,CAAA;AAAA,KACjB,CAAA;AAED,IAAO,OAAA,KAAA;AAAA;AAEX,CAAA;AAjFa,WAAN,GAAA,eAAA,CAAA;AAAA,EADNA,UAAW;AAAA,CACC,EAAA,WAAA,CAAA;;;ACWN,IAAe,cAAf,MAA+C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EA6CpD,WAAA,CAAY,IAAe,EAAA,WAAA,GAAc,EAAI,EAAA;AAC3C,IAAA,MAAM,QAAW,GAAA,OAAA,CAAQ,WAAY,CAAA,oBAAA,EAAsB,KAAK,WAAW,CAAA;AAE3E,IAAI,IAAA,CAAC,IAAQ,KAAA,QAAA,IAAA,IAAA,GAAA,MAAA,GAAA,QAAA,CAAU,IAAM,CAAA,EAAA;AAC3B,MAAA,IAAA,CAAK,OAAO,QAAS,CAAA,IAAA;AACrB,MAAK,IAAA,CAAA,WAAA,GAAc,WAAe,IAAA,QAAA,CAAS,WAAe,IAAA,EAAA;AAAA,eACjD,IAAM,EAAA;AACf,MAAA,IAAA,CAAK,IAAO,GAAA,IAAA;AACZ,MAAA,IAAA,CAAK,WAAc,GAAA,WAAA;AAAA,KACd,MAAA;AACL,MAAM,MAAA,IAAI,MAAM,CAA6E,2EAAA,CAAA,CAAA;AAAA;AAG/F,IAAA,IAAA,CAAK,KAAQ,GAAA,IAAI,KAAM,CAAA,EAAE,CAAA;AACzB,IAAK,IAAA,CAAA,MAAA,GAAS,IAAI,MAAO,EAAA;AAAA;AAC3B;AAAA;AAAA;AAAA;AAAA;AAAA,EAOO,OAAkB,GAAA;AACvB,IAAA,OAAO,IAAK,CAAA,IAAA;AAAA;AACd;AAAA;AAAA;AAAA;AAAA;AAAA,EAOO,cAAyB,GAAA;AAC9B,IAAA,OAAO,IAAK,CAAA,WAAA;AAAA;AACd;AAAA;AAAA;AAAA;AAAA;AAAA,EAOO,SAAS,KAAqB,EAAA;AACnC,IAAA,IAAA,CAAK,KAAQ,GAAA,KAAA;AAAA;AACf;AAAA;AAAA;AAAA;AAAA;AAAA,EAOO,QAAmB,GAAA;AACxB,IAAA,OAAO,IAAK,CAAA,KAAA;AAAA;AACd;AAAA;AAAA;AAAA;AAAA;AAAA,EAOO,UAAU,MAAuB,EAAA;AACtC,IAAA,IAAA,CAAK,MAAS,GAAA,MAAA;AAAA;AAChB;AAAA;AAAA;AAAA;AAAA;AAAA,EAOO,SAAqB,GAAA;AAC1B,IAAA,OAAO,IAAK,CAAA,MAAA;AAAA;AACd;AAAA;AAAA;AAAA;AAAA;AAAA,EAOO,aAAa,IAAsB,EAAA;AACxC,IAAK,IAAA,CAAA,OAAA,CAAQ,CAAC,GAAA,EAAK,KAAU,KAAA;AAC1B,MAAC,KAAK,KAAc,CAAA,IAAA,CAAK,KAAM,CAAA,QAAA,EAAU,CAAI,GAAA,GAAA;AAAA,KAC/C,CAAA;AAAA;AACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQO,WAAA,CAAY,KAAa,KAAkB,EAAA;AAC/C,IAAC,IAAK,CAAA,KAAA,CAAc,IAAK,CAAA,GAAG,CAAI,GAAA,KAAA;AAAA;AACnC;AAAA;AAAA;AAAA;AAAA;AAAA,EAOO,YAAoC,GAAA;AACzC,IAAQ,OAAA,IAAA,CAAK,KAAc,CAAA,IAAA,IAAQ,EAAC;AAAA;AACtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASO,WAAA,CAAqB,KAAa,YAAiC,EAAA;AA/K5E,IAAA,IAAA,EAAA;AAgLI,IAAA,MAAM,KAAS,GAAA,CAAA,EAAA,GAAA,IAAA,CAAK,KAAc,CAAA,IAAA,KAAnB,IAA0B,GAAA,MAAA,GAAA,EAAA,CAAA,GAAA,CAAA;AAEzC,IAAO,OAAA,KAAA,KAAU,SAAY,KAAQ,GAAA,YAAA;AAAA;AACvC;AAAA;AAAA;AAAA;AAAA;AAAA,EAOO,WAAW,OAAoC,EAAA;AACpD,IAAO,MAAA,CAAA,OAAA,CAAQ,OAAO,CAAE,CAAA,OAAA,CAAQ,CAAC,CAAC,GAAA,EAAK,KAAK,CAAM,KAAA;AAC/C,MAAC,IAAK,CAAA,KAAA,CAAc,IAAK,CAAA,GAAG,CAAI,GAAA,KAAA;AAAA,KAClC,CAAA;AAAA;AACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQO,SAAA,CAAU,KAAa,KAAkB,EAAA;AAC7C,IAAC,IAAK,CAAA,KAAA,CAAc,IAAK,CAAA,GAAG,CAAI,GAAA,KAAA;AAAA;AACnC;AAAA;AAAA;AAAA;AAAA;AAAA,EAOO,UAAkC,GAAA;AACvC,IAAQ,OAAA,IAAA,CAAK,KAAc,CAAA,IAAA,IAAQ,EAAC;AAAA;AACtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASO,SAAA,CAAmB,KAAa,YAAiC,EAAA;AA1N1E,IAAA,IAAA,EAAA;AA2NI,IAAA,MAAM,KAAS,GAAA,CAAA,EAAA,GAAA,IAAA,CAAK,KAAc,CAAA,IAAA,KAAnB,IAA0B,GAAA,MAAA,GAAA,EAAA,CAAA,GAAA,CAAA;AAEzC,IAAO,OAAA,KAAA,KAAU,SAAY,KAAQ,GAAA,YAAA;AAAA;AACvC;AAAA;AAAA;AAAA;AAAA;AAAA,EAOO,SAAkB,GAAA;AAAA;AAEzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAkBA,MAAa,aAAkC,GAAA;AAC7C,IAAO,OAAA,IAAA;AAAA;AACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,MAAa,aAAa,QAAwC,EAAA;AAAA;AAElE;AAAA;AAAA;AAAA;AAAA;AAAA,EAOO,GAAY,GAAA;AACjB,IAAO,OAAA,GAAA;AAAA;AACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQO,QAAA,CAAS,KAAQ,GAAA,GAAA,EAAK,MAA2C,EAAA;AACtE,IAAO,OAAA,IAAI,WAAY,CAAA,KAAA,EAAO,MAAM,CAAA;AAAA;AACtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQO,KAAM,CAAA,OAAA,GAAoB,EAAC,EAAG,KAAmC,EAAA;AACtE,IAAO,OAAA,IAAI,WAAY,CAAA,OAAA,EAAS,KAAK,CAAA;AAAA;AACvC;AAAA;AAAA;AAAA;AAAA;AAAA,EAOU,IAAA,CAAK,UAAU,EAAU,EAAA;AACjC,IAAK,IAAA,CAAA,MAAA,CAAO,QAAQ,OAAO,CAAA;AAAA;AAC7B;AAAA;AAAA;AAAA;AAAA;AAAA,EAOU,KAAK,OAAuB,EAAA;AACpC,IAAK,IAAA,CAAA,MAAA,CAAO,KAAK,OAAO,CAAA;AAAA;AAC1B;AAAA;AAAA;AAAA;AAAA;AAAA,EAOU,QAAQ,OAAuB,EAAA;AACvC,IAAK,IAAA,CAAA,MAAA,CAAO,QAAQ,OAAO,CAAA;AAAA;AAC7B;AAAA;AAAA;AAAA;AAAA;AAAA,EAOU,MAAM,OAAuB,EAAA;AACrC,IAAK,IAAA,CAAA,MAAA,CAAO,MAAM,OAAO,CAAA;AAAA;AAC3B;AAAA;AAAA;AAAA;AAAA;AAAA,EAOU,QAAQ,OAAuB,EAAA;AACvC,IAAK,IAAA,CAAA,MAAA,CAAO,QAAQ,OAAO,CAAA;AAAA;AAC7B;AAAA;AAAA;AAAA;AAAA;AAAA,EAOU,QAAQ,OAAuB,EAAA;AACvC,IAAK,IAAA,CAAA,MAAA,CAAO,QAAQ,OAAO,CAAA;AAAA;AAE/B,CAAA;AAAA;AAAA;AAAA;AApUsB,WAAA,CAIG,OAAU,GAAA,CAAA;AAAA;AAAA;AAAA;AAJb,WAAA,CASG,OAAU,GAAA,CAAA;AAAA;AAAA;AAAA;AATb,WAAA,CAcG,OAAU,GAAA,CAAA;;;ACnBtB,IAAA,eAAA,GAAN,cAA8B,WAAY,CAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAsB/C,YAAyC,SAA8B,EAAA;AACrE,IAAM,KAAA,EAAA;AACN,IAAA,IAAA,CAAK,SAAY,GAAA,SAAA;AAAA;AACnB;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAa,OAA2B,GAAA;AACtC,IAAI,IAAA;AACF,MAAA,MAAM,SAAS,IAAK,CAAA,KAAA,CAAM,WAAY,CAAA,GAAG,KAAK,IAAK,CAAA,MAAA;AAEnD,MAAA,QAAQ,MAAQ;AAAA,QACd,KAAK,MAAA;AACH,UAAA,OAAO,KAAK,SAAU,EAAA;AAAA,QACxB,KAAK,OAAA;AACH,UAAA,OAAO,KAAK,cAAe,EAAA;AAAA,QAC7B,KAAK,MAAA;AACH,UAAA,OAAO,KAAK,aAAc,EAAA;AAAA,QAC5B;AACE,UAAK,IAAA,CAAA,KAAA,CAAM,CAAmB,gBAAA,EAAA,MAAM,CAAE,CAAA,CAAA;AACtC,UAAA,IAAA,CAAK,KAAK,sCAAsC,CAAA;AAChD,UAAA,OAAO,WAAY,CAAA,OAAA;AAAA;AACvB,aACO,KAAO,EAAA;AACd,MAAK,IAAA,CAAA,KAAA,CAAM,sBAAsB,KAAiB,YAAA,KAAA,GAAQ,MAAM,OAAU,GAAA,MAAA,CAAO,KAAK,CAAC,CAAE,CAAA,CAAA;AACzF,MAAA,OAAO,WAAY,CAAA,OAAA;AAAA;AACrB;AACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,MAAc,SAA6B,GAAA;AACzC,IAAM,MAAA,KAAA,GAAQ,IAAK,CAAA,SAAA,CAAU,QAAS,EAAA;AAEtC,IAAI,IAAA,KAAA,CAAM,WAAW,CAAG,EAAA;AACtB,MAAA,IAAA,CAAK,KAAK,qBAAqB,CAAA;AAC/B,MAAA,OAAO,WAAY,CAAA,OAAA;AAAA;AAGrB,IAAM,MAAA,KAAA,GAAQ,IAAI,WAAY,CAAA,CAAC,WAAW,UAAY,EAAA,UAAA,EAAY,UAAU,CAAC,CAAA;AAE7E,IAAM,KAAA,CAAA,OAAA,CAAQ,CAAC,IAAS,KAAA;AACtB,MAAA,MAAM,UAAa,GAAA,IAAA,CAAK,gBAAiB,CAAA,IAAA,CAAK,UAAU,CAAA;AACxD,MAAA,MAAM,UAAU,IAAK,CAAA,OAAA,GAAU,IAAK,CAAA,OAAA,CAAQ,gBAAmB,GAAA,OAAA;AAC/D,MAAA,MAAM,UAAU,IAAK,CAAA,OAAA,GAAU,IAAK,CAAA,OAAA,CAAQ,gBAAmB,GAAA,SAAA;AAE/D,MAAM,KAAA,CAAA,MAAA,CAAO,CAAC,IAAK,CAAA,OAAA,CAAQ,SAAW,EAAA,UAAA,EAAY,OAAS,EAAA,OAAO,CAAC,CAAA;AAAA,KACpE,CAAA;AAED,IAAA,IAAA,CAAK,IAAK,EAAA;AACV,IAAA,KAAA,CAAM,MAAO,EAAA;AACb,IAAA,IAAA,CAAK,IAAK,EAAA;AAEV,IAAA,OAAO,WAAY,CAAA,OAAA;AAAA;AACrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,MAAc,cAAkC,GAAA;AAC9C,IAAA,IAAA,CAAK,UAAU,KAAM,EAAA;AACrB,IAAA,IAAA,CAAK,QAAQ,oBAAoB,CAAA;AACjC,IAAA,OAAO,WAAY,CAAA,OAAA;AAAA;AACrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,MAAc,aAAiC,GAAA;AAC7C,IAAA,IAAA,CAAK,UAAU,IAAK,EAAA;AACpB,IAAA,IAAA,CAAK,QAAQ,oBAAoB,CAAA;AACjC,IAAA,OAAO,WAAY,CAAA,OAAA;AAAA;AACrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASQ,iBAAiB,UAAyB,EAAA;AArIpD,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA;AAsII,IAAM,MAAA,MAAA,GAAA,CAAS,EAAW,GAAA,UAAA,CAAA,MAAA,KAAX,IAAqB,GAAA,EAAA,GAAA,GAAA;AACpC,IAAM,MAAA,IAAA,GAAA,CAAO,EAAW,GAAA,UAAA,CAAA,IAAA,KAAX,IAAmB,GAAA,EAAA,GAAA,GAAA;AAChC,IAAM,MAAA,UAAA,GAAA,CAAa,EAAW,GAAA,UAAA,CAAA,UAAA,KAAX,IAAyB,GAAA,EAAA,GAAA,GAAA;AAC5C,IAAM,MAAA,KAAA,GAAA,CAAQ,EAAW,GAAA,UAAA,CAAA,KAAA,KAAX,IAAoB,GAAA,EAAA,GAAA,GAAA;AAClC,IAAM,MAAA,SAAA,GAAA,CAAY,EAAW,GAAA,UAAA,CAAA,SAAA,KAAX,IAAwB,GAAA,EAAA,GAAA,GAAA;AAE1C,IAAO,OAAA,CAAA,EAAG,MAAM,CAAI,CAAA,EAAA,IAAI,IAAI,UAAU,CAAA,CAAA,EAAI,KAAK,CAAA,CAAA,EAAI,SAAS,CAAA,CAAA;AAAA;AAEhE;AApHU,eAAA,CAAA;AAAA,EALP,QAAS,CAAA;AAAA,IACR,IAAM,EAAA,QAAA;AAAA,IACN,WAAa,EAAA,gDAEf,CAAC;AAAA,CAAA,EARU,eASH,CAAA,SAAA,EAAA,QAAA,EAAA,CAAA,CAAA;AATG,eAAN,GAAA,eAAA,CAAA;AAAA,EAJN,OAAQ,CAAA;AAAA,IACP,IAAM,EAAA,UAAA;AAAA,IACN,WAAa,EAAA;AAAA,GACd,CAAA;AAAA,EAuBc,eAAA,CAAA,CAAA,EAAA,MAAA,CAAO,kBAAkB,CAAC,CAAA;AAAA,CAtB5B,EAAA,eAAA,CAAA","file":"schedule-command.mjs","sourcesContent":["import type { IInput } from '@pixielity/ts-types'\n\n/**\n * Implementation of the IInput interface\n *\n * Parses command line arguments and provides access to them.\n */\nexport class Input implements IInput {\n  /**\n   * The command name\n   * @private\n   */\n  private commandName?: string\n\n  /**\n   * Map of argument names to values\n   * @private\n   */\n  private args: Record<string, string> = {}\n\n  /**\n   * Map of option names to values\n   * @private\n   */\n  private opts: Record<string, string | boolean> = {}\n\n  /**\n   * Creates a new Input instance\n   *\n   * @param {string[]} argv - The command line arguments\n   */\n  constructor(argv: string[]) {\n    this.parse(argv)\n  }\n\n  /**\n   * Gets the command name from the input\n   *\n   * @returns {string | undefined} The command name or undefined if not provided\n   */\n  public getCommandName(): string | undefined {\n    return this.commandName\n  }\n\n  /**\n   * Gets an argument value by name\n   *\n   * @param {string} name - The name of the argument\n   * @returns {string | undefined} The argument value or undefined if not provided\n   */\n  public getArgument(name: string): string | undefined {\n    return this.args[name]\n  }\n\n  /**\n   * Gets all arguments\n   *\n   * @returns {Record<string, string>} Map of argument names to values\n   */\n  public getArguments(): Record<string, string> {\n    return { ...this.args }\n  }\n\n  /**\n   * Gets an option value by name\n   *\n   * @param {string} name - The name of the option\n   * @returns {string | boolean | undefined} The option value or undefined if not provided\n   */\n  public getOption(name: string): string | boolean | undefined {\n    return this.opts[name]\n  }\n\n  /**\n   * Gets all options\n   *\n   * @returns {Record<string, string | boolean>} Map of option names to values\n   */\n  public getOptions(): Record<string, string | boolean> {\n    return { ...this.opts }\n  }\n\n  /**\n   * Checks if an option is set\n   *\n   * @param {string} name - The name of the option\n   * @returns {boolean} True if the option is set, false otherwise\n   */\n  public hasOption(name: string): boolean {\n    return name in this.opts\n  }\n\n  /**\n   * Parses the command line arguments\n   *\n   * @param {string[]} argv - The command line arguments\n   * @private\n   */\n  private parse(argv: string[]): void {\n    if (argv.length === 0) {\n      return\n    }\n\n    // First argument is the command name\n    this.commandName = argv[0]\n\n    let i = 1\n    let currentArgName = 0\n\n    while (i < argv.length) {\n      const arg = argv[i]\n\n      // Handle options (--option or -o)\n      if (arg.startsWith('--')) {\n        const optName = arg.substring(2)\n\n        // Handle --option=value\n        if (optName.includes('=')) {\n          const [name, value] = optName.split('=', 2)\n          this.opts[name] = value\n        } else {\n          // Handle --option value or --option (boolean flag)\n          if (i + 1 < argv.length && !argv[i + 1].startsWith('-')) {\n            this.opts[optName] = argv[i + 1]\n            i++\n          } else {\n            this.opts[optName] = true\n          }\n        }\n      } else if (arg.startsWith('-')) {\n        const optName = arg.substring(1)\n\n        // Handle -o=value\n        if (optName.includes('=')) {\n          const [name, value] = optName.split('=', 2)\n          this.opts[name] = value\n        } else {\n          // Handle -o value or -o (boolean flag)\n          if (i + 1 < argv.length && !argv[i + 1].startsWith('-')) {\n            this.opts[optName] = argv[i + 1]\n            i++\n          } else {\n            this.opts[optName] = true\n          }\n        }\n      } else {\n        // Handle positional arguments\n        this.args[currentArgName.toString()] = arg\n        currentArgName++\n      }\n\n      i++\n    }\n  }\n}\n","import chalk from 'chalk'\nimport type { IOutput } from '@pixielity/ts-types'\n\n/**\n * Implementation of the IOutput interface\n *\n * Provides methods for writing to the console with formatting using chalk.\n */\nexport class Output implements IOutput {\n  /**\n   * Writes a message to the output\n   *\n   * @param {string} message - The message to write\n   */\n  public write(message: string): void {\n    process.stdout.write(message)\n  }\n\n  /**\n   * Writes a message to the output followed by a newline\n   *\n   * @param {string} message - The message to write\n   */\n  public writeln(message: string): void {\n    console.log(message)\n  }\n\n  /**\n   * Writes an error message to the output\n   *\n   * @param {string} message - The error message to write\n   */\n  public error(message: string): void {\n    console.error(chalk.bold.red('ERROR') + ': ' + message)\n  }\n\n  /**\n   * Writes a success message to the output\n   *\n   * @param {string} message - The success message to write\n   */\n  public success(message: string): void {\n    console.log(chalk.bold.green('SUCCESS') + ': ' + message)\n  }\n\n  /**\n   * Writes an info message to the output\n   *\n   * @param {string} message - The info message to write\n   */\n  public info(message: string): void {\n    console.log(chalk.bold.blue('INFO') + ': ' + message)\n  }\n\n  /**\n   * Writes a warning message to the output\n   *\n   * @param {string} message - The warning message to write\n   */\n  public warning(message: string): void {\n    console.log(chalk.bold.yellow('WARNING') + ': ' + message)\n  }\n\n  /**\n   * Writes a comment message to the output\n   *\n   * @param {string} message - The comment message to write\n   */\n  public comment(message: string): void {\n    console.log(chalk.gray('// ' + message))\n  }\n}\n","import 'reflect-metadata'\n\n/**\n * Metadata key for arguments\n */\nexport const ARGUMENT_METADATA_KEY = Symbol('argument')\n\n/**\n * Argument options interface\n */\nexport interface ArgumentOptions {\n  /**\n   * The name of the argument\n   */\n  name: string\n\n  /**\n   * The description of the argument\n   */\n  description?: string\n\n  /**\n   * The default value of the argument\n   */\n  defaultValue?: any\n\n  /**\n   * Whether the argument is required\n   */\n  required?: boolean\n\n  /**\n   * Whether the argument is an array (variadic)\n   */\n  isArray?: boolean\n}\n\n/**\n * Argument decorator\n *\n * Defines a command argument\n *\n * @param {ArgumentOptions} options - The argument options\n * @returns {PropertyDecorator} The property decorator\n */\nexport function Argument(options: ArgumentOptions): PropertyDecorator {\n  return (target: Object, propertyKey: string | symbol) => {\n    // Format the argument name for Commander\n    // If it's required, don't add brackets\n    // If it's an array, add ellipsis\n    let name = options.name\n    if (!options.required) {\n      name = `[${name}]`\n    } else {\n      name = `<${name}>`\n    }\n\n    if (options.isArray) {\n      name = `${name}...`\n    }\n\n    const metadata = {\n      name,\n      description: options.description || '',\n      defaultValue: options.defaultValue,\n      propertyKey,\n    }\n\n    // Get existing metadata or initialize empty array\n    const existingMetadata = Reflect.getMetadata(ARGUMENT_METADATA_KEY, target.constructor) || []\n\n    // Add new metadata\n    existingMetadata.push(metadata)\n\n    // Update metadata\n    Reflect.defineMetadata(ARGUMENT_METADATA_KEY, existingMetadata, target.constructor)\n  }\n}\n","import { Container } from 'inversify'\nimport 'reflect-metadata'\n\n/**\n * The global Inversify container instance\n */\nconst container = new Container({\n  defaultScope: 'Singleton',\n})\n\nexport { container }\n","import 'reflect-metadata'\nimport { injectable } from 'inversify'\nimport { ICommand, ICommandOptions } from '@pixielity/ts-types'\n\nimport { container } from '../di/container'\n\n/**\n * Metadata key for command\n */\nexport const COMMAND_METADATA_KEY = Symbol('command')\n\n/**\n * Command decorator\n *\n * Marks a class as a console command and registers it with the container\n *\n * @param {CommandOptions} options - The command options\n * @returns {ClassDecorator} The class decorator\n */\nexport function Command(options: ICommandOptions): ClassDecorator {\n  return (target: Function): void => {\n    // Set default values for options\n    const commandOptions = {\n      ...options,\n      hidden: options.hidden ?? false,\n      injectable: options.injectable ?? true,\n      description: options.description || '',\n      shortcuts: options.shortcuts || [],\n    }\n\n    // Store command metadata with defaults applied\n    Reflect.defineMetadata(COMMAND_METADATA_KEY, commandOptions, target)\n\n    // Make the class injectable if not explicitly disabled\n    if (commandOptions.injectable) {\n      injectable()(target)\n\n      // Register the command with the container\n      // We use a multi-injection approach for commands\n      try {\n        container\n          .bind(ICommand.$)\n          .to(target as any)\n          .inSingletonScope()\n      } catch (error) {\n        // If the binding already exists, we can ignore the error\n        // This can happen during hot reloading\n      }\n    }\n  }\n}\n","import inquirer from 'inquirer'\nimport { injectable } from 'inversify'\nimport type { IAsk } from '@pixielity/ts-types'\nimport type { IQuestion } from '@pixielity/ts-types'\nimport { QuestionType } from '@pixielity/ts-types'\n\n/**\n * Ask utility class\n *\n * Provides methods for asking questions in the console.\n */\n@injectable()\nexport class Ask implements IAsk {\n  /**\n   * Asks a single question\n   *\n   * @param {IQuestion} question - The question to ask\n   * @returns {Promise<any>} The answer\n   */\n  public async question(question: IQuestion): Promise<any> {\n    return Ask.question(question)\n  }\n\n  /**\n   * Asks multiple questions\n   *\n   * @param {IQuestion[]} questions - The questions to ask\n   * @returns {Promise<Record<string, any>>} The answers\n   */\n  public async questions(questions: IQuestion[]): Promise<Record<string, any>> {\n    return Ask.questions(questions)\n  }\n\n  /**\n   * Asks for input\n   *\n   * @param {string} message - The message to display\n   * @param {string} defaultValue - The default value\n   * @returns {Promise<string>} The input\n   */\n  public async input(message: string, defaultValue?: string): Promise<string> {\n    return Ask.input(message, defaultValue)\n  }\n\n  /**\n   * Asks for confirmation\n   *\n   * @param {string} message - The message to display\n   * @param {boolean} defaultValue - The default value\n   * @returns {Promise<boolean>} The confirmation\n   */\n  public async confirm(message: string, defaultValue = false): Promise<boolean> {\n    return Ask.confirm(message, defaultValue)\n  }\n\n  /**\n   * Asks for a selection from a list\n   *\n   * @param {string} message - The message to display\n   * @param {string[] | { name: string; value: any }[]} choices - The choices\n   * @param {any} defaultValue - The default value\n   * @returns {Promise<any>} The selection\n   */\n  public async select(\n    message: string,\n    choices: string[] | { name: string; value: any }[],\n    defaultValue?: any,\n  ): Promise<any> {\n    return Ask.select(message, choices, defaultValue)\n  }\n\n  /**\n   * Asks for multiple selections from a list\n   *\n   * @param {string} message - The message to display\n   * @param {string[] | { name: string; value: any }[]} choices - The choices\n   * @param {any[]} defaultValue - The default values\n   * @returns {Promise<any[]>} The selections\n   */\n  public async multiSelect(\n    message: string,\n    choices: string[] | { name: string; value: any }[],\n    defaultValue?: any[],\n  ): Promise<any[]> {\n    return Ask.multiSelect(message, choices, defaultValue)\n  }\n\n  /**\n   * Asks for a password\n   *\n   * @param {string} message - The message to display\n   * @returns {Promise<string>} The password\n   */\n  public async password(message: string): Promise<string> {\n    return Ask.password(message)\n  }\n\n  /**\n   * Asks a single question\n   *\n   * @param {IQuestion} question - The question to ask\n   * @returns {Promise<any>} The answer\n   */\n  public static async question(question: IQuestion): Promise<any> {\n    const answers = await inquirer.prompt([question])\n    return answers[question.name]\n  }\n\n  /**\n   * Asks multiple questions\n   *\n   * @param {IQuestion[]} questions - The questions to ask\n   * @returns {Promise<Record<string, any>>} The answers\n   */\n  public static async questions(questions: IQuestion[]): Promise<Record<string, any>> {\n    return inquirer.prompt(questions)\n  }\n\n  /**\n   * Asks for input\n   *\n   * @param {string} message - The message to display\n   * @param {string} defaultValue - The default value\n   * @returns {Promise<string>} The input\n   */\n  public static async input(message: string, defaultValue?: string): Promise<string> {\n    return Ask.question({\n      type: QuestionType.Input,\n      name: 'input',\n      message,\n      default: defaultValue,\n    })\n  }\n\n  /**\n   * Asks for confirmation\n   *\n   * @param {string} message - The message to display\n   * @param {boolean} defaultValue - The default value\n   * @returns {Promise<boolean>} The confirmation\n   */\n  public static async confirm(message: string, defaultValue = false): Promise<boolean> {\n    return Ask.question({\n      type: QuestionType.Confirm,\n      name: 'confirm',\n      message,\n      default: defaultValue,\n    })\n  }\n\n  /**\n   * Asks for a selection from a list\n   *\n   * @param {string} message - The message to display\n   * @param {string[] | { name: string; value: any }[]} choices - The choices\n   * @param {any} defaultValue - The default value\n   * @returns {Promise<any>} The selection\n   */\n  public static async select(\n    message: string,\n    choices: string[] | { name: string; value: any }[],\n    defaultValue?: any,\n  ): Promise<any> {\n    return Ask.question({\n      type: QuestionType.List,\n      name: 'select',\n      message,\n      choices,\n      default: defaultValue,\n    })\n  }\n\n  /**\n   * Asks for multiple selections from a list\n   *\n   * @param {string} message - The message to display\n   * @param {string[] | { name: string; value: any }[]} choices - The choices\n   * @param {any[]} defaultValue - The default values\n   * @returns {Promise<any[]>} The selections\n   */\n  public static async multiSelect(\n    message: string,\n    choices: string[] | { name: string; value: any }[],\n    defaultValue?: any[],\n  ): Promise<any[]> {\n    return Ask.question({\n      type: QuestionType.Checkbox,\n      name: 'multiSelect',\n      message,\n      choices,\n      default: defaultValue,\n    })\n  }\n\n  /**\n   * Asks for a password\n   *\n   * @param {string} message - The message to display\n   * @returns {Promise<string>} The password\n   */\n  public static async password(message: string): Promise<string> {\n    return Ask.question({\n      type: QuestionType.Password,\n      name: 'password',\n      message,\n    })\n  }\n}\n","import cliProgress from 'cli-progress'\nimport chalk from 'chalk'\nimport type { IProgressBar } from '@pixielity/ts-types'\nimport type { IProgressBarFormat } from '@pixielity/ts-types'\nimport { injectable } from 'inversify'\n\n/**\n * Progress bar utility class\n *\n * Provides methods for displaying progress bars in the console.\n */\n@injectable()\nexport class ProgressBar implements IProgressBar {\n  /**\n   * The progress bar instance\n   * @private\n   */\n  private bar: cliProgress.SingleBar\n\n  /**\n   * Creates a new ProgressBar instance\n   *\n   * @param {number} total - The total value\n   * @param {IProgressBarFormat} format - The format options\n   */\n  constructor(total = 100, format?: IProgressBarFormat) {\n    this.bar = new cliProgress.SingleBar({\n      format:\n        format?.format || `${chalk.cyan('{bar}')} {percentage}% | ETA: {eta}s | {value}/{total}`,\n      barCompleteChar: format?.barCompleteChar || '\\u2588',\n      barIncompleteChar: format?.barIncompleteChar || '\\u2591',\n    })\n\n    this.bar.start(total, 0)\n  }\n\n  /**\n   * Updates the progress bar\n   *\n   * @param {number} value - The current value\n   * @param {Record<string, any>} payload - Additional payload data\n   */\n  public update(value: number, payload?: Record<string, any>): void {\n    this.bar.update(value, payload)\n  }\n\n  /**\n   * Increments the progress bar\n   *\n   * @param {number} value - The value to increment by\n   * @param {Record<string, any>} payload - Additional payload data\n   */\n  public increment(value = 1, payload?: Record<string, any>): void {\n    this.bar.increment(value, payload)\n  }\n\n  /**\n   * Stops the progress bar\n   */\n  public stop(): void {\n    this.bar.stop()\n  }\n\n  /**\n   * Creates a multi-bar container\n   *\n   * @returns {cliProgress.MultiBar} The multi-bar container\n   */\n  public static createMultiBar(): cliProgress.MultiBar {\n    return new cliProgress.MultiBar({\n      format: `${chalk.cyan('{bar}')} {percentage}% | ETA: {eta}s | {value}/{total}`,\n      barCompleteChar: '\\u2588',\n      barIncompleteChar: '\\u2591',\n    })\n  }\n}\n","import Table from 'cli-table3'\nimport { injectable } from 'inversify'\nimport type { ITableOutput } from '@pixielity/ts-types'\nimport type { ITableStyle } from '@pixielity/ts-types'\n\n/**\n * Table utility class\n *\n * Provides methods for displaying tables in the console.\n */\n@injectable()\nexport class TableOutput implements ITableOutput {\n  /**\n   * The table instance\n   * @private\n   */\n  private table: Table.Table\n\n  /**\n   * Creates a new TableOutput instance\n   *\n   * @param {string[]} headers - The table headers\n   * @param {ITableStyle} style - The table style\n   */\n  constructor(headers: string[] = [], style?: ITableStyle) {\n    this.table = new Table({\n      head: headers,\n      ...style,\n    })\n  }\n\n  /**\n   * Adds a row to the table\n   *\n   * @param {any[]} row - The row data\n   * @returns {TableOutput} The table instance for chaining\n   */\n  public addRow(row: any[]): TableOutput {\n    this.table.push(row)\n    return this\n  }\n\n  /**\n   * Adds multiple rows to the table\n   *\n   * @param {any[][]} rows - The rows data\n   * @returns {TableOutput} The table instance for chaining\n   */\n  public addRows(rows: any[][]): TableOutput {\n    rows.forEach((row) => this.addRow(row))\n    return this\n  }\n\n  /**\n   * Renders the table to a string\n   *\n   * @returns {string} The rendered table\n   */\n  public toString(): string {\n    return this.table.toString()\n  }\n\n  /**\n   * Renders the table to the console\n   */\n  public render(): void {\n    console.log(this.toString())\n  }\n\n  /**\n   * Creates a new table from an array of objects\n   *\n   * @param {Record<string, any>[]} data - The data\n   * @param {string[]} columns - The columns to include\n   * @param {ITableStyle} style - The table style\n   * @returns {TableOutput} The table instance\n   */\n  public static fromObjects(\n    data: Record<string, any>[],\n    columns: string[],\n    style?: ITableStyle,\n  ): TableOutput {\n    const headers = columns\n    const table = new TableOutput(headers, style)\n\n    data.forEach((item) => {\n      const row = columns.map((column) => item[column] ?? '')\n      table.addRow(row)\n    })\n\n    return table\n  }\n}\n","import type {\n  IAsk,\n  ICommand,\n  IProgressBar,\n  IProgressBarFormat,\n  ITableOutput,\n  ITableStyle,\n} from '@pixielity/ts-types'\nimport type { IInput } from '@pixielity/ts-types'\nimport type { IOutput } from '@pixielity/ts-types'\n\nimport { Input } from '../input/input'\nimport { Output } from '../output/output'\nimport { COMMAND_METADATA_KEY } from '../decorators'\nimport { Ask, ProgressBar, TableOutput } from '../ui'\n\n/**\n * Abstract base class for console commands.\n *\n * Provides a consistent structure and common functionality for defining and executing\n * commands in the console. Supports Laravel/Symfony-inspired argument and option handling.\n */\nexport abstract class BaseCommand implements ICommand {\n  /**\n   * Exit code for successful execution.\n   */\n  public static readonly SUCCESS = 0\n\n  /**\n   * Exit code indicating a general failure.\n   */\n  public static readonly FAILURE = 1\n\n  /**\n   * Exit code for invalid user input.\n   */\n  public static readonly INVALID = 2\n\n  /**\n   * Name of the command.\n   * Defined in the constructor or through the `@Command` decorator metadata.\n   */\n  protected name: string\n\n  /**\n   * Description of the command.\n   * Shown in help output and can be set via constructor or metadata.\n   */\n  protected description: string\n\n  /**\n   * Input instance for handling command-line arguments and options.\n   */\n  protected input: IInput\n\n  /**\n   * Output instance for writing messages to the terminal.\n   */\n  protected output: IOutput\n\n  /**\n   * Creates a new instance of the BaseCommand.\n   *\n   * @param name - The name of the command (optional if using decorator)\n   * @param description - The description of the command\n   * @throws Will throw if name is missing and no decorator metadata is found.\n   */\n  constructor(name?: string, description = '') {\n    const metadata = Reflect.getMetadata(COMMAND_METADATA_KEY, this.constructor)\n\n    if (!name && metadata?.name) {\n      this.name = metadata.name\n      this.description = description || metadata.description || ''\n    } else if (name) {\n      this.name = name\n      this.description = description\n    } else {\n      throw new Error(`Command name is required. Provide it via constructor or @Command decorator.`)\n    }\n\n    this.input = new Input([])\n    this.output = new Output()\n  }\n\n  /**\n   * Returns the name of the command.\n   *\n   * @returns The command name.\n   */\n  public getName(): string {\n    return this.name\n  }\n\n  /**\n   * Returns the description of the command.\n   *\n   * @returns The command description.\n   */\n  public getDescription(): string {\n    return this.description\n  }\n\n  /**\n   * Sets the input instance used by this command.\n   *\n   * @param input - The input instance.\n   */\n  public setInput(input: IInput): void {\n    this.input = input\n  }\n\n  /**\n   * Retrieves the current input instance.\n   *\n   * @returns The input instance.\n   */\n  public getInput(): IInput {\n    return this.input\n  }\n\n  /**\n   * Sets the output instance used by this command.\n   *\n   * @param output - The output instance.\n   */\n  public setOutput(output: IOutput): void {\n    this.output = output\n  }\n\n  /**\n   * Retrieves the current output instance.\n   *\n   * @returns The output instance.\n   */\n  public getOutput(): IOutput {\n    return this.output\n  }\n\n  /**\n   * Sets multiple arguments for the command.\n   *\n   * @param args - Positional arguments as an array.\n   */\n  public setArguments(args: string[]): void {\n    args.forEach((arg, index) => {\n      ;(this.input as any).args[index.toString()] = arg\n    })\n  }\n\n  /**\n   * Sets a single named argument.\n   *\n   * @param key - The argument name.\n   * @param value - The argument value.\n   */\n  public setArgument(key: string, value: any): void {\n    ;(this.input as any).args[key] = value\n  }\n\n  /**\n   * Retrieves all arguments as a key-value object.\n   *\n   * @returns Object containing all arguments.\n   */\n  public getArguments(): Record<string, any> {\n    return (this.input as any).args || {}\n  }\n\n  /**\n   * Retrieves a single argument by name.\n   *\n   * @param key - The argument name.\n   * @param defaultValue - default value .\n   * @returns The value of the argument or undefined if not found.\n   */\n  public getArgument<T = any>(key: string, defaultValue?: T): T | undefined {\n    const value = (this.input as any).args?.[key]\n\n    return value !== undefined ? value : defaultValue\n  }\n\n  /**\n   * Sets multiple options for the command.\n   *\n   * @param options - Object of option keys and values.\n   */\n  public setOptions(options: Record<string, any>): void {\n    Object.entries(options).forEach(([key, value]) => {\n      ;(this.input as any).opts[key] = value\n    })\n  }\n\n  /**\n   * Sets a single named option.\n   *\n   * @param key - The option name.\n   * @param value - The option value.\n   */\n  public setOption(key: string, value: any): void {\n    ;(this.input as any).opts[key] = value\n  }\n\n  /**\n   * Retrieves all options as a key-value object.\n   *\n   * @returns Object containing all options.\n   */\n  public getOptions(): Record<string, any> {\n    return (this.input as any).opts || {}\n  }\n\n  /**\n   * Retrieves a single option by name.\n   *\n   * @param key - The option name.\n   * @param defaultValue - default value .\n   * @returns The value of the option or undefined if not found.\n   */\n  public getOption<T = any>(key: string, defaultValue?: T): T | undefined {\n    const value = (this.input as any).opts?.[key]\n\n    return value !== undefined ? value : defaultValue\n  }\n\n  /**\n   * Configures arguments and options.\n   *\n   * Should be overridden in the subclass to define expected inputs.\n   */\n  public configure(): void {\n    // To be implemented in subclasses\n  }\n\n  /**\n   * Abstract method that executes the command's logic.\n   *\n   * Must be implemented in the subclass.\n   *\n   * @returns Exit code or void.\n   */\n  public abstract execute(): Promise<number | void>\n\n  /**\n   * Lifecycle hook that runs before command execution.\n   *\n   * Override this method to add pre-execution checks or setup.\n   *\n   * @returns True if execution should proceed, false to abort.\n   */\n  public async beforeExecute(): Promise<boolean> {\n    return true\n  }\n\n  /**\n   * Lifecycle hook that runs after command execution.\n   *\n   * Override this method to add post-processing or cleanup.\n   *\n   * @param exitCode - The result of command execution.\n   */\n  public async afterExecute(exitCode: number | void): Promise<void> {\n    // Optional: post-execution logic\n  }\n\n  /**\n   * Ask utility class\n   *\n   * @returns Ask utility class\n   */\n  public ask(): IAsk {\n    return Ask\n  }\n\n  /**\n   * Creates a new ProgressBar instance\n   *\n   * @param {number} total - The total value\n   * @param {IProgressBarFormat} format - The format options\n   */\n  public progress(total = 100, format?: IProgressBarFormat): IProgressBar {\n    return new ProgressBar(total, format)\n  }\n\n  /**\n   * Creates a new TableOutput instance\n   *\n   * @param {string[]} headers - The table headers\n   * @param {ITableStyle} style - The table style\n   */\n  public table(headers: string[] = [], style?: ITableStyle): ITableOutput {\n    return new TableOutput(headers, style)\n  }\n\n  /**\n   * Writes a simple message line to output.\n   *\n   * @param message - The message to write.\n   */\n  protected line(message = ''): void {\n    this.output.writeln(message)\n  }\n\n  /**\n   * Writes an informational message to output.\n   *\n   * @param message - The message to write.\n   */\n  protected info(message: string): void {\n    this.output.info(message)\n  }\n\n  /**\n   * Writes a success message to output.\n   *\n   * @param message - The message to write.\n   */\n  protected success(message: string): void {\n    this.output.success(message)\n  }\n\n  /**\n   * Writes an error message to output.\n   *\n   * @param message - The message to write.\n   */\n  protected error(message: string): void {\n    this.output.error(message)\n  }\n\n  /**\n   * Writes a warning message to output.\n   *\n   * @param message - The message to write.\n   */\n  protected warning(message: string): void {\n    this.output.warning(message)\n  }\n\n  /**\n   * Writes a comment-style message to output.\n   *\n   * @param message - The message to write.\n   */\n  protected comment(message: string): void {\n    this.output.comment(message)\n  }\n}\n","import { inject } from 'inversify'\nimport { ICommandScheduler } from '@pixielity/ts-types'\n\nimport { BaseCommand } from '../command/base-command'\nimport { Command } from '../decorators/command.decorator'\nimport { Argument } from '../decorators/argument.decorator'\nimport { TableOutput } from '../ui/table'\n\n/**\n * ScheduleCommand implementation\n *\n * Manages scheduled tasks.\n */\n@Command({\n  name: 'schedule',\n  description: 'Manage scheduled tasks',\n})\nexport class ScheduleCommand extends BaseCommand {\n  /**\n   * The action argument\n   */\n  @Argument({\n    name: 'action',\n    description: 'The action to perform (list, run, start, stop)',\n    required: true,\n  })\n  private action!: string\n\n  /**\n   * The command scheduler\n   * @private\n   */\n  private scheduler: ICommandScheduler\n\n  /**\n   * Creates a new ScheduleCommand instance\n   *\n   * @param {ICommandScheduler} scheduler - The command scheduler\n   */\n  constructor(@inject(ICommandScheduler.$) scheduler: ICommandScheduler) {\n    super()\n    this.scheduler = scheduler\n  }\n\n  /**\n   * Executes the command\n   *\n   * @returns {Promise<number>} The exit code\n   */\n  public async execute(): Promise<number> {\n    try {\n      const action = this.input.getArgument('0') || this.action\n\n      switch (action) {\n        case 'list':\n          return this.listTasks()\n        case 'start':\n          return this.startScheduler()\n        case 'stop':\n          return this.stopScheduler()\n        default:\n          this.error(`Unknown action: ${action}`)\n          this.line('Available actions: list, start, stop')\n          return BaseCommand.INVALID\n      }\n    } catch (error) {\n      this.error(`An error occurred: ${error instanceof Error ? error.message : String(error)}`)\n      return BaseCommand.FAILURE\n    }\n  }\n\n  /**\n   * Lists all scheduled tasks\n   *\n   * @returns {Promise<number>} The exit code\n   * @private\n   */\n  private async listTasks(): Promise<number> {\n    const tasks = this.scheduler.getTasks()\n\n    if (tasks.length === 0) {\n      this.info('No scheduled tasks.')\n      return BaseCommand.SUCCESS\n    }\n\n    const table = new TableOutput(['Command', 'Schedule', 'Last Run', 'Next Run'])\n\n    tasks.forEach((task) => {\n      const expression = this.formatExpression(task.expression)\n      const lastRun = task.lastRun ? task.lastRun.toLocaleString() : 'Never'\n      const nextRun = task.nextRun ? task.nextRun.toLocaleString() : 'Unknown'\n\n      table.addRow([task.command.getName(), expression, lastRun, nextRun])\n    })\n\n    this.line()\n    table.render()\n    this.line()\n\n    return BaseCommand.SUCCESS\n  }\n\n  /**\n   * Starts the scheduler\n   *\n   * @returns {Promise<number>} The exit code\n   * @private\n   */\n  private async startScheduler(): Promise<number> {\n    this.scheduler.start()\n    this.success('Scheduler started.')\n    return BaseCommand.SUCCESS\n  }\n\n  /**\n   * Stops the scheduler\n   *\n   * @returns {Promise<number>} The exit code\n   * @private\n   */\n  private async stopScheduler(): Promise<number> {\n    this.scheduler.stop()\n    this.success('Scheduler stopped.')\n    return BaseCommand.SUCCESS\n  }\n\n  /**\n   * Formats a schedule expression\n   *\n   * @param {any} expression - The schedule expression\n   * @returns {string} The formatted expression\n   * @private\n   */\n  private formatExpression(expression: any): string {\n    const minute = expression.minute ?? '*'\n    const hour = expression.hour ?? '*'\n    const dayOfMonth = expression.dayOfMonth ?? '*'\n    const month = expression.month ?? '*'\n    const dayOfWeek = expression.dayOfWeek ?? '*'\n\n    return `${minute} ${hour} ${dayOfMonth} ${month} ${dayOfWeek}`\n  }\n}\n"]}