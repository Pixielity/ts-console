{"version":3,"sources":["../../src/input/input.ts","../../src/output/output.ts","../../src/decorators/argument.decorator.ts","../../src/di/container.ts","../../src/decorators/command.decorator.ts","../../src/decorators/option.decorator.ts","../../src/command/base-command.ts","../../src/ui/ask.ts","../../src/ui/table.ts","../../src/ui/progress-bar.ts","../../src/commands/demo-command.ts","../../src/commands/greet-command.ts","../../src/commands/help-command.ts","../../src/commands/list-command.ts","../../src/commands/make-command.ts","../../src/commands/schedule-command.ts"],"names":["chalk","injectable","QuestionType","inject","ICommandRegistry"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAOO,IAAM,QAAN,MAA8B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAwBnC,YAAY,IAAgB,EAAA;AAb5B;AAAA;AAAA;AAAA;AAAA,IAAA,IAAA,CAAQ,OAA+B,EAAC;AAMxC;AAAA;AAAA;AAAA;AAAA,IAAA,IAAA,CAAQ,OAAyC,EAAC;AAQhD,IAAA,IAAA,CAAK,MAAM,IAAI,CAAA;AAAA;AACjB;AAAA;AAAA;AAAA;AAAA;AAAA,EAOO,cAAqC,GAAA;AAC1C,IAAA,OAAO,IAAK,CAAA,WAAA;AAAA;AACd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQO,YAAY,IAAkC,EAAA;AACnD,IAAO,OAAA,IAAA,CAAK,KAAK,IAAI,CAAA;AAAA;AACvB;AAAA;AAAA;AAAA;AAAA;AAAA,EAOO,YAAuC,GAAA;AAC5C,IAAO,OAAA,EAAE,GAAG,IAAA,CAAK,IAAK,EAAA;AAAA;AACxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQO,UAAU,IAA4C,EAAA;AAC3D,IAAO,OAAA,IAAA,CAAK,KAAK,IAAI,CAAA;AAAA;AACvB;AAAA;AAAA;AAAA;AAAA;AAAA,EAOO,UAA+C,GAAA;AACpD,IAAO,OAAA,EAAE,GAAG,IAAA,CAAK,IAAK,EAAA;AAAA;AACxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQO,UAAU,IAAuB,EAAA;AACtC,IAAA,OAAO,QAAQ,IAAK,CAAA,IAAA;AAAA;AACtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQQ,MAAM,IAAsB,EAAA;AAClC,IAAI,IAAA,IAAA,CAAK,WAAW,CAAG,EAAA;AACrB,MAAA;AAAA;AAIF,IAAK,IAAA,CAAA,WAAA,GAAc,KAAK,CAAC,CAAA;AAEzB,IAAA,IAAI,CAAI,GAAA,CAAA;AACR,IAAA,IAAI,cAAiB,GAAA,CAAA;AAErB,IAAO,OAAA,CAAA,GAAI,KAAK,MAAQ,EAAA;AACtB,MAAM,MAAA,GAAA,GAAM,KAAK,CAAC,CAAA;AAGlB,MAAI,IAAA,GAAA,CAAI,UAAW,CAAA,IAAI,CAAG,EAAA;AACxB,QAAM,MAAA,OAAA,GAAU,GAAI,CAAA,SAAA,CAAU,CAAC,CAAA;AAG/B,QAAI,IAAA,OAAA,CAAQ,QAAS,CAAA,GAAG,CAAG,EAAA;AACzB,UAAA,MAAM,CAAC,IAAM,EAAA,KAAK,IAAI,OAAQ,CAAA,KAAA,CAAM,KAAK,CAAC,CAAA;AAC1C,UAAK,IAAA,CAAA,IAAA,CAAK,IAAI,CAAI,GAAA,KAAA;AAAA,SACb,MAAA;AAEL,UAAI,IAAA,CAAA,GAAI,CAAI,GAAA,IAAA,CAAK,MAAU,IAAA,CAAC,IAAK,CAAA,CAAA,GAAI,CAAC,CAAA,CAAE,UAAW,CAAA,GAAG,CAAG,EAAA;AACvD,YAAA,IAAA,CAAK,IAAK,CAAA,OAAO,CAAI,GAAA,IAAA,CAAK,IAAI,CAAC,CAAA;AAC/B,YAAA,CAAA,EAAA;AAAA,WACK,MAAA;AACL,YAAK,IAAA,CAAA,IAAA,CAAK,OAAO,CAAI,GAAA,IAAA;AAAA;AACvB;AACF,OACS,MAAA,IAAA,GAAA,CAAI,UAAW,CAAA,GAAG,CAAG,EAAA;AAC9B,QAAM,MAAA,OAAA,GAAU,GAAI,CAAA,SAAA,CAAU,CAAC,CAAA;AAG/B,QAAI,IAAA,OAAA,CAAQ,QAAS,CAAA,GAAG,CAAG,EAAA;AACzB,UAAA,MAAM,CAAC,IAAM,EAAA,KAAK,IAAI,OAAQ,CAAA,KAAA,CAAM,KAAK,CAAC,CAAA;AAC1C,UAAK,IAAA,CAAA,IAAA,CAAK,IAAI,CAAI,GAAA,KAAA;AAAA,SACb,MAAA;AAEL,UAAI,IAAA,CAAA,GAAI,CAAI,GAAA,IAAA,CAAK,MAAU,IAAA,CAAC,IAAK,CAAA,CAAA,GAAI,CAAC,CAAA,CAAE,UAAW,CAAA,GAAG,CAAG,EAAA;AACvD,YAAA,IAAA,CAAK,IAAK,CAAA,OAAO,CAAI,GAAA,IAAA,CAAK,IAAI,CAAC,CAAA;AAC/B,YAAA,CAAA,EAAA;AAAA,WACK,MAAA;AACL,YAAK,IAAA,CAAA,IAAA,CAAK,OAAO,CAAI,GAAA,IAAA;AAAA;AACvB;AACF,OACK,MAAA;AAEL,QAAA,IAAA,CAAK,IAAK,CAAA,cAAA,CAAe,QAAS,EAAC,CAAI,GAAA,GAAA;AACvC,QAAA,cAAA,EAAA;AAAA;AAGF,MAAA,CAAA,EAAA;AAAA;AACF;AAEJ,CAAA;AClJO,IAAM,SAAN,MAAgC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAM9B,MAAM,OAAuB,EAAA;AAClC,IAAQ,OAAA,CAAA,MAAA,CAAO,MAAM,OAAO,CAAA;AAAA;AAC9B;AAAA;AAAA;AAAA;AAAA;AAAA,EAOO,QAAQ,OAAuB,EAAA;AACpC,IAAA,OAAA,CAAQ,IAAI,OAAO,CAAA;AAAA;AACrB;AAAA;AAAA;AAAA;AAAA;AAAA,EAOO,MAAM,OAAuB,EAAA;AAClC,IAAA,OAAA,CAAQ,MAAMA,MAAM,CAAA,IAAA,CAAK,IAAI,OAAO,CAAA,GAAI,OAAO,OAAO,CAAA;AAAA;AACxD;AAAA;AAAA;AAAA;AAAA;AAAA,EAOO,QAAQ,OAAuB,EAAA;AACpC,IAAA,OAAA,CAAQ,IAAIA,MAAM,CAAA,IAAA,CAAK,MAAM,SAAS,CAAA,GAAI,OAAO,OAAO,CAAA;AAAA;AAC1D;AAAA;AAAA;AAAA;AAAA;AAAA,EAOO,KAAK,OAAuB,EAAA;AACjC,IAAA,OAAA,CAAQ,IAAIA,MAAM,CAAA,IAAA,CAAK,KAAK,MAAM,CAAA,GAAI,OAAO,OAAO,CAAA;AAAA;AACtD;AAAA;AAAA;AAAA;AAAA;AAAA,EAOO,QAAQ,OAAuB,EAAA;AACpC,IAAA,OAAA,CAAQ,IAAIA,MAAM,CAAA,IAAA,CAAK,OAAO,SAAS,CAAA,GAAI,OAAO,OAAO,CAAA;AAAA;AAC3D;AAAA;AAAA;AAAA;AAAA;AAAA,EAOO,QAAQ,OAAuB,EAAA;AACpC,IAAA,OAAA,CAAQ,GAAI,CAAAA,MAAA,CAAM,IAAK,CAAA,KAAA,GAAQ,OAAO,CAAC,CAAA;AAAA;AAE3C,CAAA;AClEO,IAAM,qBAAA,GAAwB,OAAO,UAAU,CAAA;AAwC/C,SAAS,SAAS,OAA6C,EAAA;AACpE,EAAO,OAAA,CAAC,QAAgB,WAAiC,KAAA;AAIvD,IAAA,IAAI,OAAO,OAAQ,CAAA,IAAA;AACnB,IAAI,IAAA,CAAC,QAAQ,QAAU,EAAA;AACrB,MAAA,IAAA,GAAO,IAAI,IAAI,CAAA,CAAA,CAAA;AAAA,KACV,MAAA;AACL,MAAA,IAAA,GAAO,IAAI,IAAI,CAAA,CAAA,CAAA;AAAA;AAGjB,IAAA,IAAI,QAAQ,OAAS,EAAA;AACnB,MAAA,IAAA,GAAO,GAAG,IAAI,CAAA,GAAA,CAAA;AAAA;AAGhB,IAAA,MAAM,QAAW,GAAA;AAAA,MACf,IAAA;AAAA,MACA,WAAA,EAAa,QAAQ,WAAe,IAAA,EAAA;AAAA,MACpC,cAAc,OAAQ,CAAA,YAAA;AAAA,MACtB;AAAA,KACF;AAGA,IAAA,MAAM,mBAAmB,OAAQ,CAAA,WAAA,CAAY,uBAAuB,MAAO,CAAA,WAAW,KAAK,EAAC;AAG5F,IAAA,gBAAA,CAAiB,KAAK,QAAQ,CAAA;AAG9B,IAAA,OAAA,CAAQ,cAAe,CAAA,qBAAA,EAAuB,gBAAkB,EAAA,MAAA,CAAO,WAAW,CAAA;AAAA,GACpF;AACF;ACvEA,IAAM,SAAA,GAAY,IAAI,SAAU,CAAA;AAAA,EAC9B,YAAc,EAAA;AAChB,CAAC,CAAA;;;ACCM,IAAM,oBAAA,GAAuB,OAAO,SAAS,CAAA;AAU7C,SAAS,QAAQ,OAA0C,EAAA;AAChE,EAAA,OAAO,CAAC,MAA2B,KAAA;AApBrC,IAAA,IAAA,EAAA,EAAA,EAAA;AAsBI,IAAA,MAAM,cAAiB,GAAA;AAAA,MACrB,GAAG,OAAA;AAAA,MACH,MAAA,EAAA,CAAQ,EAAQ,GAAA,OAAA,CAAA,MAAA,KAAR,IAAkB,GAAA,EAAA,GAAA,KAAA;AAAA,MAC1B,UAAA,EAAA,CAAY,EAAQ,GAAA,OAAA,CAAA,UAAA,KAAR,IAAsB,GAAA,EAAA,GAAA,IAAA;AAAA,MAClC,WAAA,EAAa,QAAQ,WAAe,IAAA,EAAA;AAAA,MACpC,SAAA,EAAW,OAAQ,CAAA,SAAA,IAAa;AAAC,KACnC;AAGA,IAAQ,OAAA,CAAA,cAAA,CAAe,oBAAsB,EAAA,cAAA,EAAgB,MAAM,CAAA;AAGnE,IAAA,IAAI,eAAe,UAAY,EAAA;AAC7B,MAAA,UAAA,GAAa,MAAM,CAAA;AAInB,MAAI,IAAA;AACF,QAAA,SAAA,CACG,KAAK,QAAS,CAAA,CAAC,EACf,EAAG,CAAA,MAAa,EAChB,gBAAiB,EAAA;AAAA,eACb,KAAO,EAAA;AAAA;AAGhB;AACF,GACF;AACF;AC7CO,IAAM,mBAAA,GAAsB,OAAO,QAAQ,CAAA;AA8B3C,SAAS,OAAO,OAA2C,EAAA;AAChE,EAAO,OAAA,CAAC,QAAgB,WAAiC,KAAA;AACvD,IAAA,MAAM,QAAW,GAAA;AAAA,MACf,OAAO,OAAQ,CAAA,KAAA;AAAA,MACf,WAAA,EAAa,QAAQ,WAAe,IAAA,EAAA;AAAA,MACpC,cAAc,OAAQ,CAAA,YAAA;AAAA,MACtB;AAAA,KACF;AAGA,IAAA,MAAM,mBAAmB,OAAQ,CAAA,WAAA,CAAY,qBAAqB,MAAO,CAAA,WAAW,KAAK,EAAC;AAG1F,IAAA,gBAAA,CAAiB,KAAK,QAAQ,CAAA;AAG9B,IAAA,OAAA,CAAQ,cAAe,CAAA,mBAAA,EAAqB,gBAAkB,EAAA,MAAA,CAAO,WAAW,CAAA;AAAA,GAClF;AACF;;;ACzCO,IAAe,cAAf,MAA+C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAiDpD,WAAA,CAAY,IAAe,EAAA,WAAA,GAAc,EAAI,EAAA;AAE3C,IAAI,IAAA,IAAA,KAAS,MAAa,IAAA,IAAA,KAAS,IAAM,EAAA;AACvC,MAAA,MAAM,QAAW,GAAA,OAAA,CAAQ,WAAY,CAAA,oBAAA,EAAsB,KAAK,WAAW,CAAA;AAE3E,MAAI,IAAA,QAAA,IAAY,SAAS,IAAM,EAAA;AAC7B,QAAA,IAAA,CAAK,OAAO,QAAS,CAAA,IAAA;AAGrB,QAAI,IAAA,CAAC,WAAe,IAAA,QAAA,CAAS,WAAa,EAAA;AACxC,UAAA,IAAA,CAAK,cAAc,QAAS,CAAA,WAAA;AAAA,SACvB,MAAA;AACL,UAAA,IAAA,CAAK,WAAc,GAAA,WAAA;AAAA;AACrB,OACK,MAAA;AACL,QAAA,MAAM,IAAI,KAAA;AAAA,UACR,CAAA,6FAAA;AAAA,SACF;AAAA;AACF,KACK,MAAA;AACL,MAAA,IAAA,CAAK,IAAO,GAAA,IAAA;AACZ,MAAA,IAAA,CAAK,WAAc,GAAA,WAAA;AAAA;AAGrB,IAAA,IAAA,CAAK,KAAQ,GAAA,IAAI,KAAM,CAAA,EAAE,CAAA;AACzB,IAAK,IAAA,CAAA,MAAA,GAAS,IAAI,MAAO,EAAA;AAAA;AAC3B;AAAA;AAAA;AAAA;AAAA;AAAA,EAOO,OAAkB,GAAA;AACvB,IAAA,OAAO,IAAK,CAAA,IAAA;AAAA;AACd;AAAA;AAAA;AAAA;AAAA;AAAA,EAOO,cAAyB,GAAA;AAC9B,IAAA,OAAO,IAAK,CAAA,WAAA;AAAA;AACd;AAAA;AAAA;AAAA;AAAA;AAAA,EAOO,SAAS,KAAqB,EAAA;AACnC,IAAA,IAAA,CAAK,KAAQ,GAAA,KAAA;AAAA;AACf;AAAA;AAAA;AAAA;AAAA;AAAA,EAOO,QAAmB,GAAA;AACxB,IAAA,OAAO,IAAK,CAAA,KAAA;AAAA;AACd;AAAA;AAAA;AAAA;AAAA;AAAA,EAOO,UAAU,MAAuB,EAAA;AACtC,IAAA,IAAA,CAAK,MAAS,GAAA,MAAA;AAAA;AAChB;AAAA;AAAA;AAAA;AAAA;AAAA,EAOO,SAAqB,GAAA;AAC1B,IAAA,OAAO,IAAK,CAAA,MAAA;AAAA;AACd;AAAA;AAAA;AAAA;AAAA;AAAA,EAOO,aAAa,IAAsB,EAAA;AAExC,IAAK,IAAA,CAAA,OAAA,CAAQ,CAAC,GAAA,EAAK,KAAU,KAAA;AAC1B,MAAC,KAAK,KAAc,CAAA,IAAA,CAAK,KAAM,CAAA,QAAA,EAAU,CAAI,GAAA,GAAA;AAAA,KAC/C,CAAA;AAAA;AACH;AAAA;AAAA;AAAA;AAAA;AAAA,EAOO,WAAW,OAAoC,EAAA;AAEpD,IAAO,MAAA,CAAA,OAAA,CAAQ,OAAO,CAAE,CAAA,OAAA,CAAQ,CAAC,CAAC,GAAA,EAAK,KAAK,CAAM,KAAA;AAC/C,MAAC,IAAK,CAAA,KAAA,CAAc,IAAK,CAAA,GAAG,CAAI,GAAA,KAAA;AAAA,KAClC,CAAA;AAAA;AACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQO,SAAkB,GAAA;AAAA;AAEzB;AAAA;AAAA;AAAA;AAAA;AAAA,EAiBA,MAAa,aAAkC,GAAA;AAC7C,IAAO,OAAA,IAAA;AAAA;AACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,MAAa,aAAa,QAAwC,EAAA;AAAA;AAElE;AAAA;AAAA;AAAA;AAAA;AAAA,EAOU,IAAA,CAAK,UAAU,EAAU,EAAA;AACjC,IAAK,IAAA,CAAA,MAAA,CAAO,QAAQ,OAAO,CAAA;AAAA;AAC7B;AAAA;AAAA;AAAA;AAAA;AAAA,EAOU,KAAK,OAAuB,EAAA;AACpC,IAAK,IAAA,CAAA,MAAA,CAAO,KAAK,OAAO,CAAA;AAAA;AAC1B;AAAA;AAAA;AAAA;AAAA;AAAA,EAOU,QAAQ,OAAuB,EAAA;AACvC,IAAK,IAAA,CAAA,MAAA,CAAO,QAAQ,OAAO,CAAA;AAAA;AAC7B;AAAA;AAAA;AAAA;AAAA;AAAA,EAOU,MAAM,OAAuB,EAAA;AACrC,IAAK,IAAA,CAAA,MAAA,CAAO,MAAM,OAAO,CAAA;AAAA;AAC3B;AAAA;AAAA;AAAA;AAAA;AAAA,EAOU,QAAQ,OAAuB,EAAA;AACvC,IAAK,IAAA,CAAA,MAAA,CAAO,QAAQ,OAAO,CAAA;AAAA;AAC7B;AAAA;AAAA;AAAA;AAAA;AAAA,EAOU,QAAQ,OAAuB,EAAA;AACvC,IAAK,IAAA,CAAA,MAAA,CAAO,QAAQ,OAAO,CAAA;AAAA;AAE/B,CAAA;AAAA;AAAA;AAAA;AAAA;AAvPsB,WAAA,CAKG,OAAU,GAAA,CAAA;AAAA;AAAA;AAAA;AAAA;AALb,WAAA,CAWG,OAAU,GAAA,CAAA;AAAA;AAAA;AAAA;AAAA;AAXb,WAAA,CAiBG,OAAU,GAAA,CAAA;ACjB5B,IAAM,MAAN,MAA0B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAO/B,MAAa,SAAS,QAAmC,EAAA;AACvD,IAAO,OAAA,GAAA,CAAI,SAAS,QAAQ,CAAA;AAAA;AAC9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,MAAa,UAAU,SAAsD,EAAA;AAC3E,IAAO,OAAA,GAAA,CAAI,UAAU,SAAS,CAAA;AAAA;AAChC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,MAAa,KAAM,CAAA,OAAA,EAAiB,YAAwC,EAAA;AAC1E,IAAO,OAAA,GAAA,CAAI,KAAM,CAAA,OAAA,EAAS,YAAY,CAAA;AAAA;AACxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,MAAa,OAAA,CAAQ,OAAiB,EAAA,YAAA,GAAe,KAAyB,EAAA;AAC5E,IAAO,OAAA,GAAA,CAAI,OAAQ,CAAA,OAAA,EAAS,YAAY,CAAA;AAAA;AAC1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,MAAa,MAAA,CACX,OACA,EAAA,OAAA,EACA,YACc,EAAA;AACd,IAAA,OAAO,GAAI,CAAA,MAAA,CAAO,OAAS,EAAA,OAAA,EAAS,YAAY,CAAA;AAAA;AAClD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,MAAa,WAAA,CACX,OACA,EAAA,OAAA,EACA,YACgB,EAAA;AAChB,IAAA,OAAO,GAAI,CAAA,WAAA,CAAY,OAAS,EAAA,OAAA,EAAS,YAAY,CAAA;AAAA;AACvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,MAAa,SAAS,OAAkC,EAAA;AACtD,IAAO,OAAA,GAAA,CAAI,SAAS,OAAO,CAAA;AAAA;AAC7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,aAAoB,SAAS,QAAmC,EAAA;AAC9D,IAAA,MAAM,UAAU,MAAM,QAAA,CAAS,MAAO,CAAA,CAAC,QAAQ,CAAC,CAAA;AAChD,IAAO,OAAA,OAAA,CAAQ,SAAS,IAAI,CAAA;AAAA;AAC9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,aAAoB,UAAU,SAAsD,EAAA;AAClF,IAAO,OAAA,QAAA,CAAS,OAAO,SAAS,CAAA;AAAA;AAClC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,aAAoB,KAAM,CAAA,OAAA,EAAiB,YAAwC,EAAA;AACjF,IAAA,OAAO,IAAI,QAAS,CAAA;AAAA,MAClB,MAAM,YAAa,CAAA,KAAA;AAAA,MACnB,IAAM,EAAA,OAAA;AAAA,MACN,OAAA;AAAA,MACA,OAAS,EAAA;AAAA,KACV,CAAA;AAAA;AACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,aAAoB,OAAA,CAAQ,OAAiB,EAAA,YAAA,GAAe,KAAyB,EAAA;AACnF,IAAA,OAAO,IAAI,QAAS,CAAA;AAAA,MAClB,MAAM,YAAa,CAAA,OAAA;AAAA,MACnB,IAAM,EAAA,SAAA;AAAA,MACN,OAAA;AAAA,MACA,OAAS,EAAA;AAAA,KACV,CAAA;AAAA;AACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,aAAoB,MAAA,CAClB,OACA,EAAA,OAAA,EACA,YACc,EAAA;AACd,IAAA,OAAO,IAAI,QAAS,CAAA;AAAA,MAClB,MAAM,YAAa,CAAA,IAAA;AAAA,MACnB,IAAM,EAAA,QAAA;AAAA,MACN,OAAA;AAAA,MACA,OAAA;AAAA,MACA,OAAS,EAAA;AAAA,KACV,CAAA;AAAA;AACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,aAAoB,WAAA,CAClB,OACA,EAAA,OAAA,EACA,YACgB,EAAA;AAChB,IAAA,OAAO,IAAI,QAAS,CAAA;AAAA,MAClB,MAAM,YAAa,CAAA,QAAA;AAAA,MACnB,IAAM,EAAA,aAAA;AAAA,MACN,OAAA;AAAA,MACA,OAAA;AAAA,MACA,OAAS,EAAA;AAAA,KACV,CAAA;AAAA;AACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,aAAoB,SAAS,OAAkC,EAAA;AAC7D,IAAA,OAAO,IAAI,QAAS,CAAA;AAAA,MAClB,MAAM,YAAa,CAAA,QAAA;AAAA,MACnB,IAAM,EAAA,UAAA;AAAA,MACN;AAAA,KACD,CAAA;AAAA;AAEL,CAAA;AAnMa,GAAN,GAAA,eAAA,CAAA;AAAA,EADNC,UAAW;AAAA,CACC,EAAA,GAAA,CAAA;ACDN,IAAM,cAAN,MAA0C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAa/C,WAAY,CAAA,OAAA,GAAoB,EAAC,EAAG,KAAqB,EAAA;AACvD,IAAK,IAAA,CAAA,KAAA,GAAQ,IAAI,KAAM,CAAA;AAAA,MACrB,IAAM,EAAA,OAAA;AAAA,MACN,GAAG;AAAA,KACJ,CAAA;AAAA;AACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQO,OAAO,GAAyB,EAAA;AACrC,IAAK,IAAA,CAAA,KAAA,CAAM,KAAK,GAAG,CAAA;AACnB,IAAO,OAAA,IAAA;AAAA;AACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQO,QAAQ,IAA4B,EAAA;AACzC,IAAA,IAAA,CAAK,QAAQ,CAAC,GAAA,KAAQ,IAAK,CAAA,MAAA,CAAO,GAAG,CAAC,CAAA;AACtC,IAAO,OAAA,IAAA;AAAA;AACT;AAAA;AAAA;AAAA;AAAA;AAAA,EAOO,QAAmB,GAAA;AACxB,IAAO,OAAA,IAAA,CAAK,MAAM,QAAS,EAAA;AAAA;AAC7B;AAAA;AAAA;AAAA,EAKO,MAAe,GAAA;AACpB,IAAQ,OAAA,CAAA,GAAA,CAAI,IAAK,CAAA,QAAA,EAAU,CAAA;AAAA;AAC7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,OAAc,WAAA,CAAY,IAA6B,EAAA,OAAA,EAAmB,KAAkC,EAAA;AAC1G,IAAA,MAAM,OAAU,GAAA,OAAA;AAChB,IAAA,MAAM,KAAQ,GAAA,IAAI,WAAY,CAAA,OAAA,EAAS,KAAK,CAAA;AAE5C,IAAK,IAAA,CAAA,OAAA,CAAQ,CAAC,IAAS,KAAA;AACrB,MAAA,MAAM,GAAM,GAAA,OAAA,CAAQ,GAAI,CAAA,CAAC,MAAQ,KAAA;AAlFvC,QAAA,IAAA,EAAA;AAkF0C,QAAK,OAAA,CAAA,EAAA,GAAA,IAAA,CAAA,MAAM,MAAX,IAAgB,GAAA,EAAA,GAAA,EAAA;AAAA,OAAE,CAAA;AACtD,MAAA,KAAA,CAAM,OAAO,GAAG,CAAA;AAAA,KACjB,CAAA;AAED,IAAO,OAAA,KAAA;AAAA;AAEX,CAAA;AA7Ea,WAAN,GAAA,eAAA,CAAA;AAAA,EADNA,UAAW;AAAA,CACC,EAAA,WAAA,CAAA;ACCN,IAAM,cAAN,MAA0C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAa/C,WAAA,CAAY,KAAQ,GAAA,GAAA,EAAK,MAA6B,EAAA;AACpD,IAAK,IAAA,CAAA,GAAA,GAAM,IAAI,WAAA,CAAY,SAAU,CAAA;AAAA,MACnC,SAAQ,MAAQ,IAAA,IAAA,GAAA,MAAA,GAAA,MAAA,CAAA,MAAA,KAAU,GAAGD,MAAM,CAAA,IAAA,CAAK,OAAO,CAAC,CAAA,8CAAA,CAAA;AAAA,MAChD,eAAA,EAAA,CAAiB,iCAAQ,eAAmB,KAAA,QAAA;AAAA,MAC5C,iBAAA,EAAA,CAAmB,iCAAQ,iBAAqB,KAAA;AAAA,KACjD,CAAA;AAED,IAAK,IAAA,CAAA,GAAA,CAAI,KAAM,CAAA,KAAA,EAAO,CAAC,CAAA;AAAA;AACzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQO,MAAA,CAAO,OAAe,OAAqC,EAAA;AAChE,IAAK,IAAA,CAAA,GAAA,CAAI,MAAO,CAAA,KAAA,EAAO,OAAO,CAAA;AAAA;AAChC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQO,SAAA,CAAU,KAAQ,GAAA,CAAA,EAAG,OAAqC,EAAA;AAC/D,IAAK,IAAA,CAAA,GAAA,CAAI,SAAU,CAAA,KAAA,EAAO,OAAO,CAAA;AAAA;AACnC;AAAA;AAAA;AAAA,EAKO,IAAa,GAAA;AAClB,IAAA,IAAA,CAAK,IAAI,IAAK,EAAA;AAAA;AAChB;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,OAAc,cAAuC,GAAA;AACnD,IAAO,OAAA,IAAI,YAAY,QAAS,CAAA;AAAA,MAC9B,MAAQ,EAAA,CAAA,EAAGA,MAAM,CAAA,IAAA,CAAK,OAAO,CAAC,CAAA,8CAAA,CAAA;AAAA,MAC9B,eAAiB,EAAA,QAAA;AAAA,MACjB,iBAAmB,EAAA;AAAA,KACpB,CAAA;AAAA;AAEL,CAAA;AA9Da,WAAN,GAAA,eAAA,CAAA;AAAA,EADNC,UAAW;AAAA,CACC,EAAA,WAAA,CAAA;;;ACQA,IAAA,WAAA,GAAN,cAA0B,WAAY,CAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAe3C,MAAa,OAA2B,GAAA;AACtC,IAAI,IAAA;AACF,MAAA,MAAM,UAAW,IAAK,CAAA,KAAA,CAAM,SAAU,CAAA,SAAS,KAAgB,IAAK,CAAA,OAAA;AAEpE,MAAA,IAAI,CAAC,OAAS,EAAA;AAEZ,QAAA,MAAM,eAAkB,GAAA,MAAM,GAAI,CAAA,MAAA,CAAO,sCAAwC,EAAA;AAAA,UAC/E,EAAE,IAAA,EAAM,qBAAuB,EAAA,KAAA,EAAO,KAAM,EAAA;AAAA,UAC5C,EAAE,IAAA,EAAM,QAAU,EAAA,KAAA,EAAO,OAAQ,EAAA;AAAA,UACjC,EAAE,IAAA,EAAM,eAAiB,EAAA,KAAA,EAAO,UAAW,EAAA;AAAA,UAC3C,EAAE,IAAA,EAAM,cAAgB,EAAA,KAAA,EAAO,KAAM;AAAA,SACtC,CAAA;AAED,QAAA,IAAI,oBAAoB,KAAO,EAAA;AAC7B,UAAA,MAAM,KAAK,OAAQ,EAAA;AACnB,UAAA,MAAM,KAAK,SAAU,EAAA;AACrB,UAAA,MAAM,KAAK,YAAa,EAAA;AAAA,SAC1B,MAAA,IAAW,oBAAoB,KAAO,EAAA;AACpC,UAAA,MAAM,KAAK,OAAQ,EAAA;AAAA,SACrB,MAAA,IAAW,oBAAoB,OAAS,EAAA;AACtC,UAAA,MAAM,KAAK,SAAU,EAAA;AAAA,SACvB,MAAA,IAAW,oBAAoB,UAAY,EAAA;AACzC,UAAA,MAAM,KAAK,YAAa,EAAA;AAAA;AAC1B,OACK,MAAA;AACL,QAAA,IAAI,YAAY,KAAO,EAAA;AACrB,UAAA,MAAM,KAAK,OAAQ,EAAA;AAAA,SACrB,MAAA,IAAW,YAAY,OAAS,EAAA;AAC9B,UAAA,MAAM,KAAK,SAAU,EAAA;AAAA,SACvB,MAAA,IAAW,YAAY,UAAY,EAAA;AACjC,UAAA,MAAM,KAAK,YAAa,EAAA;AAAA,SACnB,MAAA;AACL,UAAK,IAAA,CAAA,KAAA,CAAM,CAAoB,iBAAA,EAAA,OAAO,CAAE,CAAA,CAAA;AACxC,UAAA,OAAO,WAAY,CAAA,OAAA;AAAA;AACrB;AAGF,MAAA,OAAO,WAAY,CAAA,OAAA;AAAA,aACZ,KAAO,EAAA;AACd,MAAK,IAAA,CAAA,KAAA,CAAM,sBAAsB,KAAiB,YAAA,KAAA,GAAQ,MAAM,OAAU,GAAA,MAAA,CAAO,KAAK,CAAC,CAAE,CAAA,CAAA;AACzF,MAAA,OAAO,WAAY,CAAA,OAAA;AAAA;AACrB;AACF;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAc,OAAyB,GAAA;AACrC,IAAA,IAAA,CAAK,KAAK,sCAAsC,CAAA;AAEhD,IAAA,MAAM,IAAO,GAAA,MAAM,GAAI,CAAA,KAAA,CAAM,mBAAmB,CAAA;AAChD,IAAM,MAAA,GAAA,GAAM,MAAM,GAAA,CAAI,QAAS,CAAA;AAAA,MAC7B,MAAMC,YAAa,CAAA,MAAA;AAAA,MACnB,IAAM,EAAA,KAAA;AAAA,MACN,OAAS,EAAA,kBAAA;AAAA,MACT,QAAA,EAAU,CAAC,KAAU,KAAA;AACnB,QAAA,IAAI,KAAM,CAAA,KAAK,CAAK,IAAA,KAAA,GAAQ,CAAG,EAAA;AAC7B,UAAO,OAAA,0BAAA;AAAA;AAET,QAAO,OAAA,IAAA;AAAA;AACT,KACD,CAAA;AAED,IAAA,MAAM,QAAW,GAAA,MAAM,GAAI,CAAA,OAAA,CAAQ,wBAAwB,CAAA;AAE3D,IAAA,MAAM,aAAgB,GAAA,MAAM,GAAI,CAAA,MAAA,CAAO,6BAA+B,EAAA;AAAA,MACpE,KAAA;AAAA,MACA,OAAA;AAAA,MACA,MAAA;AAAA,MACA,QAAA;AAAA,MACA;AAAA,KACD,CAAA;AAED,IAAA,MAAM,SAAY,GAAA,MAAM,GAAI,CAAA,WAAA,CAAY,0CAA4C,EAAA;AAAA,MAClF,YAAA;AAAA,MACA,YAAA;AAAA,MACA,KAAA;AAAA,MACA,QAAA;AAAA,MACA,MAAA;AAAA,MACA,IAAA;AAAA,MACA,MAAA;AAAA,MACA;AAAA,KACD,CAAA;AAED,IAAA,IAAA,CAAK,IAAK,EAAA;AACV,IAAA,IAAA,CAAK,QAAQ,kBAAkB,CAAA;AAC/B,IAAA,IAAA,CAAK,IAAK,EAAA;AACV,IAAA,IAAA,CAAK,KAAK,CAASF,MAAAA,EAAAA,MAAAA,CAAM,IAAK,CAAA,IAAI,CAAC,CAAE,CAAA,CAAA;AACrC,IAAA,IAAA,CAAK,KAAK,CAAQA,KAAAA,EAAAA,MAAAA,CAAM,IAAK,CAAA,GAAG,CAAC,CAAE,CAAA,CAAA;AACnC,IAAK,IAAA,CAAA,IAAA,CAAK,CAAc,WAAA,EAAA,QAAA,GAAWA,MAAM,CAAA,KAAA,CAAM,KAAK,CAAA,GAAIA,MAAM,CAAA,GAAA,CAAI,IAAI,CAAC,CAAE,CAAA,CAAA;AACzE,IAAA,IAAA,CAAK,KAAK,CAAmBA,gBAAAA,EAAAA,MAAAA,CAAM,IAAK,CAAA,aAAa,CAAC,CAAE,CAAA,CAAA;AACxD,IAAA,IAAA,CAAK,IAAK,CAAA,CAAA,WAAA,EAAc,SAAU,CAAA,GAAA,CAAI,CAAC,CAAMA,KAAAA,MAAAA,CAAM,IAAK,CAAA,CAAC,CAAC,CAAA,CAAE,IAAK,CAAA,IAAI,CAAC,CAAE,CAAA,CAAA;AACxE,IAAA,IAAA,CAAK,IAAK,EAAA;AAAA;AACZ;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAc,SAA2B,GAAA;AACvC,IAAA,IAAA,CAAK,KAAK,yBAAyB,CAAA;AAGnC,IAAM,MAAA,KAAA,GAAQ,IAAI,WAAY,CAAA,CAAC,MAAM,MAAQ,EAAA,OAAA,EAAS,MAAM,CAAC,CAAA;AAE7D,IAAA,KAAA,CAAM,OAAQ,CAAA;AAAA,MACZ,CAAC,CAAA,EAAG,UAAY,EAAA,kBAAA,EAAoB,OAAO,CAAA;AAAA,MAC3C,CAAC,CAAA,EAAG,YAAc,EAAA,kBAAA,EAAoB,MAAM,CAAA;AAAA,MAC5C,CAAC,CAAA,EAAG,aAAe,EAAA,iBAAA,EAAmB,QAAQ;AAAA,KAC/C,CAAA;AAED,IAAA,IAAA,CAAK,IAAK,EAAA;AACV,IAAA,KAAA,CAAM,MAAO,EAAA;AACb,IAAA,IAAA,CAAK,IAAK,EAAA;AAGV,IAAA,MAAM,KAAQ,GAAA;AAAA,MACZ,EAAE,EAAI,EAAA,CAAA,EAAG,IAAM,EAAA,UAAA,EAAY,OAAO,kBAAoB,EAAA,IAAA,EAAM,OAAS,EAAA,MAAA,EAAQ,IAAK,EAAA;AAAA,MAClF,EAAE,EAAI,EAAA,CAAA,EAAG,IAAM,EAAA,YAAA,EAAc,OAAO,kBAAoB,EAAA,IAAA,EAAM,MAAQ,EAAA,MAAA,EAAQ,KAAM,EAAA;AAAA,MACpF,EAAE,EAAI,EAAA,CAAA,EAAG,IAAM,EAAA,aAAA,EAAe,OAAO,iBAAmB,EAAA,IAAA,EAAM,QAAU,EAAA,MAAA,EAAQ,IAAK;AAAA,KACvF;AAEA,IAAM,MAAA,WAAA,GAAc,YAAY,WAAY,CAAA,KAAA,EAAO,CAAC,IAAM,EAAA,MAAA,EAAQ,OAAS,EAAA,MAAM,CAAG,EAAA;AAAA,MAClF,KAAO,EAAA;AAAA,QACL,IAAA,EAAM,CAAC,MAAM,CAAA;AAAA,QACb,MAAA,EAAQ,CAAC,MAAM;AAAA;AACjB,KACD,CAAA;AAED,IAAA,IAAA,CAAK,IAAK,EAAA;AACV,IAAA,WAAA,CAAY,MAAO,EAAA;AACnB,IAAA,IAAA,CAAK,IAAK,EAAA;AAAA;AACZ;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAc,YAA8B,GAAA;AAC1C,IAAA,IAAA,CAAK,KAAK,gCAAgC,CAAA;AAG1C,IAAA,MAAM,KAAQ,GAAA,GAAA;AACd,IAAM,MAAA,GAAA,GAAM,IAAI,WAAA,CAAY,KAAK,CAAA;AAEjC,IAAA,KAAA,IAAS,CAAI,GAAA,CAAA,EAAG,CAAK,IAAA,KAAA,EAAO,CAAK,EAAA,EAAA;AAC/B,MAAA,GAAA,CAAI,OAAO,CAAC,CAAA;AACZ,MAAM,MAAA,IAAA,CAAK,MAAM,EAAE,CAAA;AAAA;AAGrB,IAAA,GAAA,CAAI,IAAK,EAAA;AACT,IAAA,IAAA,CAAK,IAAK,EAAA;AAGV,IAAA,IAAA,CAAK,KAAK,yCAAyC,CAAA;AAEnD,IAAM,MAAA,QAAA,GAAW,YAAY,cAAe,EAAA;AAE5C,IAAM,MAAA,IAAA,GAAO,SAAS,MAAO,CAAA,GAAA,EAAK,GAAG,EAAE,IAAA,EAAM,UAAU,CAAA;AACvD,IAAM,MAAA,IAAA,GAAO,SAAS,MAAO,CAAA,GAAA,EAAK,GAAG,EAAE,IAAA,EAAM,UAAU,CAAA;AACvD,IAAM,MAAA,IAAA,GAAO,SAAS,MAAO,CAAA,GAAA,EAAK,GAAG,EAAE,IAAA,EAAM,UAAU,CAAA;AAEvD,IAAA,KAAA,IAAS,CAAI,GAAA,CAAA,EAAG,CAAK,IAAA,GAAA,EAAK,CAAK,EAAA,EAAA;AAC7B,MAAA,IAAA,CAAK,MAAO,CAAA,CAAA,EAAG,EAAE,IAAA,EAAM,UAAU,CAAA;AAEjC,MAAA,IAAI,KAAK,EAAI,EAAA;AACX,QAAA,IAAA,CAAK,MAAO,CAAA,IAAA,CAAK,GAAI,CAAA,IAAA,CAAK,OAAO,CAAI,GAAA,EAAA,IAAM,GAAG,CAAA,EAAG,GAAG,CAAA,EAAG,EAAE,IAAA,EAAM,UAAU,CAAA;AAAA;AAG3E,MAAA,IAAI,KAAK,EAAI,EAAA;AACX,QAAA,IAAA,CAAK,MAAO,CAAA,IAAA,CAAK,GAAI,CAAA,IAAA,CAAK,OAAO,CAAI,GAAA,EAAA,IAAM,GAAG,CAAA,EAAG,GAAG,CAAA,EAAG,EAAE,IAAA,EAAM,UAAU,CAAA;AAAA;AAG3E,MAAM,MAAA,IAAA,CAAK,MAAM,EAAE,CAAA;AAAA;AAGrB,IAAA,QAAA,CAAS,IAAK,EAAA;AACd,IAAA,IAAA,CAAK,IAAK,EAAA;AAEV,IAAA,IAAA,CAAK,QAAQ,sCAAsC,CAAA;AAAA;AACrD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASQ,MAAM,EAA2B,EAAA;AACvC,IAAA,OAAO,IAAI,OAAQ,CAAA,CAAC,YAAY,UAAW,CAAA,OAAA,EAAS,EAAE,CAAC,CAAA;AAAA;AAE3D;AA3MU,eAAA,CAAA;AAAA,EAJP,MAAO,CAAA;AAAA,IACN,KAAO,EAAA,yBAAA;AAAA,IACP,WAAa,EAAA;AAAA,GACd;AAAA,CAAA,EAPU,WAQH,CAAA,SAAA,EAAA,SAAA,EAAA,CAAA,CAAA;AARG,WAAN,GAAA,eAAA,CAAA;AAAA,EAJN,OAAQ,CAAA;AAAA,IACP,IAAM,EAAA,MAAA;AAAA,IACN,WAAa,EAAA;AAAA,GACd;AAAA,CACY,EAAA,WAAA,CAAA;ACNA,IAAA,YAAA,GAAN,cAA2B,WAAY,CAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAyB5C,MAAa,OAA2B,GAAA;AACtC,IAAI,IAAA;AAEF,MAAA,MAAM,IAAO,GAAA,IAAA,CAAK,KAAM,CAAA,WAAA,CAAY,GAAG,CAAK,IAAA,OAAA;AAC5C,MAAM,MAAA,SAAA,GAAY,KAAK,KAAM,CAAA,SAAA,CAAU,WAAW,CAAM,KAAA,IAAA,IAAQ,KAAK,SAAa,IAAA,KAAA;AAClF,MAAA,MAAM,QAAS,IAAK,CAAA,KAAA,CAAM,UAAU,OAAO,CAAA,IAAgB,KAAK,KAAS,IAAA,OAAA;AAGzE,MAAI,IAAA,QAAA,GAAW,UAAU,IAAI,CAAA,CAAA,CAAA;AAE7B,MAAA,IAAI,SAAW,EAAA;AACb,QAAA,QAAA,GAAW,SAAS,WAAY,EAAA;AAAA;AAIlC,MAAI,IAAA,eAAA;AACJ,MAAA,QAAQ,KAAO;AAAA,QACb,KAAK,KAAA;AACH,UAAkBA,eAAAA,GAAAA,MAAAA,CAAM,IAAI,QAAQ,CAAA;AACpC,UAAA;AAAA,QACF,KAAK,OAAA;AACH,UAAkBA,eAAAA,GAAAA,MAAAA,CAAM,MAAM,QAAQ,CAAA;AACtC,UAAA;AAAA,QACF,KAAK,MAAA;AACH,UAAkBA,eAAAA,GAAAA,MAAAA,CAAM,KAAK,QAAQ,CAAA;AACrC,UAAA;AAAA,QACF,KAAK,QAAA;AACH,UAAkBA,eAAAA,GAAAA,MAAAA,CAAM,OAAO,QAAQ,CAAA;AACvC,UAAA;AAAA,QACF,KAAK,MAAA;AACH,UAAkBA,eAAAA,GAAAA,MAAAA,CAAM,KAAK,QAAQ,CAAA;AACrC,UAAA;AAAA,QACF;AACE,UAAkBA,eAAAA,GAAAA,MAAAA,CAAM,MAAM,QAAQ,CAAA;AAAA;AAI1C,MAAA,IAAA,CAAK,IAAK,EAAA;AACV,MAAA,IAAA,CAAK,KAAK,eAAe,CAAA;AACzB,MAAA,IAAA,CAAK,IAAK,EAAA;AAEV,MAAA,OAAO,WAAY,CAAA,OAAA;AAAA,aACZ,KAAO,EAAA;AACd,MAAK,IAAA,CAAA,KAAA,CAAM,sBAAsB,KAAiB,YAAA,KAAA,GAAQ,MAAM,OAAU,GAAA,MAAA,CAAO,KAAK,CAAC,CAAE,CAAA,CAAA;AACzF,MAAA,OAAO,WAAY,CAAA,OAAA;AAAA;AACrB;AAEJ;AAhEU,eAAA,CAAA;AAAA,EAJP,MAAO,CAAA;AAAA,IACN,KAAO,EAAA,iBAAA;AAAA,IACP,WAAa,EAAA;AAAA,GACd;AAAA,CAAA,EAPU,YAQH,CAAA,SAAA,EAAA,WAAA,EAAA,CAAA,CAAA;AAUA,eAAA,CAAA;AAAA,EALP,MAAO,CAAA;AAAA,IACN,KAAO,EAAA,qBAAA;AAAA,IACP,WAAa,EAAA,4DAAA;AAAA,IACb,YAAc,EAAA;AAAA,GACf;AAAA,CAAA,EAjBU,YAkBH,CAAA,SAAA,EAAA,OAAA,EAAA,CAAA,CAAA;AAlBG,YAAN,GAAA,eAAA,CAAA;AAAA,EAJN,OAAQ,CAAA;AAAA,IACP,IAAM,EAAA,OAAA;AAAA,IACN,WAAa,EAAA;AAAA,GACd;AAAA,CACY,EAAA,YAAA,CAAA;ACCA,IAAA,WAAA,GAAN,cAA0B,WAAY,CAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAY3C,YAAwC,QAA4B,EAAA;AAClE,IAAM,KAAA,EAAA;AACN,IAAA,IAAA,CAAK,QAAW,GAAA,QAAA;AAAA;AAClB;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAa,OAA2B,GAAA;AACtC,IAAI,IAAA;AACF,MAAA,MAAM,WAAc,GAAA,IAAA,CAAK,KAAM,CAAA,WAAA,CAAY,GAAG,CAAA;AAE9C,MAAQ,OAAA,CAAA,GAAA,CAAI,UAAU,WAAW,CAAA;AACjC,MAAA,IAAI,CAAC,WAAa,EAAA;AAChB,QAAA,IAAA,CAAK,MAAM,2BAA2B,CAAA;AACtC,QAAA,IAAA,CAAK,KAAK,EAAE,CAAA;AACZ,QAAA,IAAA,CAAK,KAAK,uBAAuB,CAAA;AACjC,QAAA,OAAO,WAAY,CAAA,OAAA;AAAA;AAGrB,MAAA,MAAM,OAAU,GAAA,IAAA,CAAK,QAAS,CAAA,GAAA,CAAI,WAAW,CAAA;AAE7C,MAAA,IAAI,CAAC,OAAS,EAAA;AACZ,QAAK,IAAA,CAAA,KAAA,CAAM,CAAY,SAAA,EAAA,WAAW,CAAc,YAAA,CAAA,CAAA;AAChD,QAAA,OAAO,WAAY,CAAA,OAAA;AAAA;AAGrB,MAAK,IAAA,CAAA,IAAA,CAAK,GAAG,OAAQ,CAAA,OAAA,EAAS,CAAK,EAAA,EAAA,OAAA,CAAQ,cAAe,EAAC,CAAE,CAAA,CAAA;AAC7D,MAAA,IAAA,CAAK,KAAK,EAAE,CAAA;AAIZ,MAAA,OAAO,WAAY,CAAA,OAAA;AAAA,aACZ,KAAO,EAAA;AACd,MAAK,IAAA,CAAA,KAAA,CAAM,sBAAsB,KAAiB,YAAA,KAAA,GAAQ,MAAM,OAAU,GAAA,MAAA,CAAO,KAAK,CAAC,CAAE,CAAA,CAAA;AACzF,MAAA,OAAO,WAAY,CAAA,OAAA;AAAA;AACrB;AAEJ;AApDa,WAAN,GAAA,eAAA,CAAA;AAAA,EAJN,OAAQ,CAAA;AAAA,IACP,IAAM,EAAA,MAAA;AAAA,IACN,WAAa,EAAA;AAAA,GACd,CAAA;AAAA,EAac,eAAA,CAAA,CAAA,EAAA,MAAA,CAAO,iBAAiB,CAAC,CAAA;AAAA,CAZ3B,EAAA,WAAA,CAAA;ACIA,IAAA,WAAA,GAAN,cAA0B,WAAY,CAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAY3C,YAAwC,QAA4B,EAAA;AAClE,IAAM,KAAA,EAAA;AACN,IAAA,IAAA,CAAK,QAAW,GAAA,QAAA;AAAA;AAClB;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAa,OAA2B,GAAA;AACtC,IAAI,IAAA;AACF,MAAM,MAAA,QAAA,GAAW,IAAK,CAAA,QAAA,CAAS,MAAO,EAAA;AAEtC,MAAA,IAAA,CAAK,IAAKA,CAAAA,MAAAA,CAAM,IAAK,CAAA,qBAAqB,CAAC,CAAA;AAC3C,MAAA,IAAA,CAAK,KAAK,EAAE,CAAA;AAEZ,MAAI,IAAA,QAAA,CAAS,WAAW,CAAG,EAAA;AACzB,QAAA,IAAA,CAAK,KAAK,2BAA2B,CAAA;AACrC,QAAA,OAAO,WAAY,CAAA,OAAA;AAAA;AAIrB,MAAA,MAAM,gBAAiD,EAAC;AAExD,MAAS,QAAA,CAAA,OAAA,CAAQ,CAAC,OAAY,KAAA;AAC5B,QAAM,MAAA,IAAA,GAAO,QAAQ,OAAQ,EAAA;AAC7B,QAAM,MAAA,QAAA,GAAW,IAAK,CAAA,QAAA,CAAS,GAAG,CAAA,GAAI,KAAK,KAAM,CAAA,GAAG,CAAE,CAAA,CAAC,CAAI,GAAA,SAAA;AAE3D,QAAI,IAAA,CAAC,aAAc,CAAA,QAAQ,CAAG,EAAA;AAC5B,UAAc,aAAA,CAAA,QAAQ,IAAI,EAAC;AAAA;AAG7B,QAAc,aAAA,CAAA,QAAQ,CAAE,CAAA,IAAA,CAAK,OAAO,CAAA;AAAA,OACrC,CAAA;AAGD,MAAA,KAAA,MAAW,CAAC,QAAU,EAAA,aAAa,KAAK,MAAO,CAAA,OAAA,CAAQ,aAAa,CAAG,EAAA;AACrE,QAAA,IAAA,CAAK,IAAKA,CAAAA,MAAAA,CAAM,IAAK,CAAA,CAAA,EAAG,SAAS,MAAO,CAAA,CAAC,CAAE,CAAA,WAAA,KAAgB,QAAS,CAAA,KAAA,CAAM,CAAC,CAAC,YAAY,CAAC,CAAA;AAEzF,QAAA,MAAM,QAAQ,IAAI,WAAA,CAAY,CAAC,SAAW,EAAA,SAAA,EAAW,aAAa,CAAC,CAAA;AAGnE,QAAc,aAAA,CAAA,IAAA,CAAK,CAAC,CAAA,EAAG,CAAM,KAAA,CAAA,CAAE,OAAQ,EAAA,CAAE,aAAc,CAAA,CAAA,CAAE,OAAQ,EAAC,CAAC,CAAA;AAEnE,QAAc,aAAA,CAAA,OAAA,CAAQ,CAAC,OAAY,KAAA;AAEjC,UAAA,MAAM,WAAW,OAAQ,CAAA,WAAA,CAAY,sBAAsB,OAAQ,CAAA,WAAW,KAAK,EAAC;AACpF,UAAA,MAAM,UAAU,QAAS,CAAA,OAAA,GAAU,SAAS,OAAQ,CAAA,IAAA,CAAK,IAAI,CAAI,GAAA,EAAA;AAGjE,UAAA,IAAI,SAAS,MAAQ,EAAA;AACnB,YAAA;AAAA;AAGF,UAAA,KAAA,CAAM,OAAO,CAACA,MAAAA,CAAM,KAAM,CAAA,OAAA,CAAQ,SAAS,CAAA,EAAG,OAAUA,GAAAA,MAAAA,CAAM,OAAO,OAAO,CAAA,GAAI,IAAI,OAAQ,CAAA,cAAA,EAAgB,CAAC,CAAA;AAAA,SAC9G,CAAA;AAED,QAAA,KAAA,CAAM,MAAO,EAAA;AACb,QAAA,IAAA,CAAK,KAAK,EAAE,CAAA;AAAA;AAGd,MAAA,OAAO,WAAY,CAAA,OAAA;AAAA,aACZ,KAAO,EAAA;AACd,MAAK,IAAA,CAAA,KAAA,CAAM,sBAAsB,KAAiB,YAAA,KAAA,GAAQ,MAAM,OAAU,GAAA,MAAA,CAAO,KAAK,CAAC,CAAE,CAAA,CAAA;AACzF,MAAA,OAAO,WAAY,CAAA,OAAA;AAAA;AACrB;AAEJ;AAhFa,WAAN,GAAA,eAAA,CAAA;AAAA,EALN,OAAQ,CAAA;AAAA,IACP,IAAM,EAAA,MAAA;AAAA,IACN,WAAa,EAAA,6BAAA;AAAA,IACb,OAAA,EAAS,CAAC,UAAU;AAAA,GACrB,CAAA;AAAA,EAac,eAAA,CAAA,CAAA,EAAAG,MAAOC,CAAAA,gBAAAA,CAAiB,CAAC,CAAA;AAAA,CAZ3B,EAAA,WAAA,CAAA;ACEA,IAAA,WAAA,GAAN,cAA0B,WAAY,CAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAwC3C,YAAsC,aAA+B,EAAA;AACnE,IAAM,KAAA,EAAA;AACN,IAAA,IAAA,CAAK,aAAgB,GAAA,aAAA;AAAA;AACvB;AAAA;AAAA;AAAA;AAAA,EAMA,MAAa,OAA2B,GAAA;AACtC,IAAI,IAAA;AAEF,MAAA,MAAM,OAAO,IAAK,CAAA,KAAA,CAAM,WAAY,CAAA,GAAG,KAAK,IAAK,CAAA,WAAA;AAEjD,MAAA,IAAI,CAAC,IAAM,EAAA;AAET,QAAA,MAAM,SAAY,GAAA,MAAM,GAAI,CAAA,KAAA,CAAM,mCAAmC,CAAA;AACrE,QAAA,IAAI,CAAC,SAAW,EAAA;AACd,UAAA,IAAA,CAAK,MAAM,2BAA2B,CAAA;AACtC,UAAA,OAAO,WAAY,CAAA,OAAA;AAAA;AAErB,QAAA,IAAA,CAAK,WAAc,GAAA,SAAA;AAAA,OACd,MAAA;AACL,QAAA,IAAA,CAAK,WAAc,GAAA,IAAA;AAAA;AAIrB,MAAA,IAAI,cAAe,IAAK,CAAA,KAAA,CAAM,SAAU,CAAA,aAAa,KAAgB,IAAK,CAAA,kBAAA;AAC1E,MAAA,IAAI,CAAC,WAAa,EAAA;AAChB,QAAA,WAAA,GAAc,MAAM,GAAI,CAAA,KAAA;AAAA,UACtB,sCAAA;AAAA,UACA;AAAA,SACF;AACA,QAAA,IAAA,CAAK,kBAAqB,GAAA,WAAA;AAAA;AAI5B,MAAA,MAAM,SAAY,GAAA,IAAA,CAAK,YAAa,CAAA,IAAA,CAAK,WAAW,CAAA;AAGpD,MAAA,MAAM,YAAa,IAAK,CAAA,KAAA,CAAM,SAAU,CAAA,KAAK,KAAgB,IAAK,CAAA,SAAA;AAGlE,MAAA,MAAM,UAAkB,GAAA,IAAA,CAAA,IAAA;AAAA,QACtB,QAAQ,GAAI,EAAA;AAAA,QACZ,SAAA;AAAA,QACA,CAAG,EAAA,IAAA,CAAK,WAAY,CAAA,IAAA,CAAK,WAAW,CAAC,CAAA,GAAA;AAAA,OACvC;AAGA,MAAO,IAAA,EAAA,CAAA,UAAA,CAAW,UAAU,CAAG,EAAA;AAC7B,QAAA,MAAM,YAAY,MAAM,GAAA,CAAI,QAAQ,CAAQ,KAAA,EAAA,UAAU,+BAA+B,KAAK,CAAA;AAC1F,QAAA,IAAI,CAAC,SAAW,EAAA;AACd,UAAA,IAAA,CAAK,KAAK,6BAA6B,CAAA;AACvC,UAAA,OAAO,WAAY,CAAA,OAAA;AAAA;AACrB;AAGF,MAAA,MAAM,OAAU,GAAA,IAAA,CAAK,aAAc,CAAA,QAAA,CAAS,WAAW,UAAY,EAAA;AAAA,QACjE,MAAM,IAAK,CAAA,WAAA;AAAA,QACX,SAAA;AAAA,QACA,aAAa,IAAK,CAAA,WAAA;AAAA,QAClB;AAAA,OACD,CAAA;AAED,MAAA,IAAI,OAAS,EAAA;AACX,QAAK,IAAA,CAAA,OAAA;AAAA,UACH,CAAA,QAAA,EAAWJ,MAAM,CAAA,KAAA,CAAM,IAAK,CAAA,WAAW,CAAC,CAA4BA,yBAAAA,EAAAA,MAAAA,CAAM,IAAK,CAAA,UAAU,CAAC,CAAA;AAAA,SAC5F;AACA,QAAA,OAAO,WAAY,CAAA,OAAA;AAAA,OACd,MAAA;AACL,QAAA,IAAA,CAAK,KAAM,CAAA,CAAA,yBAAA,EAA4B,IAAK,CAAA,WAAW,CAAE,CAAA,CAAA;AACzD,QAAA,OAAO,WAAY,CAAA,OAAA;AAAA;AACrB,aACO,KAAO,EAAA;AACd,MAAK,IAAA,CAAA,KAAA,CAAM,sBAAsB,KAAiB,YAAA,KAAA,GAAQ,MAAM,OAAU,GAAA,MAAA,CAAO,KAAK,CAAC,CAAE,CAAA,CAAA;AACzF,MAAA,OAAO,WAAY,CAAA,OAAA;AAAA;AACrB;AACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASQ,aAAa,IAAsB,EAAA;AACzC,IACE,OAAA,IAAA,CACG,MAAM,GAAG,CAAA,CACT,IAAI,CAAC,IAAA,KAAS,KAAK,MAAO,CAAA,CAAC,EAAE,WAAY,EAAA,GAAI,KAAK,KAAM,CAAA,CAAC,CAAC,CAC1D,CAAA,IAAA,CAAK,EAAE,CAAI,GAAA,SAAA;AAAA;AAElB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASQ,YAAY,IAAsB,EAAA;AACxC,IAAA,OAAO,IAAK,CAAA,OAAA,CAAQ,GAAK,EAAA,GAAG,CAAI,GAAA,UAAA;AAAA;AAEpC;AAzIU,eAAA,CAAA;AAAA,EALP,QAAS,CAAA;AAAA,IACR,IAAM,EAAA,MAAA;AAAA,IACN,WAAa,EAAA,2CAAA;AAAA,IACb,QAAU,EAAA;AAAA,GACX;AAAA,CAAA,EARU,WASH,CAAA,SAAA,EAAA,aAAA,EAAA,CAAA,CAAA;AAUA,eAAA,CAAA;AAAA,EALP,MAAO,CAAA;AAAA,IACN,KAAO,EAAA,uBAAA;AAAA,IACP,WAAa,EAAA,iDAAA;AAAA,IACb,YAAc,EAAA;AAAA,GACf;AAAA,CAAA,EAlBU,WAmBH,CAAA,SAAA,EAAA,WAAA,EAAA,CAAA,CAAA;AASA,eAAA,CAAA;AAAA,EAJP,MAAO,CAAA;AAAA,IACN,KAAO,EAAA,6BAAA;AAAA,IACP,WAAa,EAAA;AAAA,GACd;AAAA,CAAA,EA3BU,WA4BH,CAAA,SAAA,EAAA,oBAAA,EAAA,CAAA,CAAA;AA5BG,WAAN,GAAA,eAAA,CAAA;AAAA,EAJN,OAAQ,CAAA;AAAA,IACP,IAAM,EAAA,cAAA;AAAA,IACN,WAAa,EAAA;AAAA,GACd,CAAA;AAAA,EAyCc,eAAA,CAAA,CAAA,EAAAG,MAAO,CAAA,cAAA,CAAe,CAAC,CAAA;AAAA,CAxCzB,EAAA,WAAA,CAAA;ACJA,IAAA,eAAA,GAAN,cAA8B,WAAY,CAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAsB/C,YAAyC,SAA8B,EAAA;AACrE,IAAM,KAAA,EAAA;AACN,IAAA,IAAA,CAAK,SAAY,GAAA,SAAA;AAAA;AACnB;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAa,OAA2B,GAAA;AACtC,IAAI,IAAA;AACF,MAAA,MAAM,SAAS,IAAK,CAAA,KAAA,CAAM,WAAY,CAAA,GAAG,KAAK,IAAK,CAAA,MAAA;AAEnD,MAAA,QAAQ,MAAQ;AAAA,QACd,KAAK,MAAA;AACH,UAAA,OAAO,KAAK,SAAU,EAAA;AAAA,QACxB,KAAK,OAAA;AACH,UAAA,OAAO,KAAK,cAAe,EAAA;AAAA,QAC7B,KAAK,MAAA;AACH,UAAA,OAAO,KAAK,aAAc,EAAA;AAAA,QAC5B;AACE,UAAK,IAAA,CAAA,KAAA,CAAM,CAAmB,gBAAA,EAAA,MAAM,CAAE,CAAA,CAAA;AACtC,UAAA,IAAA,CAAK,KAAK,sCAAsC,CAAA;AAChD,UAAA,OAAO,WAAY,CAAA,OAAA;AAAA;AACvB,aACO,KAAO,EAAA;AACd,MAAK,IAAA,CAAA,KAAA,CAAM,sBAAsB,KAAiB,YAAA,KAAA,GAAQ,MAAM,OAAU,GAAA,MAAA,CAAO,KAAK,CAAC,CAAE,CAAA,CAAA;AACzF,MAAA,OAAO,WAAY,CAAA,OAAA;AAAA;AACrB;AACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,MAAc,SAA6B,GAAA;AACzC,IAAM,MAAA,KAAA,GAAQ,IAAK,CAAA,SAAA,CAAU,QAAS,EAAA;AAEtC,IAAI,IAAA,KAAA,CAAM,WAAW,CAAG,EAAA;AACtB,MAAA,IAAA,CAAK,KAAK,qBAAqB,CAAA;AAC/B,MAAA,OAAO,WAAY,CAAA,OAAA;AAAA;AAGrB,IAAM,MAAA,KAAA,GAAQ,IAAI,WAAY,CAAA,CAAC,WAAW,UAAY,EAAA,UAAA,EAAY,UAAU,CAAC,CAAA;AAE7E,IAAM,KAAA,CAAA,OAAA,CAAQ,CAAC,IAAS,KAAA;AACtB,MAAA,MAAM,UAAa,GAAA,IAAA,CAAK,gBAAiB,CAAA,IAAA,CAAK,UAAU,CAAA;AACxD,MAAA,MAAM,UAAU,IAAK,CAAA,OAAA,GAAU,IAAK,CAAA,OAAA,CAAQ,gBAAmB,GAAA,OAAA;AAC/D,MAAA,MAAM,UAAU,IAAK,CAAA,OAAA,GAAU,IAAK,CAAA,OAAA,CAAQ,gBAAmB,GAAA,SAAA;AAE/D,MAAM,KAAA,CAAA,MAAA,CAAO,CAAC,IAAK,CAAA,OAAA,CAAQ,SAAW,EAAA,UAAA,EAAY,OAAS,EAAA,OAAO,CAAC,CAAA;AAAA,KACpE,CAAA;AAED,IAAA,IAAA,CAAK,IAAK,EAAA;AACV,IAAA,KAAA,CAAM,MAAO,EAAA;AACb,IAAA,IAAA,CAAK,IAAK,EAAA;AAEV,IAAA,OAAO,WAAY,CAAA,OAAA;AAAA;AACrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,MAAc,cAAkC,GAAA;AAC9C,IAAA,IAAA,CAAK,UAAU,KAAM,EAAA;AACrB,IAAA,IAAA,CAAK,QAAQ,oBAAoB,CAAA;AACjC,IAAA,OAAO,WAAY,CAAA,OAAA;AAAA;AACrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,MAAc,aAAiC,GAAA;AAC7C,IAAA,IAAA,CAAK,UAAU,IAAK,EAAA;AACpB,IAAA,IAAA,CAAK,QAAQ,oBAAoB,CAAA;AACjC,IAAA,OAAO,WAAY,CAAA,OAAA;AAAA;AACrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASQ,iBAAiB,UAAyB,EAAA;AArIpD,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA;AAsII,IAAM,MAAA,MAAA,GAAA,CAAS,EAAW,GAAA,UAAA,CAAA,MAAA,KAAX,IAAqB,GAAA,EAAA,GAAA,GAAA;AACpC,IAAM,MAAA,IAAA,GAAA,CAAO,EAAW,GAAA,UAAA,CAAA,IAAA,KAAX,IAAmB,GAAA,EAAA,GAAA,GAAA;AAChC,IAAM,MAAA,UAAA,GAAA,CAAa,EAAW,GAAA,UAAA,CAAA,UAAA,KAAX,IAAyB,GAAA,EAAA,GAAA,GAAA;AAC5C,IAAM,MAAA,KAAA,GAAA,CAAQ,EAAW,GAAA,UAAA,CAAA,KAAA,KAAX,IAAoB,GAAA,EAAA,GAAA,GAAA;AAClC,IAAM,MAAA,SAAA,GAAA,CAAY,EAAW,GAAA,UAAA,CAAA,SAAA,KAAX,IAAwB,GAAA,EAAA,GAAA,GAAA;AAE1C,IAAO,OAAA,CAAA,EAAG,MAAM,CAAI,CAAA,EAAA,IAAI,IAAI,UAAU,CAAA,CAAA,EAAI,KAAK,CAAA,CAAA,EAAI,SAAS,CAAA,CAAA;AAAA;AAEhE;AApHU,eAAA,CAAA;AAAA,EALP,QAAS,CAAA;AAAA,IACR,IAAM,EAAA,QAAA;AAAA,IACN,WAAa,EAAA,gDAAA;AAAA,IACb,QAAU,EAAA;AAAA,GACX;AAAA,CAAA,EARU,eASH,CAAA,SAAA,EAAA,QAAA,EAAA,CAAA,CAAA;AATG,eAAN,GAAA,eAAA,CAAA;AAAA,EAJN,OAAQ,CAAA;AAAA,IACP,IAAM,EAAA,UAAA;AAAA,IACN,WAAa,EAAA;AAAA,GACd,CAAA;AAAA,EAuBc,eAAA,CAAA,CAAA,EAAAA,MAAO,CAAA,iBAAA,CAAkB,CAAC,CAAA;AAAA,CAtB5B,EAAA,eAAA,CAAA","file":"index.mjs","sourcesContent":["import type { IInput } from \"@pixielity/ts-types\"\n\n/**\n * Implementation of the IInput interface\n *\n * Parses command line arguments and provides access to them.\n */\nexport class Input implements IInput {\n  /**\n   * The command name\n   * @private\n   */\n  private commandName?: string\n\n  /**\n   * Map of argument names to values\n   * @private\n   */\n  private args: Record<string, string> = {}\n\n  /**\n   * Map of option names to values\n   * @private\n   */\n  private opts: Record<string, string | boolean> = {}\n\n  /**\n   * Creates a new Input instance\n   *\n   * @param {string[]} argv - The command line arguments\n   */\n  constructor(argv: string[]) {\n    this.parse(argv)\n  }\n\n  /**\n   * Gets the command name from the input\n   *\n   * @returns {string | undefined} The command name or undefined if not provided\n   */\n  public getCommandName(): string | undefined {\n    return this.commandName\n  }\n\n  /**\n   * Gets an argument value by name\n   *\n   * @param {string} name - The name of the argument\n   * @returns {string | undefined} The argument value or undefined if not provided\n   */\n  public getArgument(name: string): string | undefined {\n    return this.args[name]\n  }\n\n  /**\n   * Gets all arguments\n   *\n   * @returns {Record<string, string>} Map of argument names to values\n   */\n  public getArguments(): Record<string, string> {\n    return { ...this.args }\n  }\n\n  /**\n   * Gets an option value by name\n   *\n   * @param {string} name - The name of the option\n   * @returns {string | boolean | undefined} The option value or undefined if not provided\n   */\n  public getOption(name: string): string | boolean | undefined {\n    return this.opts[name]\n  }\n\n  /**\n   * Gets all options\n   *\n   * @returns {Record<string, string | boolean>} Map of option names to values\n   */\n  public getOptions(): Record<string, string | boolean> {\n    return { ...this.opts }\n  }\n\n  /**\n   * Checks if an option is set\n   *\n   * @param {string} name - The name of the option\n   * @returns {boolean} True if the option is set, false otherwise\n   */\n  public hasOption(name: string): boolean {\n    return name in this.opts\n  }\n\n  /**\n   * Parses the command line arguments\n   *\n   * @param {string[]} argv - The command line arguments\n   * @private\n   */\n  private parse(argv: string[]): void {\n    if (argv.length === 0) {\n      return\n    }\n\n    // First argument is the command name\n    this.commandName = argv[0]\n\n    let i = 1\n    let currentArgName = 0\n\n    while (i < argv.length) {\n      const arg = argv[i]\n\n      // Handle options (--option or -o)\n      if (arg.startsWith(\"--\")) {\n        const optName = arg.substring(2)\n\n        // Handle --option=value\n        if (optName.includes(\"=\")) {\n          const [name, value] = optName.split(\"=\", 2)\n          this.opts[name] = value\n        } else {\n          // Handle --option value or --option (boolean flag)\n          if (i + 1 < argv.length && !argv[i + 1].startsWith(\"-\")) {\n            this.opts[optName] = argv[i + 1]\n            i++\n          } else {\n            this.opts[optName] = true\n          }\n        }\n      } else if (arg.startsWith(\"-\")) {\n        const optName = arg.substring(1)\n\n        // Handle -o=value\n        if (optName.includes(\"=\")) {\n          const [name, value] = optName.split(\"=\", 2)\n          this.opts[name] = value\n        } else {\n          // Handle -o value or -o (boolean flag)\n          if (i + 1 < argv.length && !argv[i + 1].startsWith(\"-\")) {\n            this.opts[optName] = argv[i + 1]\n            i++\n          } else {\n            this.opts[optName] = true\n          }\n        }\n      } else {\n        // Handle positional arguments\n        this.args[currentArgName.toString()] = arg\n        currentArgName++\n      }\n\n      i++\n    }\n  }\n}\n","import chalk from \"chalk\"\nimport type { IOutput } from \"@pixielity/ts-types\"\n\n/**\n * Implementation of the IOutput interface\n *\n * Provides methods for writing to the console with formatting using chalk.\n */\nexport class Output implements IOutput {\n  /**\n   * Writes a message to the output\n   *\n   * @param {string} message - The message to write\n   */\n  public write(message: string): void {\n    process.stdout.write(message)\n  }\n\n  /**\n   * Writes a message to the output followed by a newline\n   *\n   * @param {string} message - The message to write\n   */\n  public writeln(message: string): void {\n    console.log(message)\n  }\n\n  /**\n   * Writes an error message to the output\n   *\n   * @param {string} message - The error message to write\n   */\n  public error(message: string): void {\n    console.error(chalk.bold.red(\"ERROR\") + \": \" + message)\n  }\n\n  /**\n   * Writes a success message to the output\n   *\n   * @param {string} message - The success message to write\n   */\n  public success(message: string): void {\n    console.log(chalk.bold.green(\"SUCCESS\") + \": \" + message)\n  }\n\n  /**\n   * Writes an info message to the output\n   *\n   * @param {string} message - The info message to write\n   */\n  public info(message: string): void {\n    console.log(chalk.bold.blue(\"INFO\") + \": \" + message)\n  }\n\n  /**\n   * Writes a warning message to the output\n   *\n   * @param {string} message - The warning message to write\n   */\n  public warning(message: string): void {\n    console.log(chalk.bold.yellow(\"WARNING\") + \": \" + message)\n  }\n\n  /**\n   * Writes a comment message to the output\n   *\n   * @param {string} message - The comment message to write\n   */\n  public comment(message: string): void {\n    console.log(chalk.gray(\"// \" + message))\n  }\n}\n","import \"reflect-metadata\"\n\n/**\n * Metadata key for arguments\n */\nexport const ARGUMENT_METADATA_KEY = Symbol(\"argument\")\n\n/**\n * Argument options interface\n */\nexport interface ArgumentOptions {\n  /**\n   * The name of the argument\n   */\n  name: string\n\n  /**\n   * The description of the argument\n   */\n  description?: string\n\n  /**\n   * The default value of the argument\n   */\n  defaultValue?: any\n\n  /**\n   * Whether the argument is required\n   */\n  required?: boolean\n\n  /**\n   * Whether the argument is an array (variadic)\n   */\n  isArray?: boolean\n}\n\n/**\n * Argument decorator\n *\n * Defines a command argument\n *\n * @param {ArgumentOptions} options - The argument options\n * @returns {PropertyDecorator} The property decorator\n */\nexport function Argument(options: ArgumentOptions): PropertyDecorator {\n  return (target: Object, propertyKey: string | symbol) => {\n    // Format the argument name for Commander\n    // If it's required, don't add brackets\n    // If it's an array, add ellipsis\n    let name = options.name\n    if (!options.required) {\n      name = `[${name}]`\n    } else {\n      name = `<${name}>`\n    }\n\n    if (options.isArray) {\n      name = `${name}...`\n    }\n\n    const metadata = {\n      name,\n      description: options.description || \"\",\n      defaultValue: options.defaultValue,\n      propertyKey,\n    }\n\n    // Get existing metadata or initialize empty array\n    const existingMetadata = Reflect.getMetadata(ARGUMENT_METADATA_KEY, target.constructor) || []\n\n    // Add new metadata\n    existingMetadata.push(metadata)\n\n    // Update metadata\n    Reflect.defineMetadata(ARGUMENT_METADATA_KEY, existingMetadata, target.constructor)\n  }\n}\n","import { Container } from \"inversify\"\nimport \"reflect-metadata\"\n\n/**\n * The global Inversify container instance\n */\nconst container = new Container({\n  defaultScope: \"Singleton\",\n})\n\nexport { container }\n","import 'reflect-metadata'\nimport { injectable } from 'inversify'\nimport { ICommand, ICommandOptions } from '@pixielity/ts-types'\n\nimport { container } from '../di/container'\n\n/**\n * Metadata key for command\n */\nexport const COMMAND_METADATA_KEY = Symbol('command')\n\n/**\n * Command decorator\n *\n * Marks a class as a console command and registers it with the container\n *\n * @param {CommandOptions} options - The command options\n * @returns {ClassDecorator} The class decorator\n */\nexport function Command(options: ICommandOptions): ClassDecorator {\n  return (target: Function): void => {\n    // Set default values for options\n    const commandOptions = {\n      ...options,\n      hidden: options.hidden ?? false,\n      injectable: options.injectable ?? true,\n      description: options.description || '',\n      shortcuts: options.shortcuts || [],\n    }\n\n    // Store command metadata with defaults applied\n    Reflect.defineMetadata(COMMAND_METADATA_KEY, commandOptions, target)\n\n    // Make the class injectable if not explicitly disabled\n    if (commandOptions.injectable) {\n      injectable()(target)\n\n      // Register the command with the container\n      // We use a multi-injection approach for commands\n      try {\n        container\n          .bind(ICommand.$)\n          .to(target as any)\n          .inSingletonScope()\n      } catch (error) {\n        // If the binding already exists, we can ignore the error\n        // This can happen during hot reloading\n      }\n    }\n  }\n}\n","import \"reflect-metadata\"\n\n/**\n * Metadata key for options\n */\nexport const OPTION_METADATA_KEY = Symbol(\"option\")\n\n/**\n * Option options interface\n */\nexport interface OptionOptions {\n  /**\n   * The flags for the option (e.g., \"-n, --name\")\n   */\n  flags: string\n\n  /**\n   * The description of the option\n   */\n  description?: string\n\n  /**\n   * The default value of the option\n   */\n  defaultValue?: any\n}\n\n/**\n * Option decorator\n *\n * Defines a command option\n *\n * @param {OptionOptions} options - The option options\n * @returns {PropertyDecorator} The property decorator\n */\nexport function Option(options: OptionOptions): PropertyDecorator {\n  return (target: Object, propertyKey: string | symbol) => {\n    const metadata = {\n      flags: options.flags,\n      description: options.description || \"\",\n      defaultValue: options.defaultValue,\n      propertyKey,\n    }\n\n    // Get existing metadata or initialize empty array\n    const existingMetadata = Reflect.getMetadata(OPTION_METADATA_KEY, target.constructor) || []\n\n    // Add new metadata\n    existingMetadata.push(metadata)\n\n    // Update metadata\n    Reflect.defineMetadata(OPTION_METADATA_KEY, existingMetadata, target.constructor)\n  }\n}\n","import type { ICommand } from '@pixielity/ts-types'\nimport type { IInput } from '@pixielity/ts-types'\nimport type { IOutput } from '@pixielity/ts-types'\nimport { Input } from '../input/input'\nimport { Output } from '../output/output'\nimport { COMMAND_METADATA_KEY } from '../decorators'\n\n/**\n * Abstract base class for console commands\n *\n * Provides common functionality for all commands.\n */\nexport abstract class BaseCommand implements ICommand {\n  /**\n   * Success exit code (0)\n   * @static\n   */\n  public static readonly SUCCESS = 0\n\n  /**\n   * Failure exit code (1)\n   * @static\n   */\n  public static readonly FAILURE = 1\n\n  /**\n   * Invalid input exit code (2)\n   * @static\n   */\n  public static readonly INVALID = 2\n\n  /**\n   * The name of the command\n   * @protected\n   */\n  protected name: string\n\n  /**\n   * The description of the command\n   * @protected\n   */\n  protected description: string\n\n  /**\n   * The input instance\n   * @protected\n   */\n  protected input: IInput\n\n  /**\n   * The output instance\n   * @protected\n   */\n  protected output: IOutput\n\n  /**\n   * Creates a new BaseCommand instance\n   *\n   * @param {string} [name] - The name of the command (optional)\n   * @param {string} [description] - The description of the command (optional)\n   */\n  constructor(name?: string, description = '') {\n    // If name is not provided, try to get it from metadata\n    if (name === undefined || name === null) {\n      const metadata = Reflect.getMetadata(COMMAND_METADATA_KEY, this.constructor)\n\n      if (metadata && metadata.name) {\n        this.name = metadata.name\n\n        // If description is empty, also get it from metadata\n        if (!description && metadata.description) {\n          this.description = metadata.description\n        } else {\n          this.description = description\n        }\n      } else {\n        throw new Error(\n          `Command name is required. Either provide it in the constructor or use the @Command decorator.`,\n        )\n      }\n    } else {\n      this.name = name\n      this.description = description\n    }\n\n    this.input = new Input([])\n    this.output = new Output()\n  }\n\n  /**\n   * Gets the name of the command\n   *\n   * @returns {string} The command name\n   */\n  public getName(): string {\n    return this.name\n  }\n\n  /**\n   * Gets the description of the command\n   *\n   * @returns {string} The command description\n   */\n  public getDescription(): string {\n    return this.description\n  }\n\n  /**\n   * Sets the input instance\n   *\n   * @param {IInput} input - The input instance\n   */\n  public setInput(input: IInput): void {\n    this.input = input\n  }\n\n  /**\n   * Gets the input instance\n   *\n   * @returns {IInput} The input instance\n   */\n  public getInput(): IInput {\n    return this.input\n  }\n\n  /**\n   * Sets the output instance\n   *\n   * @param {IOutput} output - The output instance\n   */\n  public setOutput(output: IOutput): void {\n    this.output = output\n  }\n\n  /**\n   * Gets the output instance\n   *\n   * @returns {IOutput} The output instance\n   */\n  public getOutput(): IOutput {\n    return this.output\n  }\n\n  /**\n   * Sets the command arguments\n   *\n   * @param {string[]} args - The command arguments\n   */\n  public setArguments(args: string[]): void {\n    // Access private property for initialization\n    args.forEach((arg, index) => {\n      ;(this.input as any).args[index.toString()] = arg\n    })\n  }\n\n  /**\n   * Sets the command options\n   *\n   * @param {Record<string, any>} options - The command options\n   */\n  public setOptions(options: Record<string, any>): void {\n    // Access private property for initialization\n    Object.entries(options).forEach(([key, value]) => {\n      ;(this.input as any).opts[key] = value\n    })\n  }\n\n  /**\n   * Configures the command with options and arguments\n   *\n   * This method should be overridden by subclasses to define\n   * command-specific options and arguments.\n   */\n  public configure(): void {\n    // To be implemented by subclasses\n  }\n\n  /**\n   * Executes the command\n   *\n   * This method must be implemented by subclasses to provide\n   * command-specific functionality.\n   *\n   * @returns {Promise<number | void>} The exit code or void\n   */\n  public abstract execute(): Promise<number | void>\n\n  /**\n   * Hook that runs before command execution\n   *\n   * @returns {Promise<boolean>} True if execution should continue, false to abort\n   */\n  public async beforeExecute(): Promise<boolean> {\n    return true\n  }\n\n  /**\n   * Hook that runs after command execution\n   *\n   * @param {number | void} exitCode - The exit code from the command\n   * @returns {Promise<void>}\n   */\n  public async afterExecute(exitCode: number | void): Promise<void> {\n    // Default implementation does nothing\n  }\n\n  /**\n   * Writes a line to the output\n   *\n   * @param {string} message - The message to write\n   */\n  protected line(message = ''): void {\n    this.output.writeln(message)\n  }\n\n  /**\n   * Writes an info message to the output\n   *\n   * @param {string} message - The message to write\n   */\n  protected info(message: string): void {\n    this.output.info(message)\n  }\n\n  /**\n   * Writes a success message to the output\n   *\n   * @param {string} message - The message to write\n   */\n  protected success(message: string): void {\n    this.output.success(message)\n  }\n\n  /**\n   * Writes an error message to the output\n   *\n   * @param {string} message - The message to write\n   */\n  protected error(message: string): void {\n    this.output.error(message)\n  }\n\n  /**\n   * Writes a warning message to the output\n   *\n   * @param {string} message - The message to write\n   */\n  protected warning(message: string): void {\n    this.output.warning(message)\n  }\n\n  /**\n   * Writes a comment message to the output\n   *\n   * @param {string} message - The message to write\n   */\n  protected comment(message: string): void {\n    this.output.comment(message)\n  }\n}\n","import inquirer from 'inquirer'\nimport { injectable } from 'inversify'\nimport type { IAsk } from '@pixielity/ts-types'\nimport type { IQuestion } from '@pixielity/ts-types'\nimport { QuestionType } from '@pixielity/ts-types'\n\n/**\n * Ask utility class\n *\n * Provides methods for asking questions in the console.\n */\n@injectable()\nexport class Ask implements IAsk {\n  /**\n   * Asks a single question\n   *\n   * @param {IQuestion} question - The question to ask\n   * @returns {Promise<any>} The answer\n   */\n  public async question(question: IQuestion): Promise<any> {\n    return Ask.question(question)\n  }\n\n  /**\n   * Asks multiple questions\n   *\n   * @param {IQuestion[]} questions - The questions to ask\n   * @returns {Promise<Record<string, any>>} The answers\n   */\n  public async questions(questions: IQuestion[]): Promise<Record<string, any>> {\n    return Ask.questions(questions)\n  }\n\n  /**\n   * Asks for input\n   *\n   * @param {string} message - The message to display\n   * @param {string} defaultValue - The default value\n   * @returns {Promise<string>} The input\n   */\n  public async input(message: string, defaultValue?: string): Promise<string> {\n    return Ask.input(message, defaultValue)\n  }\n\n  /**\n   * Asks for confirmation\n   *\n   * @param {string} message - The message to display\n   * @param {boolean} defaultValue - The default value\n   * @returns {Promise<boolean>} The confirmation\n   */\n  public async confirm(message: string, defaultValue = false): Promise<boolean> {\n    return Ask.confirm(message, defaultValue)\n  }\n\n  /**\n   * Asks for a selection from a list\n   *\n   * @param {string} message - The message to display\n   * @param {string[] | { name: string; value: any }[]} choices - The choices\n   * @param {any} defaultValue - The default value\n   * @returns {Promise<any>} The selection\n   */\n  public async select(\n    message: string,\n    choices: string[] | { name: string; value: any }[],\n    defaultValue?: any,\n  ): Promise<any> {\n    return Ask.select(message, choices, defaultValue)\n  }\n\n  /**\n   * Asks for multiple selections from a list\n   *\n   * @param {string} message - The message to display\n   * @param {string[] | { name: string; value: any }[]} choices - The choices\n   * @param {any[]} defaultValue - The default values\n   * @returns {Promise<any[]>} The selections\n   */\n  public async multiSelect(\n    message: string,\n    choices: string[] | { name: string; value: any }[],\n    defaultValue?: any[],\n  ): Promise<any[]> {\n    return Ask.multiSelect(message, choices, defaultValue)\n  }\n\n  /**\n   * Asks for a password\n   *\n   * @param {string} message - The message to display\n   * @returns {Promise<string>} The password\n   */\n  public async password(message: string): Promise<string> {\n    return Ask.password(message)\n  }\n\n  /**\n   * Asks a single question\n   *\n   * @param {IQuestion} question - The question to ask\n   * @returns {Promise<any>} The answer\n   */\n  public static async question(question: IQuestion): Promise<any> {\n    const answers = await inquirer.prompt([question])\n    return answers[question.name]\n  }\n\n  /**\n   * Asks multiple questions\n   *\n   * @param {IQuestion[]} questions - The questions to ask\n   * @returns {Promise<Record<string, any>>} The answers\n   */\n  public static async questions(questions: IQuestion[]): Promise<Record<string, any>> {\n    return inquirer.prompt(questions)\n  }\n\n  /**\n   * Asks for input\n   *\n   * @param {string} message - The message to display\n   * @param {string} defaultValue - The default value\n   * @returns {Promise<string>} The input\n   */\n  public static async input(message: string, defaultValue?: string): Promise<string> {\n    return Ask.question({\n      type: QuestionType.Input,\n      name: 'input',\n      message,\n      default: defaultValue,\n    })\n  }\n\n  /**\n   * Asks for confirmation\n   *\n   * @param {string} message - The message to display\n   * @param {boolean} defaultValue - The default value\n   * @returns {Promise<boolean>} The confirmation\n   */\n  public static async confirm(message: string, defaultValue = false): Promise<boolean> {\n    return Ask.question({\n      type: QuestionType.Confirm,\n      name: 'confirm',\n      message,\n      default: defaultValue,\n    })\n  }\n\n  /**\n   * Asks for a selection from a list\n   *\n   * @param {string} message - The message to display\n   * @param {string[] | { name: string; value: any }[]} choices - The choices\n   * @param {any} defaultValue - The default value\n   * @returns {Promise<any>} The selection\n   */\n  public static async select(\n    message: string,\n    choices: string[] | { name: string; value: any }[],\n    defaultValue?: any,\n  ): Promise<any> {\n    return Ask.question({\n      type: QuestionType.List,\n      name: 'select',\n      message,\n      choices,\n      default: defaultValue,\n    })\n  }\n\n  /**\n   * Asks for multiple selections from a list\n   *\n   * @param {string} message - The message to display\n   * @param {string[] | { name: string; value: any }[]} choices - The choices\n   * @param {any[]} defaultValue - The default values\n   * @returns {Promise<any[]>} The selections\n   */\n  public static async multiSelect(\n    message: string,\n    choices: string[] | { name: string; value: any }[],\n    defaultValue?: any[],\n  ): Promise<any[]> {\n    return Ask.question({\n      type: QuestionType.Checkbox,\n      name: 'multiSelect',\n      message,\n      choices,\n      default: defaultValue,\n    })\n  }\n\n  /**\n   * Asks for a password\n   *\n   * @param {string} message - The message to display\n   * @returns {Promise<string>} The password\n   */\n  public static async password(message: string): Promise<string> {\n    return Ask.question({\n      type: QuestionType.Password,\n      name: 'password',\n      message,\n    })\n  }\n}\n","import Table from 'cli-table3'\nimport { injectable } from \"inversify\"\nimport type { ITableOutput } from '@pixielity/ts-types'\nimport type { ITableStyle } from '@pixielity/ts-types'\n\n/**\n * Table utility class\n *\n * Provides methods for displaying tables in the console.\n */\n@injectable()\nexport class TableOutput implements ITableOutput {\n  /**\n   * The table instance\n   * @private\n   */\n  private table: Table.Table\n\n  /**\n   * Creates a new TableOutput instance\n   *\n   * @param {string[]} headers - The table headers\n   * @param {ITableStyle} style - The table style\n   */\n  constructor(headers: string[] = [], style?: ITableStyle) {\n    this.table = new Table({\n      head: headers,\n      ...style,\n    })\n  }\n\n  /**\n   * Adds a row to the table\n   *\n   * @param {any[]} row - The row data\n   * @returns {TableOutput} The table instance for chaining\n   */\n  public addRow(row: any[]): TableOutput {\n    this.table.push(row)\n    return this\n  }\n\n  /**\n   * Adds multiple rows to the table\n   *\n   * @param {any[][]} rows - The rows data\n   * @returns {TableOutput} The table instance for chaining\n   */\n  public addRows(rows: any[][]): TableOutput {\n    rows.forEach((row) => this.addRow(row))\n    return this\n  }\n\n  /**\n   * Renders the table to a string\n   *\n   * @returns {string} The rendered table\n   */\n  public toString(): string {\n    return this.table.toString()\n  }\n\n  /**\n   * Renders the table to the console\n   */\n  public render(): void {\n    console.log(this.toString())\n  }\n\n  /**\n   * Creates a new table from an array of objects\n   *\n   * @param {Record<string, any>[]} data - The data\n   * @param {string[]} columns - The columns to include\n   * @param {ITableStyle} style - The table style\n   * @returns {TableOutput} The table instance\n   */\n  public static fromObjects(data: Record<string, any>[], columns: string[], style?: ITableStyle): TableOutput {\n    const headers = columns\n    const table = new TableOutput(headers, style)\n\n    data.forEach((item) => {\n      const row = columns.map((column) => item[column] ?? \"\")\n      table.addRow(row)\n    })\n\n    return table\n  }\n}\n","import cliProgress from \"cli-progress\"\nimport chalk from \"chalk\"\nimport type { IProgressBar } from \"@pixielity/ts-types\"\nimport type { IProgressBarFormat } from \"@pixielity/ts-types\"\nimport { injectable } from \"inversify\"\n\n/**\n * Progress bar utility class\n *\n * Provides methods for displaying progress bars in the console.\n */\n@injectable()\nexport class ProgressBar implements IProgressBar {\n  /**\n   * The progress bar instance\n   * @private\n   */\n  private bar: cliProgress.SingleBar\n\n  /**\n   * Creates a new ProgressBar instance\n   *\n   * @param {number} total - The total value\n   * @param {IProgressBarFormat} format - The format options\n   */\n  constructor(total = 100, format?: IProgressBarFormat) {\n    this.bar = new cliProgress.SingleBar({\n      format: format?.format || `${chalk.cyan(\"{bar}\")} {percentage}% | ETA: {eta}s | {value}/{total}`,\n      barCompleteChar: format?.barCompleteChar || \"\\u2588\",\n      barIncompleteChar: format?.barIncompleteChar || \"\\u2591\",\n    })\n\n    this.bar.start(total, 0)\n  }\n\n  /**\n   * Updates the progress bar\n   *\n   * @param {number} value - The current value\n   * @param {Record<string, any>} payload - Additional payload data\n   */\n  public update(value: number, payload?: Record<string, any>): void {\n    this.bar.update(value, payload)\n  }\n\n  /**\n   * Increments the progress bar\n   *\n   * @param {number} value - The value to increment by\n   * @param {Record<string, any>} payload - Additional payload data\n   */\n  public increment(value = 1, payload?: Record<string, any>): void {\n    this.bar.increment(value, payload)\n  }\n\n  /**\n   * Stops the progress bar\n   */\n  public stop(): void {\n    this.bar.stop()\n  }\n\n  /**\n   * Creates a multi-bar container\n   *\n   * @returns {cliProgress.MultiBar} The multi-bar container\n   */\n  public static createMultiBar(): cliProgress.MultiBar {\n    return new cliProgress.MultiBar({\n      format: `${chalk.cyan(\"{bar}\")} {percentage}% | ETA: {eta}s | {value}/{total}`,\n      barCompleteChar: \"\\u2588\",\n      barIncompleteChar: \"\\u2591\",\n    })\n  }\n}\n","import chalk from 'chalk'\nimport { QuestionType } from '@pixielity/ts-types'\n\nimport { BaseCommand } from '../command/base-command'\nimport { Command } from '../decorators/command.decorator'\nimport { Option } from '../decorators/option.decorator'\n\nimport { Ask } from '../ui/ask'\nimport { TableOutput } from '../ui/table'\nimport { ProgressBar } from '../ui/progress-bar'\n\n/**\n * DemoCommand implementation\n *\n * Demonstrates UI features.\n */\n@Command({\n  name: 'demo',\n  description: 'Demonstrate UI features',\n})\nexport class DemoCommand extends BaseCommand {\n  /**\n   * The feature option\n   */\n  @Option({\n    flags: '-f, --feature <feature>',\n    description: 'The feature to demonstrate (ask, table, progress)',\n  })\n  private feature!: string\n\n  /**\n   * Executes the command\n   *\n   * @returns {Promise<number>} The exit code\n   */\n  public async execute(): Promise<number> {\n    try {\n      const feature = (this.input.getOption('feature') as string) || this.feature\n\n      if (!feature) {\n        // If no feature specified, ask for it\n        const selectedFeature = await Ask.select('Which feature would you like to see?', [\n          { name: 'Interactive prompts', value: 'ask' },\n          { name: 'Tables', value: 'table' },\n          { name: 'Progress bars', value: 'progress' },\n          { name: 'All features', value: 'all' },\n        ])\n\n        if (selectedFeature === 'all') {\n          await this.demoAsk()\n          await this.demoTable()\n          await this.demoProgress()\n        } else if (selectedFeature === 'ask') {\n          await this.demoAsk()\n        } else if (selectedFeature === 'table') {\n          await this.demoTable()\n        } else if (selectedFeature === 'progress') {\n          await this.demoProgress()\n        }\n      } else {\n        if (feature === 'ask') {\n          await this.demoAsk()\n        } else if (feature === 'table') {\n          await this.demoTable()\n        } else if (feature === 'progress') {\n          await this.demoProgress()\n        } else {\n          this.error(`Unknown feature: ${feature}`)\n          return BaseCommand.FAILURE\n        }\n      }\n\n      return BaseCommand.SUCCESS\n    } catch (error) {\n      this.error(`An error occurred: ${error instanceof Error ? error.message : String(error)}`)\n      return BaseCommand.FAILURE\n    }\n  }\n\n  /**\n   * Demonstrates the Ask utility\n   *\n   * @private\n   */\n  private async demoAsk(): Promise<void> {\n    this.info('Demonstrating interactive prompts...')\n\n    const name = await Ask.input(\"What's your name?\")\n    const age = await Ask.question({\n      type: QuestionType.Number,\n      name: 'age',\n      message: 'How old are you?',\n      validate: (input) => {\n        if (isNaN(input) || input < 0) {\n          return 'Please enter a valid age'\n        }\n        return true\n      },\n    })\n\n    const likesCli = await Ask.confirm('Do you like CLI tools?')\n\n    const favoriteColor = await Ask.select(\"What's your favorite color?\", [\n      'Red',\n      'Green',\n      'Blue',\n      'Yellow',\n      'Other',\n    ])\n\n    const languages = await Ask.multiSelect('Which programming languages do you know?', [\n      'JavaScript',\n      'TypeScript',\n      'PHP',\n      'Python',\n      'Ruby',\n      'Go',\n      'Java',\n      'C#',\n    ])\n\n    this.line()\n    this.success('Survey complete!')\n    this.line()\n    this.line(`Name: ${chalk.cyan(name)}`)\n    this.line(`Age: ${chalk.cyan(age)}`)\n    this.line(`Likes CLI: ${likesCli ? chalk.green('Yes') : chalk.red('No')}`)\n    this.line(`Favorite color: ${chalk.cyan(favoriteColor)}`)\n    this.line(`Languages: ${languages.map((l) => chalk.cyan(l)).join(', ')}`)\n    this.line()\n  }\n\n  /**\n   * Demonstrates the TableOutput utility\n   *\n   * @private\n   */\n  private async demoTable(): Promise<void> {\n    this.info('Demonstrating tables...')\n\n    // Simple table\n    const table = new TableOutput(['ID', 'Name', 'Email', 'Role'])\n\n    table.addRows([\n      [1, 'John Doe', 'john@example.com', 'Admin'],\n      [2, 'Jane Smith', 'jane@example.com', 'User'],\n      [3, 'Bob Johnson', 'bob@example.com', 'Editor'],\n    ])\n\n    this.line()\n    table.render()\n    this.line()\n\n    // Table from objects\n    const users = [\n      { id: 1, name: 'John Doe', email: 'john@example.com', role: 'Admin', active: true },\n      { id: 2, name: 'Jane Smith', email: 'jane@example.com', role: 'User', active: false },\n      { id: 3, name: 'Bob Johnson', email: 'bob@example.com', role: 'Editor', active: true },\n    ]\n\n    const objectTable = TableOutput.fromObjects(users, ['id', 'name', 'email', 'role'], {\n      style: {\n        head: ['cyan'],\n        border: ['gray'],\n      },\n    })\n\n    this.line()\n    objectTable.render()\n    this.line()\n  }\n\n  /**\n   * Demonstrates the ProgressBar utility\n   *\n   * @private\n   */\n  private async demoProgress(): Promise<void> {\n    this.info('Demonstrating progress bars...')\n\n    // Simple progress bar\n    const total = 100\n    const bar = new ProgressBar(total)\n\n    for (let i = 0; i <= total; i++) {\n      bar.update(i)\n      await this.sleep(20)\n    }\n\n    bar.stop()\n    this.line()\n\n    // Multi-bar\n    this.info('Demonstrating multiple progress bars...')\n\n    const multiBar = ProgressBar.createMultiBar()\n\n    const bar1 = multiBar.create(100, 0, { task: 'Task 1' })\n    const bar2 = multiBar.create(100, 0, { task: 'Task 2' })\n    const bar3 = multiBar.create(100, 0, { task: 'Task 3' })\n\n    for (let i = 0; i <= 100; i++) {\n      bar1.update(i, { task: 'Task 1' })\n\n      if (i >= 30) {\n        bar2.update(Math.min(Math.floor((i - 30) * 1.5), 100), { task: 'Task 2' })\n      }\n\n      if (i >= 60) {\n        bar3.update(Math.min(Math.floor((i - 60) * 2.5), 100), { task: 'Task 3' })\n      }\n\n      await this.sleep(30)\n    }\n\n    multiBar.stop()\n    this.line()\n\n    this.success('Progress bar demonstration complete!')\n  }\n\n  /**\n   * Sleeps for the specified number of milliseconds\n   *\n   * @param {number} ms - The number of milliseconds to sleep\n   * @returns {Promise<void>} A promise that resolves after the specified time\n   * @private\n   */\n  private sleep(ms: number): Promise<void> {\n    return new Promise((resolve) => setTimeout(resolve, ms))\n  }\n}\n","import { BaseCommand } from '../command/base-command'\nimport { Command } from '../decorators/command.decorator'\nimport { Option } from '../decorators/option.decorator'\nimport chalk from 'chalk'\n\n/**\n * GreetCommand implementation\n *\n * A simple command to greet the user.\n */\n@Command({\n  name: 'greet',\n  description: 'Greet the user',\n})\nexport class GreetCommand extends BaseCommand {\n  /**\n   * The uppercase option\n   */\n  @Option({\n    flags: '-u, --uppercase',\n    description: 'Convert the greeting to uppercase',\n  })\n  private uppercase!: boolean\n\n  /**\n   * The color option\n   */\n  @Option({\n    flags: '-c, --color <color>',\n    description: 'The color of the greeting (red, green, blue, yellow, cyan)',\n    defaultValue: 'green',\n  })\n  private color!: string\n\n  /**\n   * Executes the command\n   *\n   * @returns {Promise<number>} The exit code\n   */\n  public async execute(): Promise<number> {\n    try {\n      // Get arguments and options\n      const name = this.input.getArgument('0') || 'World'\n      const uppercase = this.input.getOption('uppercase') === true || this.uppercase || false\n      const color = (this.input.getOption('color') as string) || this.color || 'green'\n\n      // Build the greeting\n      let greeting = `Hello, ${name}!`\n\n      if (uppercase) {\n        greeting = greeting.toUpperCase()\n      }\n\n      // Apply color\n      let coloredGreeting: string\n      switch (color) {\n        case 'red':\n          coloredGreeting = chalk.red(greeting)\n          break\n        case 'green':\n          coloredGreeting = chalk.green(greeting)\n          break\n        case 'blue':\n          coloredGreeting = chalk.blue(greeting)\n          break\n        case 'yellow':\n          coloredGreeting = chalk.yellow(greeting)\n          break\n        case 'cyan':\n          coloredGreeting = chalk.cyan(greeting)\n          break\n        default:\n          coloredGreeting = chalk.green(greeting)\n      }\n\n      // Output the greeting\n      this.line()\n      this.line(coloredGreeting)\n      this.line()\n\n      return BaseCommand.SUCCESS\n    } catch (error) {\n      this.error(`An error occurred: ${error instanceof Error ? error.message : String(error)}`)\n      return BaseCommand.FAILURE\n    }\n  }\n}\n","import { inject } from 'inversify'\nimport { ICommandRegistry } from '@pixielity/ts-types'\n\nimport { Command } from '../decorators'\nimport { BaseCommand } from '../command/base-command'\n\n/**\n * HelpCommand implementation\n *\n * Displays help information for a specific command.\n */\n@Command({\n  name: 'help',\n  description: 'Display help for a command',\n})\nexport class HelpCommand extends BaseCommand {\n  /**\n   * The command registry\n   * @private\n   */\n  private registry: ICommandRegistry\n\n  /**\n   * Creates a new HelpCommand instance\n   *\n   * @param {ICommandRegistry} registry - The command registry\n   */\n  constructor(@inject(ICommandRegistry.$) registry: ICommandRegistry) {\n    super()\n    this.registry = registry\n  }\n\n  /**\n   * Executes the command\n   *\n   * @returns {Promise<number>} The exit code\n   */\n  public async execute(): Promise<number> {\n    try {\n      const commandName = this.input.getArgument('0')\n\n      console.log('asdasd', commandName)\n      if (!commandName) {\n        this.error('Command name is required.')\n        this.line('')\n        this.line('Usage: help <command>')\n        return BaseCommand.INVALID\n      }\n\n      const command = this.registry.get(commandName)\n\n      if (!command) {\n        this.error(`Command \"${commandName}\" not found.`)\n        return BaseCommand.FAILURE\n      }\n\n      this.line(`${command.getName()}: ${command.getDescription()}`)\n      this.line('')\n\n      // Additional help information could be added here\n\n      return BaseCommand.SUCCESS\n    } catch (error) {\n      this.error(`An error occurred: ${error instanceof Error ? error.message : String(error)}`)\n      return BaseCommand.FAILURE\n    }\n  }\n}\n","import { inject } from \"inversify\"\nimport { ICommandRegistry } from \"@pixielity/ts-types\"\n\nimport { BaseCommand } from \"../command/base-command\"\nimport { Command } from \"../decorators/command.decorator\"\nimport { TableOutput } from \"../ui/table\"\nimport { COMMAND_METADATA_KEY } from \"../decorators/command.decorator\"\nimport chalk from \"chalk\"\n\n/**\n * ListCommand implementation\n *\n * Lists all available commands in the application.\n */\n@Command({\n  name: \"list\",\n  description: \"List all available commands\",\n  aliases: [\"commands\"],\n})\nexport class ListCommand extends BaseCommand {\n  /**\n   * The command registry\n   * @private\n   */\n  private registry: ICommandRegistry\n\n  /**\n   * Creates a new ListCommand instance\n   *\n   * @param {ICommandRegistry} registry - The command registry\n   */\n  constructor(@inject(ICommandRegistry.$) registry: ICommandRegistry) {\n    super();\n    this.registry = registry;\n  }\n\n  /**\n   * Executes the command\n   *\n   * @returns {Promise<number>} The exit code\n   */\n  public async execute(): Promise<number> {\n    try {\n      const commands = this.registry.getAll()\n\n      this.line(chalk.bold(\"Available commands:\"))\n      this.line(\"\")\n\n      if (commands.length === 0) {\n        this.line(\"  No commands registered.\")\n        return BaseCommand.SUCCESS\n      }\n\n      // Group commands by category (first part of name before \":\")\n      const commandGroups: Record<string, typeof commands> = {}\n\n      commands.forEach((command) => {\n        const name = command.getName()\n        const category = name.includes(\":\") ? name.split(\":\")[0] : \"general\"\n\n        if (!commandGroups[category]) {\n          commandGroups[category] = []\n        }\n\n        commandGroups[category].push(command)\n      })\n\n      // Create and display tables for each group\n      for (const [category, groupCommands] of Object.entries(commandGroups)) {\n        this.line(chalk.cyan(`${category.charAt(0).toUpperCase() + category.slice(1)} Commands:`))\n\n        const table = new TableOutput([\"Command\", \"Aliases\", \"Description\"])\n\n        // Sort commands alphabetically within each group\n        groupCommands.sort((a, b) => a.getName().localeCompare(b.getName()))\n\n        groupCommands.forEach((command) => {\n          // Get command metadata to check for aliases\n          const metadata = Reflect.getMetadata(COMMAND_METADATA_KEY, command.constructor) || {}\n          const aliases = metadata.aliases ? metadata.aliases.join(\", \") : \"\"\n\n          // Skip hidden commands\n          if (metadata.hidden) {\n            return\n          }\n\n          table.addRow([chalk.green(command.getName()), aliases ? chalk.yellow(aliases) : \"\", command.getDescription()])\n        })\n\n        table.render()\n        this.line(\"\")\n      }\n\n      return BaseCommand.SUCCESS\n    } catch (error) {\n      this.error(`An error occurred: ${error instanceof Error ? error.message : String(error)}`)\n      return BaseCommand.FAILURE\n    }\n  }\n}\n","import * as path from 'path'\nimport * as fs from 'fs'\nimport chalk from 'chalk'\nimport { inject } from 'inversify'\nimport { IStubGenerator } from '@pixielity/ts-types'\n\nimport { BaseCommand } from '../command/base-command'\nimport { Command } from '../decorators/command.decorator'\nimport { Argument } from '../decorators/argument.decorator'\nimport { Option } from '../decorators/option.decorator'\nimport { Ask } from '../ui/ask'\n\n/**\n * MakeCommand implementation\n *\n * Generates new command files from stub templates.\n */\n@Command({\n  name: 'make:command',\n  description: 'Create a new console command',\n})\nexport class MakeCommand extends BaseCommand {\n  /**\n   * The command name argument\n   */\n  @Argument({\n    name: 'name',\n    description: 'The name of the command (e.g., app:greet)',\n    required: true,\n  })\n  private commandName!: string\n\n  /**\n   * The output directory option\n   */\n  @Option({\n    flags: '-d, --dir <directory>',\n    description: 'The directory where the command will be created',\n    defaultValue: 'src/commands',\n  })\n  private directory!: string\n\n  /**\n   * The command description option\n   */\n  @Option({\n    flags: '--description <description>',\n    description: 'The description of the command',\n  })\n  private commandDescription!: string\n\n  /**\n   * The stub generator instance\n   * @private\n   */\n  private readonly stubGenerator: IStubGenerator\n\n  /**\n   * Creates a new MakeCommand instance\n   * @param {IStubGenerator} stubGenerator - The stub generator\n   */\n  constructor(@inject(IStubGenerator.$) stubGenerator: IStubGenerator) {\n    super()\n    this.stubGenerator = stubGenerator\n  }\n\n  /**\n   * Executes the command\n   * @returns {Promise<number>} The exit code\n   */\n  public async execute(): Promise<number> {\n    try {\n      // Get command name from argument\n      const name = this.input.getArgument('0') || this.commandName\n\n      if (!name) {\n        // If no name provided, ask for it\n        const inputName = await Ask.input('What should the command be named?')\n        if (!inputName) {\n          this.error('Command name is required.')\n          return BaseCommand.INVALID\n        }\n        this.commandName = inputName\n      } else {\n        this.commandName = name\n      }\n\n      // Get or ask for description\n      let description = (this.input.getOption('description') as string) || this.commandDescription\n      if (!description) {\n        description = await Ask.input(\n          'Enter a description for the command:',\n          'A custom console command',\n        )\n        this.commandDescription = description\n      }\n\n      // Convert command name to class name (e.g., hello:world -> HelloWorldCommand)\n      const className = this.getClassName(this.commandName)\n\n      // Get output directory\n      const outputDir = (this.input.getOption('dir') as string) || this.directory\n\n      // Generate the command file\n      const outputPath = path.join(\n        process.cwd(),\n        outputDir,\n        `${this.getFileName(this.commandName)}.ts`,\n      )\n\n      // Check if file already exists\n      if (fs.existsSync(outputPath)) {\n        const overwrite = await Ask.confirm(`File ${outputPath} already exists. Overwrite?`, false)\n        if (!overwrite) {\n          this.info('Command creation cancelled.')\n          return BaseCommand.SUCCESS\n        }\n      }\n\n      const success = this.stubGenerator.generate('command', outputPath, {\n        name: this.commandName,\n        className,\n        commandName: this.commandName,\n        description,\n      })\n\n      if (success) {\n        this.success(\n          `Command ${chalk.green(this.commandName)} created successfully at ${chalk.cyan(outputPath)}`,\n        )\n        return BaseCommand.SUCCESS\n      } else {\n        this.error(`Failed to create command ${this.commandName}`)\n        return BaseCommand.FAILURE\n      }\n    } catch (error) {\n      this.error(`An error occurred: ${error instanceof Error ? error.message : String(error)}`)\n      return BaseCommand.FAILURE\n    }\n  }\n\n  /**\n   * Converts a command name to a class name\n   *\n   * @param {string} name - The command name\n   * @returns {string} The class name\n   * @private\n   */\n  private getClassName(name: string): string {\n    return (\n      name\n        .split(':')\n        .map((part) => part.charAt(0).toUpperCase() + part.slice(1))\n        .join('') + 'Command'\n    )\n  }\n\n  /**\n   * Converts a command name to a file name\n   *\n   * @param {string} name - The command name\n   * @returns {string} The file name\n   * @private\n   */\n  private getFileName(name: string): string {\n    return name.replace(':', '-') + '-command'\n  }\n}\n","import { inject } from 'inversify'\nimport { ICommandScheduler } from '@pixielity/ts-types'\n\nimport { BaseCommand } from '../command/base-command'\nimport { Command } from '../decorators/command.decorator'\nimport { Argument } from '../decorators/argument.decorator'\nimport { TableOutput } from '../ui/table'\n\n/**\n * ScheduleCommand implementation\n *\n * Manages scheduled tasks.\n */\n@Command({\n  name: 'schedule',\n  description: 'Manage scheduled tasks',\n})\nexport class ScheduleCommand extends BaseCommand {\n  /**\n   * The action argument\n   */\n  @Argument({\n    name: 'action',\n    description: 'The action to perform (list, run, start, stop)',\n    required: true,\n  })\n  private action!: string\n\n  /**\n   * The command scheduler\n   * @private\n   */\n  private scheduler: ICommandScheduler\n\n  /**\n   * Creates a new ScheduleCommand instance\n   *\n   * @param {ICommandScheduler} scheduler - The command scheduler\n   */\n  constructor(@inject(ICommandScheduler.$) scheduler: ICommandScheduler) {\n    super()\n    this.scheduler = scheduler\n  }\n\n  /**\n   * Executes the command\n   *\n   * @returns {Promise<number>} The exit code\n   */\n  public async execute(): Promise<number> {\n    try {\n      const action = this.input.getArgument('0') || this.action\n\n      switch (action) {\n        case 'list':\n          return this.listTasks()\n        case 'start':\n          return this.startScheduler()\n        case 'stop':\n          return this.stopScheduler()\n        default:\n          this.error(`Unknown action: ${action}`)\n          this.line('Available actions: list, start, stop')\n          return BaseCommand.INVALID\n      }\n    } catch (error) {\n      this.error(`An error occurred: ${error instanceof Error ? error.message : String(error)}`)\n      return BaseCommand.FAILURE\n    }\n  }\n\n  /**\n   * Lists all scheduled tasks\n   *\n   * @returns {Promise<number>} The exit code\n   * @private\n   */\n  private async listTasks(): Promise<number> {\n    const tasks = this.scheduler.getTasks()\n\n    if (tasks.length === 0) {\n      this.info('No scheduled tasks.')\n      return BaseCommand.SUCCESS\n    }\n\n    const table = new TableOutput(['Command', 'Schedule', 'Last Run', 'Next Run'])\n\n    tasks.forEach((task) => {\n      const expression = this.formatExpression(task.expression)\n      const lastRun = task.lastRun ? task.lastRun.toLocaleString() : 'Never'\n      const nextRun = task.nextRun ? task.nextRun.toLocaleString() : 'Unknown'\n\n      table.addRow([task.command.getName(), expression, lastRun, nextRun])\n    })\n\n    this.line()\n    table.render()\n    this.line()\n\n    return BaseCommand.SUCCESS\n  }\n\n  /**\n   * Starts the scheduler\n   *\n   * @returns {Promise<number>} The exit code\n   * @private\n   */\n  private async startScheduler(): Promise<number> {\n    this.scheduler.start()\n    this.success('Scheduler started.')\n    return BaseCommand.SUCCESS\n  }\n\n  /**\n   * Stops the scheduler\n   *\n   * @returns {Promise<number>} The exit code\n   * @private\n   */\n  private async stopScheduler(): Promise<number> {\n    this.scheduler.stop()\n    this.success('Scheduler stopped.')\n    return BaseCommand.SUCCESS\n  }\n\n  /**\n   * Formats a schedule expression\n   *\n   * @param {any} expression - The schedule expression\n   * @returns {string} The formatted expression\n   * @private\n   */\n  private formatExpression(expression: any): string {\n    const minute = expression.minute ?? '*'\n    const hour = expression.hour ?? '*'\n    const dayOfMonth = expression.dayOfMonth ?? '*'\n    const month = expression.month ?? '*'\n    const dayOfWeek = expression.dayOfWeek ?? '*'\n\n    return `${minute} ${hour} ${dayOfMonth} ${month} ${dayOfWeek}`\n  }\n}\n"]}