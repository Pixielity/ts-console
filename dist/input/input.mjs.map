{"version":3,"sources":["../../src/input/input.ts"],"names":[],"mappings":"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","file":"input.mjs","sourcesContent":["import type { IInput } from '@pixielity/ts-types'\n\n/**\n * Implementation of the IInput interface\n *\n * Parses command line arguments and provides access to them.\n */\nexport class Input implements IInput {\n  /**\n   * The command name\n   * @private\n   */\n  private commandName?: string\n\n  /**\n   * Map of argument names to values\n   * @private\n   */\n  private args: Record<string, string> = {}\n\n  /**\n   * Map of option names to values\n   * @private\n   */\n  private opts: Record<string, string | boolean> = {}\n\n  /**\n   * Creates a new Input instance\n   *\n   * @param {string[]} argv - The command line arguments\n   */\n  constructor(argv: string[]) {\n    this.parse(argv)\n  }\n\n  /**\n   * Gets the command name from the input\n   *\n   * @returns {string | undefined} The command name or undefined if not provided\n   */\n  public getCommandName(): string | undefined {\n    return this.commandName\n  }\n\n  /**\n   * Gets an argument value by name\n   *\n   * @param {string} name - The name of the argument\n   * @returns {string | undefined} The argument value or undefined if not provided\n   */\n  public getArgument(name: string): string | undefined {\n    return this.args[name]\n  }\n\n  /**\n   * Gets all arguments\n   *\n   * @returns {Record<string, string>} Map of argument names to values\n   */\n  public getArguments(): Record<string, string> {\n    return { ...this.args }\n  }\n\n  /**\n   * Gets an option value by name\n   *\n   * @param {string} name - The name of the option\n   * @returns {string | boolean | undefined} The option value or undefined if not provided\n   */\n  public getOption(name: string): string | boolean | undefined {\n    return this.opts[name]\n  }\n\n  /**\n   * Gets all options\n   *\n   * @returns {Record<string, string | boolean>} Map of option names to values\n   */\n  public getOptions(): Record<string, string | boolean> {\n    return { ...this.opts }\n  }\n\n  /**\n   * Checks if an option is set\n   *\n   * @param {string} name - The name of the option\n   * @returns {boolean} True if the option is set, false otherwise\n   */\n  public hasOption(name: string): boolean {\n    return name in this.opts\n  }\n\n  /**\n   * Parses the command line arguments\n   *\n   * @param {string[]} argv - The command line arguments\n   * @private\n   */\n  private parse(argv: string[]): void {\n    if (argv.length === 0) {\n      return\n    }\n\n    // First argument is the command name\n    this.commandName = argv[0]\n\n    let i = 1\n    let currentArgName = 0\n\n    while (i < argv.length) {\n      const arg = argv[i]\n\n      // Handle options (--option or -o)\n      if (arg.startsWith('--')) {\n        const optName = arg.substring(2)\n\n        // Handle --option=value\n        if (optName.includes('=')) {\n          const [name, value] = optName.split('=', 2)\n          this.opts[name] = value\n        } else {\n          // Handle --option value or --option (boolean flag)\n          if (i + 1 < argv.length && !argv[i + 1].startsWith('-')) {\n            this.opts[optName] = argv[i + 1]\n            i++\n          } else {\n            this.opts[optName] = true\n          }\n        }\n      } else if (arg.startsWith('-')) {\n        const optName = arg.substring(1)\n\n        // Handle -o=value\n        if (optName.includes('=')) {\n          const [name, value] = optName.split('=', 2)\n          this.opts[name] = value\n        } else {\n          // Handle -o value or -o (boolean flag)\n          if (i + 1 < argv.length && !argv[i + 1].startsWith('-')) {\n            this.opts[optName] = argv[i + 1]\n            i++\n          } else {\n            this.opts[optName] = true\n          }\n        }\n      } else {\n        // Handle positional arguments\n        this.args[currentArgName.toString()] = arg\n        currentArgName++\n      }\n\n      i++\n    }\n  }\n}\n"]}