{"version":3,"sources":["../../src/command/command-registry.ts","../../src/stubs/stub-generator.ts","../../src/output/output.ts","../../src/scheduler/scheduler.ts","../../src/decorators/argument.decorator.ts","../../src/decorators/option.decorator.ts","../../src/di/container.ts","../../src/decorators/command.decorator.ts","../../src/application.ts","../../src/ui/table.ts","../../src/ui/progress-bar.ts","../../src/ui/ask.ts","../../src/discovery/command-collector.ts","../../src/providers/console-service-provider.ts"],"names":["injectable","path","fs","chalk","inject","ICommandRegistry","Container","Command","ICommandCollector","Table","cliProgress","inquirer","QuestionType","path2","glob","ICommand","container","path3","IConsoleApplication","ICommandScheduler","IStubGenerator","ITableOutput","IProgressBar","IAsk"],"mappings":"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","file":"console-service-provider.js","sourcesContent":["import { injectable } from \"inversify\"\nimport type { ICommand } from \"@pixielity/ts-types\"\nimport type { ICommandRegistry } from \"@pixielity/ts-types\"\n\n/**\n * Registry for console commands\n *\n * Stores and manages all registered commands.\n */\n@injectable()\nexport class CommandRegistry implements ICommandRegistry {\n  /**\n   * Map of command names to command instances\n   * @private\n   */\n  private commands: Map<string, ICommand> = new Map()\n\n  /**\n   * Adds a command to the registry\n   *\n   * @param {ICommand} command - The command to add\n   * @throws {Error} If a command with the same name already exists\n   */\n  public add(command: ICommand): void {\n    const name = command.getName()\n\n    if (this.commands.has(name)) {\n      throw new Error(`Command \"${name}\" already exists.`)\n    }\n\n    this.commands.set(name, command)\n  }\n\n  /**\n   * Gets a command by name\n   *\n   * @param {string} name - The name of the command\n   * @returns {ICommand | undefined} The command or undefined if not found\n   */\n  public get(name: string): ICommand | undefined {\n    return this.commands.get(name)\n  }\n\n  /**\n   * Gets all registered commands\n   *\n   * @returns {ICommand[]} Array of all registered commands\n   */\n  public getAll(): ICommand[] {\n    return Array.from(this.commands.values())\n  }\n\n  /**\n   * Checks if a command exists\n   *\n   * @param {string} name - The name of the command\n   * @returns {boolean} True if the command exists, false otherwise\n   */\n  public has(name: string): boolean {\n    return this.commands.has(name)\n  }\n\n  /**\n   * Removes a command from the registry\n   *\n   * @param {string} name - The name of the command\n   * @returns {boolean} True if the command was removed, false otherwise\n   */\n  public remove(name: string): boolean {\n    return this.commands.delete(name)\n  }\n\n  /**\n   * Clears all commands from the registry\n   */\n  public clear(): void {\n    this.commands.clear()\n  }\n}\n","import * as fs from \"fs\"\nimport * as path from \"path\"\nimport { injectable } from \"inversify\"\nimport type { IStubGenerator } from \"@pixielity/ts-types\"\n\n/**\n * Stub Generator class\n *\n * Handles the generation of files from stub templates.\n */\n@injectable()\nexport class StubGenerator implements IStubGenerator {\n  /**\n   * The directory containing the stub templates\n   * @private\n   */\n  private stubsDir: string\n\n  /**\n   * Creates a new StubGenerator instance\n   *\n   * @param {string} stubsDir - The directory containing the stub templates\n   */\n  constructor(stubsDir: string) {\n    this.stubsDir = stubsDir\n  }\n\n  /**\n   * Generates a file from a stub template\n   *\n   * @param {string} stubName - The name of the stub template\n   * @param {string} outputPath - The path where the generated file will be saved\n   * @param {Record<string, string>} replacements - Map of placeholders to their replacements\n   * @returns {boolean} True if the file was generated successfully, false otherwise\n   */\n  public generate(stubName: string, outputPath: string, replacements: Record<string, string>): boolean {\n    try {\n      const stubPath = path.join(this.stubsDir, `${stubName}.stub`)\n\n      if (!fs.existsSync(stubPath)) {\n        throw new Error(`Stub template \"${stubName}\" not found.`)\n      }\n\n      let content = fs.readFileSync(stubPath, \"utf8\")\n\n      // Replace placeholders with their values\n      for (const [placeholder, value] of Object.entries(replacements)) {\n        content = content.replace(new RegExp(`\\\\{\\\\{${placeholder}\\\\}\\\\}`, \"g\"), value)\n      }\n\n      // Create directory if it doesn't exist\n      const dir = path.dirname(outputPath)\n      if (!fs.existsSync(dir)) {\n        fs.mkdirSync(dir, { recursive: true })\n      }\n\n      // Write the generated file\n      fs.writeFileSync(outputPath, content)\n\n      return true\n    } catch (error) {\n      console.error(`Error generating file: ${error instanceof Error ? error.message : String(error)}`)\n      return false\n    }\n  }\n\n  /**\n   * Gets the list of available stub templates\n   *\n   * @returns {string[]} Array of stub template names\n   */\n  public getAvailableStubs(): string[] {\n    try {\n      return fs\n        .readdirSync(this.stubsDir)\n        .filter((file) => file.endsWith(\".stub\"))\n        .map((file) => file.replace(\".stub\", \"\"))\n    } catch (error) {\n      console.error(`Error getting available stubs: ${error instanceof Error ? error.message : String(error)}`)\n      return []\n    }\n  }\n}\n","import chalk from \"chalk\"\nimport type { IOutput } from \"@pixielity/ts-types\"\n\n/**\n * Implementation of the IOutput interface\n *\n * Provides methods for writing to the console with formatting using chalk.\n */\nexport class Output implements IOutput {\n  /**\n   * Writes a message to the output\n   *\n   * @param {string} message - The message to write\n   */\n  public write(message: string): void {\n    process.stdout.write(message)\n  }\n\n  /**\n   * Writes a message to the output followed by a newline\n   *\n   * @param {string} message - The message to write\n   */\n  public writeln(message: string): void {\n    console.log(message)\n  }\n\n  /**\n   * Writes an error message to the output\n   *\n   * @param {string} message - The error message to write\n   */\n  public error(message: string): void {\n    console.error(chalk.bold.red(\"ERROR\") + \": \" + message)\n  }\n\n  /**\n   * Writes a success message to the output\n   *\n   * @param {string} message - The success message to write\n   */\n  public success(message: string): void {\n    console.log(chalk.bold.green(\"SUCCESS\") + \": \" + message)\n  }\n\n  /**\n   * Writes an info message to the output\n   *\n   * @param {string} message - The info message to write\n   */\n  public info(message: string): void {\n    console.log(chalk.bold.blue(\"INFO\") + \": \" + message)\n  }\n\n  /**\n   * Writes a warning message to the output\n   *\n   * @param {string} message - The warning message to write\n   */\n  public warning(message: string): void {\n    console.log(chalk.bold.yellow(\"WARNING\") + \": \" + message)\n  }\n\n  /**\n   * Writes a comment message to the output\n   *\n   * @param {string} message - The comment message to write\n   */\n  public comment(message: string): void {\n    console.log(chalk.gray(\"// \" + message))\n  }\n}\n","import { injectable, inject } from \"inversify\"\nimport { ICommandRegistry } from \"@pixielity/ts-types\"\nimport type { ICommandScheduler } from \"@pixielity/ts-types\"\nimport type { IScheduleExpression } from \"@pixielity/ts-types\"\nimport type { IScheduledTask } from \"@pixielity/ts-types\"\n\nimport { Output } from \"../output/output\"\n\n/**\n * Command scheduler class\n *\n * Schedules commands to run at specific intervals.\n */\n@injectable()\nexport class CommandScheduler implements ICommandScheduler {\n  /**\n   * The scheduled tasks\n   * @private\n   */\n  private tasks: IScheduledTask[] = []\n\n  /**\n   * The command registry\n   * @private\n   */\n  private commandRegistry: ICommandRegistry\n\n  /**\n   * The output instance\n   * @private\n   */\n  private output: Output\n\n  /**\n   * The timer ID for the scheduler\n   * @private\n   */\n  private timer?: NodeJS.Timeout\n\n  /**\n   * Creates a new CommandScheduler instance\n   *\n   * @param {ICommandRegistry} commandRegistry - The command registry\n   */\n  constructor(\n    @inject(ICommandRegistry.$) commandRegistry: ICommandRegistry,\n  ) {\n    this.commandRegistry = commandRegistry\n    this.output = new Output()\n  }\n\n  /**\n   * Schedules a command to run at a specific interval\n   *\n   * @param {string} commandName - The name of the command\n   * @param {IScheduleExpression} expression - The schedule expression\n   * @param {string[]} args - The arguments to pass to the command\n   * @param {Record<string, any>} options - The options to pass to the command\n   * @returns {CommandScheduler} The scheduler instance for chaining\n   */\n  public schedule(\n    commandName: string,\n    expression: IScheduleExpression,\n    args: string[] = [],\n    options: Record<string, any> = {},\n  ): CommandScheduler {\n    const command = this.commandRegistry.get(commandName)\n\n    if (!command) {\n      throw new Error(`Command \"${commandName}\" not found.`)\n    }\n\n    this.tasks.push({\n      command,\n      args,\n      options,\n      expression,\n      nextRun: this.calculateNextRun(expression),\n    })\n\n    return this\n  }\n\n  /**\n   * Starts the scheduler\n   *\n   * @param {number} interval - The interval in milliseconds to check for tasks to run\n   * @returns {CommandScheduler} The scheduler instance for chaining\n   */\n  public start(interval = 60000): CommandScheduler {\n    if (this.timer) {\n      clearInterval(this.timer)\n    }\n\n    this.timer = setInterval(() => this.tick(), interval)\n    this.output.info(\"Scheduler started.\")\n\n    return this\n  }\n\n  /**\n   * Stops the scheduler\n   *\n   * @returns {CommandScheduler} The scheduler instance for chaining\n   */\n  public stop(): CommandScheduler {\n    if (this.timer) {\n      clearInterval(this.timer)\n      this.timer = undefined\n      this.output.info(\"Scheduler stopped.\")\n    }\n\n    return this\n  }\n\n  /**\n   * Gets all scheduled tasks\n   *\n   * @returns {IScheduledTask[]} The scheduled tasks\n   */\n  public getTasks(): IScheduledTask[] {\n    return [...this.tasks]\n  }\n\n  /**\n   * Clears all scheduled tasks\n   *\n   * @returns {CommandScheduler} The scheduler instance for chaining\n   */\n  public clearTasks(): CommandScheduler {\n    this.tasks = []\n    return this\n  }\n\n  /**\n   * Runs a scheduled task\n   *\n   * @param {IScheduledTask} task - The task to run\n   * @returns {Promise<void>}\n   * @private\n   */\n  private async runTask(task: IScheduledTask): Promise<void> {\n    try {\n      this.output.info(`Running scheduled command: ${task.command.getName()}`)\n\n      // Set output\n      task.command.setOutput(new Output())\n\n      // Set arguments and options\n      task.command.setArguments(task.args)\n      task.command.setOptions(task.options)\n\n      // Run before execute hook if it exists\n      if (task.command.beforeExecute) {\n        const shouldContinue = await task.command.beforeExecute()\n        if (!shouldContinue) {\n          this.output.warning(`Command ${task.command.getName()} execution aborted by beforeExecute hook.`)\n          return\n        }\n      }\n\n      // Execute the command\n      const exitCode = await task.command.execute()\n\n      // Run after execute hook if it exists\n      if (task.command.afterExecute) {\n        await task.command.afterExecute(exitCode)\n      }\n\n      // Update last run time\n      task.lastRun = new Date()\n      // Calculate next run time\n      task.nextRun = this.calculateNextRun(task.expression)\n\n      this.output.success(`Command ${task.command.getName()} executed successfully.`)\n    } catch (error) {\n      this.output.error(\n        `Error running command ${task.command.getName()}: ${error instanceof Error ? error.message : String(error)}`,\n      )\n    }\n  }\n\n  /**\n   * Checks for tasks to run\n   *\n   * @returns {Promise<void>}\n   * @private\n   */\n  private async tick(): Promise<void> {\n    const now = new Date()\n\n    for (const task of this.tasks) {\n      if (task.nextRun && task.nextRun <= now) {\n        await this.runTask(task)\n      }\n    }\n  }\n\n  /**\n   * Calculates the next run time for a schedule expression\n   *\n   * @param {IScheduleExpression} expression - The schedule expression\n   * @returns {Date} The next run time\n   * @private\n   */\n  private calculateNextRun(expression: IScheduleExpression): Date {\n    const now = new Date()\n    const next = new Date(now)\n\n    // Set to the next minute\n    next.setSeconds(0)\n    next.setMilliseconds(0)\n    next.setMinutes(next.getMinutes() + 1)\n\n    // Handle minute\n    if (expression.minute !== undefined && expression.minute !== \"*\") {\n      const minute = Number(expression.minute)\n      next.setMinutes(minute)\n      if (next <= now) {\n        next.setHours(next.getHours() + 1)\n      }\n    }\n\n    // Handle hour\n    if (expression.hour !== undefined && expression.hour !== \"*\") {\n      const hour = Number(expression.hour)\n      next.setHours(hour)\n      if (next <= now) {\n        next.setDate(next.getDate() + 1)\n      }\n    }\n\n    // Handle day of month\n    if (expression.dayOfMonth !== undefined && expression.dayOfMonth !== \"*\") {\n      const day = Number(expression.dayOfMonth)\n      next.setDate(day)\n      if (next <= now) {\n        next.setMonth(next.getMonth() + 1)\n      }\n    }\n\n    // Handle month\n    if (expression.month !== undefined && expression.month !== \"*\") {\n      const month = Number(expression.month) - 1 // JavaScript months are 0-based\n      next.setMonth(month)\n      if (next <= now) {\n        next.setFullYear(next.getFullYear() + 1)\n      }\n    }\n\n    // Handle day of week\n    if (expression.dayOfWeek !== undefined && expression.dayOfWeek !== \"*\") {\n      const dayOfWeek = Number(expression.dayOfWeek)\n      const currentDayOfWeek = next.getDay()\n      const daysToAdd = (dayOfWeek - currentDayOfWeek + 7) % 7\n      if (daysToAdd > 0) {\n        next.setDate(next.getDate() + daysToAdd)\n      } else if (next <= now) {\n        next.setDate(next.getDate() + 7)\n      }\n    }\n\n    return next\n  }\n}\n","import \"reflect-metadata\"\n\n/**\n * Metadata key for arguments\n */\nexport const ARGUMENT_METADATA_KEY = Symbol(\"argument\")\n\n/**\n * Argument options interface\n */\nexport interface ArgumentOptions {\n  /**\n   * The name of the argument\n   */\n  name: string\n\n  /**\n   * The description of the argument\n   */\n  description?: string\n\n  /**\n   * The default value of the argument\n   */\n  defaultValue?: any\n\n  /**\n   * Whether the argument is required\n   */\n  required?: boolean\n\n  /**\n   * Whether the argument is an array (variadic)\n   */\n  isArray?: boolean\n}\n\n/**\n * Argument decorator\n *\n * Defines a command argument\n *\n * @param {ArgumentOptions} options - The argument options\n * @returns {PropertyDecorator} The property decorator\n */\nexport function Argument(options: ArgumentOptions): PropertyDecorator {\n  return (target: Object, propertyKey: string | symbol) => {\n    // Format the argument name for Commander\n    // If it's required, don't add brackets\n    // If it's an array, add ellipsis\n    let name = options.name\n    if (!options.required) {\n      name = `[${name}]`\n    } else {\n      name = `<${name}>`\n    }\n\n    if (options.isArray) {\n      name = `${name}...`\n    }\n\n    const metadata = {\n      name,\n      description: options.description || \"\",\n      defaultValue: options.defaultValue,\n      propertyKey,\n    }\n\n    // Get existing metadata or initialize empty array\n    const existingMetadata = Reflect.getMetadata(ARGUMENT_METADATA_KEY, target.constructor) || []\n\n    // Add new metadata\n    existingMetadata.push(metadata)\n\n    // Update metadata\n    Reflect.defineMetadata(ARGUMENT_METADATA_KEY, existingMetadata, target.constructor)\n  }\n}\n","import \"reflect-metadata\"\n\n/**\n * Metadata key for options\n */\nexport const OPTION_METADATA_KEY = Symbol(\"option\")\n\n/**\n * Option options interface\n */\nexport interface OptionOptions {\n  /**\n   * The flags for the option (e.g., \"-n, --name\")\n   */\n  flags: string\n\n  /**\n   * The description of the option\n   */\n  description?: string\n\n  /**\n   * The default value of the option\n   */\n  defaultValue?: any\n}\n\n/**\n * Option decorator\n *\n * Defines a command option\n *\n * @param {OptionOptions} options - The option options\n * @returns {PropertyDecorator} The property decorator\n */\nexport function Option(options: OptionOptions): PropertyDecorator {\n  return (target: Object, propertyKey: string | symbol) => {\n    const metadata = {\n      flags: options.flags,\n      description: options.description || \"\",\n      defaultValue: options.defaultValue,\n      propertyKey,\n    }\n\n    // Get existing metadata or initialize empty array\n    const existingMetadata = Reflect.getMetadata(OPTION_METADATA_KEY, target.constructor) || []\n\n    // Add new metadata\n    existingMetadata.push(metadata)\n\n    // Update metadata\n    Reflect.defineMetadata(OPTION_METADATA_KEY, existingMetadata, target.constructor)\n  }\n}\n","import { Container } from \"inversify\"\nimport \"reflect-metadata\"\n\n/**\n * The global Inversify container instance\n */\nconst container = new Container({\n  defaultScope: \"Singleton\",\n})\n\nexport { container }\n","import 'reflect-metadata'\nimport { injectable } from 'inversify'\nimport { ICommand, ICommandOptions } from '@pixielity/ts-types'\n\nimport { container } from '../di/container'\n\n/**\n * Metadata key for command\n */\nexport const COMMAND_METADATA_KEY = Symbol('command')\n\n/**\n * Command decorator\n *\n * Marks a class as a console command and registers it with the container\n *\n * @param {CommandOptions} options - The command options\n * @returns {ClassDecorator} The class decorator\n */\nexport function Command(options: ICommandOptions): ClassDecorator {\n  return (target: Function): void => {\n    // Set default values for options\n    const commandOptions = {\n      ...options,\n      hidden: options.hidden ?? false,\n      injectable: options.injectable ?? true,\n      description: options.description || '',\n      shortcuts: options.shortcuts || [],\n    }\n\n    // Store command metadata with defaults applied\n    Reflect.defineMetadata(COMMAND_METADATA_KEY, commandOptions, target)\n\n    // Make the class injectable if not explicitly disabled\n    if (commandOptions.injectable) {\n      injectable()(target)\n\n      // Register the command with the container\n      // We use a multi-injection approach for commands\n      try {\n        container\n          .bind(ICommand.$)\n          .to(target as any)\n          .inSingletonScope()\n      } catch (error) {\n        // If the binding already exists, we can ignore the error\n        // This can happen during hot reloading\n      }\n    }\n  }\n}\n","import 'reflect-metadata'\nimport chalk from 'chalk'\nimport { Command } from 'commander'\nimport { inject, injectable } from 'inversify'\nimport type { ICommand } from '@pixielity/ts-types'\nimport type { IConsoleApplication } from '@pixielity/ts-types'\nimport { ICommandCollector, ICommandRegistry, ICommandShortcut } from '@pixielity/ts-types'\n\nimport { Output } from './output/output'\nimport { ARGUMENT_METADATA_KEY } from './decorators/argument.decorator'\nimport { OPTION_METADATA_KEY } from './decorators/option.decorator'\nimport { COMMAND_METADATA_KEY } from './decorators/command.decorator'\n\n/**\n * Console Application class\n *\n * Manages the console commands and their execution using Commander.js.\n */\n@injectable()\nexport class Application implements IConsoleApplication {\n  /**\n   * The name of the application\n   * @private\n   */\n  private name: string\n\n  /**\n   * The version of the application\n   * @private\n   */\n  private version: string\n\n  /**\n   * The command registry that stores all registered commands\n   * @private\n   */\n  private commandRegistry: ICommandRegistry\n\n  /**\n   * The command collector for discovering commands\n   * @private\n   */\n  private commandCollector: ICommandCollector\n\n  /**\n   * The Commander.js program instance\n   * @private\n   */\n  private program: Command\n\n  /**\n   * Map of shortcuts to command names\n   * @private\n   */\n  private shortcutMap: Map<\n    string,\n    { command: string; args?: string[]; options?: Record<string, any> }\n  > = new Map()\n\n  /**\n   * Creates a new Console Application instance\n   *\n   * @param {ICommandRegistry} commandRegistry - The command registry\n   * @param {ICommandCollector} commandCollector - The command collector\n   * @param {ICommand[]} commands - The commands to register\n   * @param {string} name - The name of the application\n   * @param {string} version - The version of the application\n   */\n  constructor(\n    @inject(ICommandRegistry.$) commandRegistry: ICommandRegistry,\n    @inject(ICommandCollector.$) commandCollector: ICommandCollector,\n    commands: ICommand[] = [],\n    name = 'Next.js Console',\n    version = '1.0.0',\n  ) {\n    this.name = name\n    this.version = version\n    this.commandRegistry = commandRegistry\n    this.commandCollector = commandCollector\n\n    // Initialize Commander program\n    this.program = new Command()\n      .name(this.name)\n      .version(this.version)\n      .description(`${this.name} - A Laravel/Symfony-inspired console for Next.js`)\n      .helpOption('-h, --help', 'Display help for command')\n      .helpCommand('help [command]', 'Display help for command')\n\n    // Add global options (shortcuts)\n    this.addGlobalOptions()\n\n    // Register commands\n    if (commands.length > 0) {\n      this.registerCommands(commands)\n    }\n  }\n\n  /**\n   * Add global options/shortcuts to the application\n   *\n   * @private\n   */\n  private addGlobalOptions(): void {\n    // implement global options\n  }\n\n  /**\n   * Register command-specific shortcuts\n   *\n   * @param {string} commandName - The name of the command\n   * @param {CommandShortcut[]} shortcuts - The shortcuts to register\n   * @private\n   */\n  private registerCommandShortcuts(commandName: string, shortcuts: ICommandShortcut[]): void {\n    shortcuts.forEach((shortcut) => {\n      // Extract the short flag from the shortcut (e.g., \"-l\" from \"-l, --list\")\n      const flagParts = shortcut.flag.split(',').map((part: string) => part.trim())\n      const shortFlag = flagParts[0]\n\n      // Add the option to the program\n      this.program.option(\n        shortcut.flag,\n        `${shortcut.description} (shortcut for \"${commandName}\")`,\n        shortcut.defaultValue,\n      )\n\n      // Map the shortcut to the command\n      this.shortcutMap.set(shortFlag, { command: commandName })\n\n      // If there's a long flag version, map that too\n      if (flagParts.length > 1) {\n        this.shortcutMap.set(flagParts[1], { command: commandName })\n      }\n    })\n  }\n\n  /**\n   * Handle global options/shortcuts\n   *\n   * @param {any} options - The parsed options\n   * @returns {Promise<boolean>} True if an option was handled, false otherwise\n   * @private\n   */\n  private async handleGlobalOptions(options: any): Promise<boolean> {\n    // Handle built-in global shortcuts\n    if (options.list) {\n      // Run the list command\n      const listCommand = this.commandRegistry.get('list')\n      if (listCommand) {\n        listCommand.setOutput(new Output())\n        await listCommand.execute()\n        return true\n      }\n    }\n\n    if (options.greet !== undefined) {\n      // Run the greet command\n      const greetCommand = this.commandRegistry.get('greet')\n      if (greetCommand) {\n        greetCommand.setOutput(new Output())\n        if (typeof options.greet === 'string') {\n          greetCommand.setArguments([options.greet])\n        }\n        await greetCommand.execute()\n        return true\n      }\n    }\n\n    if (options.demo !== undefined) {\n      // Run the demo command\n      const demoCommand = this.commandRegistry.get('demo')\n      if (demoCommand) {\n        demoCommand.setOutput(new Output())\n        if (typeof options.demo === 'string') {\n          demoCommand.setOptions({ feature: options.demo })\n        }\n        await demoCommand.execute()\n        return true\n      }\n    }\n\n    if (options.make) {\n      // Run the make:command command\n      const makeCommand = this.commandRegistry.get('make:command')\n      if (makeCommand) {\n        makeCommand.setOutput(new Output())\n        makeCommand.setArguments([options.make])\n        await makeCommand.execute()\n        return true\n      }\n    }\n\n    // Handle command-specific shortcuts\n    for (const [flag, commandInfo] of this.shortcutMap.entries()) {\n      // Remove the leading dash(es) to get the option name\n      const optionName = flag.replace(/^-+/, '')\n\n      if (options[optionName] !== undefined) {\n        const command = this.commandRegistry.get(commandInfo.command)\n        if (command) {\n          command.setOutput(new Output())\n\n          // Set arguments if provided\n          if (commandInfo.args) {\n            command.setArguments(commandInfo.args)\n          }\n\n          // Set options if provided\n          if (commandInfo.options) {\n            command.setOptions(commandInfo.options)\n          }\n\n          // If the option has a value, pass it as an argument\n          if (typeof options[optionName] === 'string') {\n            command.setArguments([options[optionName]])\n          }\n\n          await command.execute()\n          return true\n        }\n      }\n    }\n\n    return false\n  }\n\n  /**\n   * Gets the name of the application\n   *\n   * @returns {string} The application name\n   */\n  public getName(): string {\n    return this.name\n  }\n\n  /**\n   * Sets the name of the application\n   *\n   * @param {string} name - The new application name\n   * @returns {Application} The application instance for chaining\n   */\n  public setName(name: string): Application {\n    this.name = name\n    this.program.name(name)\n    return this\n  }\n\n  /**\n   * Gets the version of the application\n   *\n   * @returns {string} The application version\n   */\n  public getVersion(): string {\n    return this.version\n  }\n\n  /**\n   * Sets the version of the application\n   *\n   * @param {string} version - The new application version\n   * @returns {Application} The application instance for chaining\n   */\n  public setVersion(version: string): Application {\n    this.version = version\n    this.program.version(version)\n    return this\n  }\n\n  /**\n   * Gets all registered commands\n   *\n   * @returns {ICommand[]} Array of all registered commands\n   */\n  public getCommands(): ICommand[] {\n    return this.commandRegistry.getAll()\n  }\n\n  /**\n   * Sets the commands for the application\n   * This will clear existing commands and register the new ones\n   *\n   * @param {ICommand[]} commands - The commands to register\n   * @returns {Application} The application instance for chaining\n   */\n  public setCommands(commands: ICommand[]): Application {\n    // Clear existing commands\n    this.commandRegistry.clear()\n\n    // Clear shortcut map\n    this.shortcutMap.clear()\n\n    // Re-initialize the program to clear Commander commands\n    this.program = new Command()\n      .name(this.name)\n      .version(this.version)\n      .description(`${this.name} - A Laravel/Symfony-inspired console for Next.js`)\n      .helpOption('-h, --help', 'Display help for command')\n      .addHelpCommand('help [command]', 'Display help for command')\n\n    // Add global options\n    this.addGlobalOptions()\n\n    // Register the new commands\n    this.registerCommands(commands)\n\n    return this\n  }\n\n  /**\n   * Gets the command registry\n   *\n   * @returns {ICommandRegistry} The command registry\n   */\n  public getCommandRegistry(): ICommandRegistry {\n    return this.commandRegistry\n  }\n\n  /**\n   * Gets the command collector\n   *\n   * @returns {ICommandCollector} The command collector\n   */\n  public getCommandCollector(): ICommandCollector {\n    return this.commandCollector\n  }\n\n  /**\n   * Registers a command with the application\n   *\n   * @param {ICommand} command - The command to register\n   * @returns {Application} - The application instance for chaining\n   */\n  public register(command: ICommand): Application {\n    this.commandRegistry.add(command)\n\n    // Register with Commander\n    this.registerWithCommander(command)\n\n    return this\n  }\n\n  /**\n   * Registers multiple commands with the application\n   *\n   * @param {ICommand[]} commands - The commands to register\n   * @returns {Application} - The application instance for chaining\n   */\n  public registerCommands(commands: ICommand[]): Application {\n    commands.forEach((command) => this.register(command))\n    return this\n  }\n\n  /**\n   * Discovers and registers commands from a directory\n   *\n   * @param {string} directory - The directory to scan for commands\n   * @param {string} pattern - The glob pattern to match command files\n   * @returns {Promise<Application>} - The application instance for chaining\n   */\n  public async discoverCommands(\n    directory: string,\n    pattern = '**/*-command.{ts,js}',\n  ): Promise<Application> {\n    const commands = await this.commandCollector.discoverCommands(directory, pattern)\n    this.registerCommands(commands)\n    return this\n  }\n\n  /**\n   * Registers a command with Commander.js\n   *\n   * @param {ICommand} command - The command to register\n   * @private\n   */\n  private registerWithCommander(command: ICommand): void {\n    // Get command metadata if available\n    const metadata = Reflect.getMetadata(COMMAND_METADATA_KEY, command.constructor) || {}\n\n    // Skip hidden commands\n    if (metadata.hidden) {\n      return\n    }\n\n    const commanderCommand = new Command(command.getName())\n      .description(command.getDescription())\n      .action(async (...args) => {\n        try {\n          // Extract options from the last argument (Commander passes options as last arg)\n          const options = args.pop() || {}\n\n          // Set output\n          command.setOutput(new Output())\n\n          // Set arguments and options\n          command.setArguments(args)\n          command.setOptions(options)\n\n          // Run before execute hook if it exists\n          if (command.beforeExecute) {\n            const shouldContinue = await command.beforeExecute()\n            if (!shouldContinue) {\n              return\n            }\n          }\n\n          // Execute the command\n          const exitCode = await command.execute()\n\n          // Run after execute hook if it exists\n          if (command.afterExecute) {\n            await command.afterExecute(exitCode)\n          }\n\n          if (exitCode !== 0 && exitCode !== undefined) {\n            process.exit(exitCode)\n          }\n        } catch (error) {\n          console.error(\n            chalk.red(`Error: ${error instanceof Error ? error.message : String(error)}`),\n          )\n          process.exit(1)\n        }\n      })\n\n    // Add aliases if available\n    if (metadata.aliases && Array.isArray(metadata.aliases)) {\n      commanderCommand.aliases(metadata.aliases)\n    }\n\n    // Register shortcuts if available\n    if (metadata.shortcuts && Array.isArray(metadata.shortcuts)) {\n      this.registerCommandShortcuts(command.getName(), metadata.shortcuts)\n    }\n\n    // Add command to the program\n    this.program.addCommand(commanderCommand)\n\n    // Process command metadata if available (from decorators)\n    this.processCommandMetadata(command, commanderCommand)\n  }\n\n  /**\n   * Processes command metadata from decorators\n   *\n   * @param {ICommand} command - The command instance\n   * @param {Command} commanderCommand - The Commander.js command\n   * @private\n   */\n  private processCommandMetadata(command: ICommand, commanderCommand: Command): void {\n    const constructor = command.constructor\n\n    // Process arguments\n    const argumentsMetadata = Reflect.getMetadata(ARGUMENT_METADATA_KEY, constructor) || []\n    argumentsMetadata.forEach((metadata: any) => {\n      commanderCommand.argument(metadata.name, metadata.description, metadata.defaultValue)\n    })\n\n    // Process options\n    const optionsMetadata = Reflect.getMetadata(OPTION_METADATA_KEY, constructor) || []\n    optionsMetadata.forEach((metadata: any) => {\n      commanderCommand.option(metadata.flags, metadata.description, metadata.defaultValue)\n    })\n  }\n\n  /**\n   * Runs the application with the given arguments\n   *\n   * @param {string[]} argv - The command line arguments\n   * @returns {Promise<void>}\n   */\n  public async run(argv: string[] = process.argv): Promise<void> {\n    try {\n      // Parse options without executing a command\n      this.program.allowUnknownOption(true)\n      const operands = this.program.parseOptions(argv.slice(2)).operands\n      const options = this.program.opts()\n\n      // Handle global options first\n      const optionsHandled = await this.handleGlobalOptions(options)\n\n      if (optionsHandled) {\n        return\n      }\n\n      // If no global options were handled, parse normally\n      await this.program.parseAsync(argv)\n    } catch (error) {\n      console.error(\n        chalk.red(`Fatal error: ${error instanceof Error ? error.message : String(error)}`),\n      )\n      process.exit(1)\n    }\n  }\n}\n","import Table from 'cli-table3'\nimport { injectable } from \"inversify\"\nimport type { ITableOutput } from '@pixielity/ts-types'\nimport type { ITableStyle } from '@pixielity/ts-types'\n\n/**\n * Table utility class\n *\n * Provides methods for displaying tables in the console.\n */\n@injectable()\nexport class TableOutput implements ITableOutput {\n  /**\n   * The table instance\n   * @private\n   */\n  private table: Table.Table\n\n  /**\n   * Creates a new TableOutput instance\n   *\n   * @param {string[]} headers - The table headers\n   * @param {ITableStyle} style - The table style\n   */\n  constructor(headers: string[] = [], style?: ITableStyle) {\n    this.table = new Table({\n      head: headers,\n      ...style,\n    })\n  }\n\n  /**\n   * Adds a row to the table\n   *\n   * @param {any[]} row - The row data\n   * @returns {TableOutput} The table instance for chaining\n   */\n  public addRow(row: any[]): TableOutput {\n    this.table.push(row)\n    return this\n  }\n\n  /**\n   * Adds multiple rows to the table\n   *\n   * @param {any[][]} rows - The rows data\n   * @returns {TableOutput} The table instance for chaining\n   */\n  public addRows(rows: any[][]): TableOutput {\n    rows.forEach((row) => this.addRow(row))\n    return this\n  }\n\n  /**\n   * Renders the table to a string\n   *\n   * @returns {string} The rendered table\n   */\n  public toString(): string {\n    return this.table.toString()\n  }\n\n  /**\n   * Renders the table to the console\n   */\n  public render(): void {\n    console.log(this.toString())\n  }\n\n  /**\n   * Creates a new table from an array of objects\n   *\n   * @param {Record<string, any>[]} data - The data\n   * @param {string[]} columns - The columns to include\n   * @param {ITableStyle} style - The table style\n   * @returns {TableOutput} The table instance\n   */\n  public static fromObjects(data: Record<string, any>[], columns: string[], style?: ITableStyle): TableOutput {\n    const headers = columns\n    const table = new TableOutput(headers, style)\n\n    data.forEach((item) => {\n      const row = columns.map((column) => item[column] ?? \"\")\n      table.addRow(row)\n    })\n\n    return table\n  }\n}\n","import cliProgress from \"cli-progress\"\nimport chalk from \"chalk\"\nimport type { IProgressBar } from \"@pixielity/ts-types\"\nimport type { IProgressBarFormat } from \"@pixielity/ts-types\"\nimport { injectable } from \"inversify\"\n\n/**\n * Progress bar utility class\n *\n * Provides methods for displaying progress bars in the console.\n */\n@injectable()\nexport class ProgressBar implements IProgressBar {\n  /**\n   * The progress bar instance\n   * @private\n   */\n  private bar: cliProgress.SingleBar\n\n  /**\n   * Creates a new ProgressBar instance\n   *\n   * @param {number} total - The total value\n   * @param {IProgressBarFormat} format - The format options\n   */\n  constructor(total = 100, format?: IProgressBarFormat) {\n    this.bar = new cliProgress.SingleBar({\n      format: format?.format || `${chalk.cyan(\"{bar}\")} {percentage}% | ETA: {eta}s | {value}/{total}`,\n      barCompleteChar: format?.barCompleteChar || \"\\u2588\",\n      barIncompleteChar: format?.barIncompleteChar || \"\\u2591\",\n    })\n\n    this.bar.start(total, 0)\n  }\n\n  /**\n   * Updates the progress bar\n   *\n   * @param {number} value - The current value\n   * @param {Record<string, any>} payload - Additional payload data\n   */\n  public update(value: number, payload?: Record<string, any>): void {\n    this.bar.update(value, payload)\n  }\n\n  /**\n   * Increments the progress bar\n   *\n   * @param {number} value - The value to increment by\n   * @param {Record<string, any>} payload - Additional payload data\n   */\n  public increment(value = 1, payload?: Record<string, any>): void {\n    this.bar.increment(value, payload)\n  }\n\n  /**\n   * Stops the progress bar\n   */\n  public stop(): void {\n    this.bar.stop()\n  }\n\n  /**\n   * Creates a multi-bar container\n   *\n   * @returns {cliProgress.MultiBar} The multi-bar container\n   */\n  public static createMultiBar(): cliProgress.MultiBar {\n    return new cliProgress.MultiBar({\n      format: `${chalk.cyan(\"{bar}\")} {percentage}% | ETA: {eta}s | {value}/{total}`,\n      barCompleteChar: \"\\u2588\",\n      barIncompleteChar: \"\\u2591\",\n    })\n  }\n}\n","import inquirer from 'inquirer'\nimport { injectable } from 'inversify'\nimport type { IAsk } from '@pixielity/ts-types'\nimport type { IQuestion } from '@pixielity/ts-types'\nimport { QuestionType } from '@pixielity/ts-types'\n\n/**\n * Ask utility class\n *\n * Provides methods for asking questions in the console.\n */\n@injectable()\nexport class Ask implements IAsk {\n  /**\n   * Asks a single question\n   *\n   * @param {IQuestion} question - The question to ask\n   * @returns {Promise<any>} The answer\n   */\n  public async question(question: IQuestion): Promise<any> {\n    return Ask.question(question)\n  }\n\n  /**\n   * Asks multiple questions\n   *\n   * @param {IQuestion[]} questions - The questions to ask\n   * @returns {Promise<Record<string, any>>} The answers\n   */\n  public async questions(questions: IQuestion[]): Promise<Record<string, any>> {\n    return Ask.questions(questions)\n  }\n\n  /**\n   * Asks for input\n   *\n   * @param {string} message - The message to display\n   * @param {string} defaultValue - The default value\n   * @returns {Promise<string>} The input\n   */\n  public async input(message: string, defaultValue?: string): Promise<string> {\n    return Ask.input(message, defaultValue)\n  }\n\n  /**\n   * Asks for confirmation\n   *\n   * @param {string} message - The message to display\n   * @param {boolean} defaultValue - The default value\n   * @returns {Promise<boolean>} The confirmation\n   */\n  public async confirm(message: string, defaultValue = false): Promise<boolean> {\n    return Ask.confirm(message, defaultValue)\n  }\n\n  /**\n   * Asks for a selection from a list\n   *\n   * @param {string} message - The message to display\n   * @param {string[] | { name: string; value: any }[]} choices - The choices\n   * @param {any} defaultValue - The default value\n   * @returns {Promise<any>} The selection\n   */\n  public async select(\n    message: string,\n    choices: string[] | { name: string; value: any }[],\n    defaultValue?: any,\n  ): Promise<any> {\n    return Ask.select(message, choices, defaultValue)\n  }\n\n  /**\n   * Asks for multiple selections from a list\n   *\n   * @param {string} message - The message to display\n   * @param {string[] | { name: string; value: any }[]} choices - The choices\n   * @param {any[]} defaultValue - The default values\n   * @returns {Promise<any[]>} The selections\n   */\n  public async multiSelect(\n    message: string,\n    choices: string[] | { name: string; value: any }[],\n    defaultValue?: any[],\n  ): Promise<any[]> {\n    return Ask.multiSelect(message, choices, defaultValue)\n  }\n\n  /**\n   * Asks for a password\n   *\n   * @param {string} message - The message to display\n   * @returns {Promise<string>} The password\n   */\n  public async password(message: string): Promise<string> {\n    return Ask.password(message)\n  }\n\n  /**\n   * Asks a single question\n   *\n   * @param {IQuestion} question - The question to ask\n   * @returns {Promise<any>} The answer\n   */\n  public static async question(question: IQuestion): Promise<any> {\n    const answers = await inquirer.prompt([question])\n    return answers[question.name]\n  }\n\n  /**\n   * Asks multiple questions\n   *\n   * @param {IQuestion[]} questions - The questions to ask\n   * @returns {Promise<Record<string, any>>} The answers\n   */\n  public static async questions(questions: IQuestion[]): Promise<Record<string, any>> {\n    return inquirer.prompt(questions)\n  }\n\n  /**\n   * Asks for input\n   *\n   * @param {string} message - The message to display\n   * @param {string} defaultValue - The default value\n   * @returns {Promise<string>} The input\n   */\n  public static async input(message: string, defaultValue?: string): Promise<string> {\n    return Ask.question({\n      type: QuestionType.Input,\n      name: 'input',\n      message,\n      default: defaultValue,\n    })\n  }\n\n  /**\n   * Asks for confirmation\n   *\n   * @param {string} message - The message to display\n   * @param {boolean} defaultValue - The default value\n   * @returns {Promise<boolean>} The confirmation\n   */\n  public static async confirm(message: string, defaultValue = false): Promise<boolean> {\n    return Ask.question({\n      type: QuestionType.Confirm,\n      name: 'confirm',\n      message,\n      default: defaultValue,\n    })\n  }\n\n  /**\n   * Asks for a selection from a list\n   *\n   * @param {string} message - The message to display\n   * @param {string[] | { name: string; value: any }[]} choices - The choices\n   * @param {any} defaultValue - The default value\n   * @returns {Promise<any>} The selection\n   */\n  public static async select(\n    message: string,\n    choices: string[] | { name: string; value: any }[],\n    defaultValue?: any,\n  ): Promise<any> {\n    return Ask.question({\n      type: QuestionType.List,\n      name: 'select',\n      message,\n      choices,\n      default: defaultValue,\n    })\n  }\n\n  /**\n   * Asks for multiple selections from a list\n   *\n   * @param {string} message - The message to display\n   * @param {string[] | { name: string; value: any }[]} choices - The choices\n   * @param {any[]} defaultValue - The default values\n   * @returns {Promise<any[]>} The selections\n   */\n  public static async multiSelect(\n    message: string,\n    choices: string[] | { name: string; value: any }[],\n    defaultValue?: any[],\n  ): Promise<any[]> {\n    return Ask.question({\n      type: QuestionType.Checkbox,\n      name: 'multiSelect',\n      message,\n      choices,\n      default: defaultValue,\n    })\n  }\n\n  /**\n   * Asks for a password\n   *\n   * @param {string} message - The message to display\n   * @returns {Promise<string>} The password\n   */\n  public static async password(message: string): Promise<string> {\n    return Ask.question({\n      type: QuestionType.Password,\n      name: 'password',\n      message,\n    })\n  }\n}\n","import * as path from 'path'\nimport { glob } from 'glob'\nimport { injectable } from 'inversify'\nimport { ICommand } from '@pixielity/ts-types'\nimport type { ICommandCollector } from '@pixielity/ts-types'\n\nimport { container } from '../di/container'\nimport { COMMAND_METADATA_KEY } from '../decorators/command.decorator'\n\n/**\n * Command collector class\n *\n * Discovers and collects commands from the file system.\n */\n@injectable()\nexport class CommandCollector implements ICommandCollector {\n  /**\n   * Discovers commands in the specified directory\n   *\n   * @param {string} directory - The directory to scan for commands\n   * @param {string} pattern - The glob pattern to match command files\n   * @returns {Promise<ICommand[]>} The discovered commands\n   */\n  public async discoverCommands(\n    directory: string,\n    pattern = '**/*-command.{ts,js}',\n  ): Promise<ICommand[]> {\n    return CommandCollector.discoverCommands(directory, pattern)\n  }\n\n  /**\n   * Gets all commands that have been registered with the container\n   *\n   * @returns {ICommand[]} The registered commands\n   */\n  public getRegisteredCommands(): ICommand[] {\n    return CommandCollector.getRegisteredCommands()\n  }\n\n  /**\n   * Gets command metadata for a command class\n   *\n   * @param {Function} commandClass - The command class\n   * @returns {any} The command metadata\n   */\n  public getCommandMetadata(commandClass: Function): any {\n    return CommandCollector.getCommandMetadata(commandClass)\n  }\n\n  /**\n   * Discovers commands in the specified directory\n   *\n   * @param {string} directory - The directory to scan for commands\n   * @param {string} pattern - The glob pattern to match command files\n   * @returns {Promise<ICommand[]>} The discovered commands\n   */\n  public static async discoverCommands(\n    directory: string,\n    pattern = '**/*-command.{ts,js}',\n  ): Promise<ICommand[]> {\n    try {\n      // Get absolute path\n      const absolutePath = path.isAbsolute(directory)\n        ? directory\n        : path.join(process.cwd(), directory)\n\n      // Find all command files\n      const files = await glob(pattern, {\n        cwd: absolutePath,\n        absolute: true,\n      })\n\n      // Import each file\n      for (const file of files) {\n        try {\n          // Use require instead of dynamic import for TypeScript files\n          require(file)\n        } catch (error) {\n          console.error(`Error importing command file ${file}:`, error)\n        }\n      }\n\n      // Get all registered commands from the container\n      return container.getAll<ICommand>(ICommand.$)\n    } catch (error) {\n      console.error('Error discovering commands:', error)\n      return []\n    }\n  }\n\n  /**\n   * Gets all commands that have been registered with the container\n   *\n   * @returns {ICommand[]} The registered commands\n   */\n  public static getRegisteredCommands(): ICommand[] {\n    return container.getAll<ICommand>(ICommand.$)\n  }\n\n  /**\n   * Gets command metadata for a command class\n   *\n   * @param {Function} commandClass - The command class\n   * @returns {any} The command metadata\n   */\n  public static getCommandMetadata(commandClass: Function): any {\n    return Reflect.getMetadata(COMMAND_METADATA_KEY, commandClass)\n  }\n}\n","import type { Container } from 'inversify'\nimport * as path from 'path'\nimport type { IServiceProvider } from '@pixielity/ts-types'\nimport { CommandRegistry } from '../command/command-registry'\nimport { StubGenerator } from '../stubs/stub-generator'\nimport { CommandScheduler } from '../scheduler/scheduler'\nimport { Application } from '../application'\nimport { ICommandRegistry } from '@pixielity/ts-types'\nimport { IStubGenerator } from '@pixielity/ts-types'\nimport { ICommandScheduler } from '@pixielity/ts-types'\nimport { IConsoleApplication } from '@pixielity/ts-types'\nimport { ITableOutput } from '@pixielity/ts-types'\nimport { TableOutput } from '../ui/table'\nimport { IProgressBar } from '@pixielity/ts-types'\nimport { ProgressBar } from '../ui/progress-bar'\nimport { IAsk } from '@pixielity/ts-types'\nimport { Ask } from '../ui/ask'\nimport { ICommandCollector } from '@pixielity/ts-types'\nimport { CommandCollector } from '../discovery/command-collector'\n\n/**\n * Console Service Provider\n *\n * Registers all console-related services in the container.\n */\nexport class ConsoleServiceProvider implements IServiceProvider {\n  /**\n   * The IoC container instance\n   * @protected\n   */\n  protected container: Container\n\n  /**\n   * The commands directory path\n   * @protected\n   */\n  protected commandsDir: string\n\n  /**\n   * The stubs directory path\n   * @protected\n   */\n  protected stubsDir: string\n\n  /**\n   * Flag to track if services have been registered\n   * @private\n   */\n  private registered = false\n\n  /**\n   * Creates a new ConsoleServiceProvider instance\n   *\n   * @param {Container} container - The IoC container\n   * @param {string} commandsDir - The directory containing commands\n   * @param {string} stubsDir - The directory containing stubs\n   */\n  constructor(\n    container: Container,\n    commandsDir = path.join(process.cwd(), 'src/commands'),\n    stubsDir = path.join(process.cwd(), 'src/stubs/templates'),\n  ) {\n    this.container = container\n    this.commandsDir = commandsDir\n    this.stubsDir = stubsDir\n  }\n\n  /**\n   * Register console services with the container\n   */\n  public register(): void {\n    // Skip if already registered\n    if (this.registered) {\n      return\n    }\n\n    // Register core services with their interfaces\n    this.bindIfNotBound(IConsoleApplication.$, Application)\n    this.bindIfNotBound(ICommandRegistry.$, CommandRegistry)\n    this.bindIfNotBound(ICommandScheduler.$, CommandScheduler)\n    this.bindIfNotBound(IStubGenerator.$, StubGenerator, new StubGenerator(this.stubsDir))\n\n    // Register utility services\n    this.bindIfNotBound(ITableOutput.$, TableOutput, null, false) // Transient\n    this.bindIfNotBound(IProgressBar.$, ProgressBar, null, false) // Transient\n\n    // Register static services\n    this.bindIfNotBound(IAsk.$, null, Ask)\n    this.bindIfNotBound(ICommandCollector.$, CommandCollector)\n\n    // Mark as registered\n    this.registered = true\n  }\n\n  /**\n   * Helper method to bind an interface to an implementation if not already bound\n   *\n   * @param symbol - The interface symbol\n   * @param constructor - The implementation constructor\n   * @param constantValue - Optional constant value for toConstantValue bindings\n   * @param singleton - Whether to use singleton scope (default: true)\n   */\n  private bindIfNotBound(\n    symbol: symbol,\n    constructor: any,\n    constantValue?: any,\n    singleton = true,\n  ): void {\n    if (!this.container.isBound(symbol)) {\n      if (constantValue) {\n        this.container.bind(symbol).toConstantValue(constantValue)\n      } else if (singleton) {\n        this.container.bind(symbol).to(constructor).inSingletonScope()\n      } else {\n        this.container.bind(symbol).to(constructor)\n      }\n    }\n  }\n\n  /**\n   * Bootstrap console services\n   *\n   * @returns {Promise<IConsoleApplication>} The application instance\n   */\n  public async boot(): Promise<IConsoleApplication> {\n    // Get the application from the container using the interface\n    const app = this.container.get<IConsoleApplication>(IConsoleApplication.$)\n\n    // Discover commands\n    await app.discoverCommands(this.commandsDir)\n\n    return app\n  }\n}\n"]}