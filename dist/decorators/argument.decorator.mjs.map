{"version":3,"sources":["../../src/decorators/argument.decorator.ts"],"names":[],"mappings":";;;;;;;;;;;AAKa,IAAA,qBAAA,GAAwB,OAAO,UAAU;AAwC/C,SAAS,SAAS,OAA6C,EAAA;AACpE,EAAO,OAAA,CAAC,QAAgB,WAAiC,KAAA;AAIvD,IAAA,IAAI,OAAO,OAAQ,CAAA,IAAA;AACnB,IAAI,IAAA,CAAC,QAAQ,QAAU,EAAA;AACrB,MAAA,IAAA,GAAO,IAAI,IAAI,CAAA,CAAA,CAAA;AAAA,KACV,MAAA;AACL,MAAA,IAAA,GAAO,IAAI,IAAI,CAAA,CAAA,CAAA;AAAA;AAGjB,IAAA,IAAI,QAAQ,OAAS,EAAA;AACnB,MAAA,IAAA,GAAO,GAAG,IAAI,CAAA,GAAA,CAAA;AAAA;AAGhB,IAAA,MAAM,QAAW,GAAA;AAAA,MACf,IAAA;AAAA,MACA,WAAA,EAAa,QAAQ,WAAe,IAAA,EAAA;AAAA,MACpC,cAAc,OAAQ,CAAA,YAAA;AAAA,MACtB;AAAA,KACF;AAGA,IAAA,MAAM,mBAAmB,OAAQ,CAAA,WAAA,CAAY,uBAAuB,MAAO,CAAA,WAAW,KAAK,EAAC;AAG5F,IAAA,gBAAA,CAAiB,KAAK,QAAQ,CAAA;AAG9B,IAAA,OAAA,CAAQ,cAAe,CAAA,qBAAA,EAAuB,gBAAkB,EAAA,MAAA,CAAO,WAAW,CAAA;AAAA,GACpF;AACF","file":"argument.decorator.mjs","sourcesContent":["import 'reflect-metadata'\n\n/**\n * Metadata key for arguments\n */\nexport const ARGUMENT_METADATA_KEY = Symbol('argument')\n\n/**\n * Argument options interface\n */\nexport interface ArgumentOptions {\n  /**\n   * The name of the argument\n   */\n  name: string\n\n  /**\n   * The description of the argument\n   */\n  description?: string\n\n  /**\n   * The default value of the argument\n   */\n  defaultValue?: any\n\n  /**\n   * Whether the argument is required\n   */\n  required?: boolean\n\n  /**\n   * Whether the argument is an array (variadic)\n   */\n  isArray?: boolean\n}\n\n/**\n * Argument decorator\n *\n * Defines a command argument\n *\n * @param {ArgumentOptions} options - The argument options\n * @returns {PropertyDecorator} The property decorator\n */\nexport function Argument(options: ArgumentOptions): PropertyDecorator {\n  return (target: Object, propertyKey: string | symbol) => {\n    // Format the argument name for Commander\n    // If it's required, don't add brackets\n    // If it's an array, add ellipsis\n    let name = options.name\n    if (!options.required) {\n      name = `[${name}]`\n    } else {\n      name = `<${name}>`\n    }\n\n    if (options.isArray) {\n      name = `${name}...`\n    }\n\n    const metadata = {\n      name,\n      description: options.description || '',\n      defaultValue: options.defaultValue,\n      propertyKey,\n    }\n\n    // Get existing metadata or initialize empty array\n    const existingMetadata = Reflect.getMetadata(ARGUMENT_METADATA_KEY, target.constructor) || []\n\n    // Add new metadata\n    existingMetadata.push(metadata)\n\n    // Update metadata\n    Reflect.defineMetadata(ARGUMENT_METADATA_KEY, existingMetadata, target.constructor)\n  }\n}\n"]}