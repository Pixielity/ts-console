{"version":3,"sources":["../../src/ui/ask.ts","../../src/ui/progress-bar.ts","../../src/ui/table.ts"],"names":["Ask","inquirer","QuestionType","injectable","ProgressBar","cliProgress","chalk","TableOutput","Table"],"mappings":"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","file":"index.js","sourcesContent":["import inquirer from 'inquirer'\nimport { injectable } from 'inversify'\nimport type { IAsk } from '@pixielity/ts-types'\nimport type { IQuestion } from '@pixielity/ts-types'\nimport { QuestionType } from '@pixielity/ts-types'\n\n/**\n * Ask utility class\n *\n * Provides methods for asking questions in the console.\n */\n@injectable()\nexport class Ask implements IAsk {\n  /**\n   * Asks a single question\n   *\n   * @param {IQuestion} question - The question to ask\n   * @returns {Promise<any>} The answer\n   */\n  public async question(question: IQuestion): Promise<any> {\n    return Ask.question(question)\n  }\n\n  /**\n   * Asks multiple questions\n   *\n   * @param {IQuestion[]} questions - The questions to ask\n   * @returns {Promise<Record<string, any>>} The answers\n   */\n  public async questions(questions: IQuestion[]): Promise<Record<string, any>> {\n    return Ask.questions(questions)\n  }\n\n  /**\n   * Asks for input\n   *\n   * @param {string} message - The message to display\n   * @param {string} defaultValue - The default value\n   * @returns {Promise<string>} The input\n   */\n  public async input(message: string, defaultValue?: string): Promise<string> {\n    return Ask.input(message, defaultValue)\n  }\n\n  /**\n   * Asks for confirmation\n   *\n   * @param {string} message - The message to display\n   * @param {boolean} defaultValue - The default value\n   * @returns {Promise<boolean>} The confirmation\n   */\n  public async confirm(message: string, defaultValue = false): Promise<boolean> {\n    return Ask.confirm(message, defaultValue)\n  }\n\n  /**\n   * Asks for a selection from a list\n   *\n   * @param {string} message - The message to display\n   * @param {string[] | { name: string; value: any }[]} choices - The choices\n   * @param {any} defaultValue - The default value\n   * @returns {Promise<any>} The selection\n   */\n  public async select(\n    message: string,\n    choices: string[] | { name: string; value: any }[],\n    defaultValue?: any,\n  ): Promise<any> {\n    return Ask.select(message, choices, defaultValue)\n  }\n\n  /**\n   * Asks for multiple selections from a list\n   *\n   * @param {string} message - The message to display\n   * @param {string[] | { name: string; value: any }[]} choices - The choices\n   * @param {any[]} defaultValue - The default values\n   * @returns {Promise<any[]>} The selections\n   */\n  public async multiSelect(\n    message: string,\n    choices: string[] | { name: string; value: any }[],\n    defaultValue?: any[],\n  ): Promise<any[]> {\n    return Ask.multiSelect(message, choices, defaultValue)\n  }\n\n  /**\n   * Asks for a password\n   *\n   * @param {string} message - The message to display\n   * @returns {Promise<string>} The password\n   */\n  public async password(message: string): Promise<string> {\n    return Ask.password(message)\n  }\n\n  /**\n   * Asks a single question\n   *\n   * @param {IQuestion} question - The question to ask\n   * @returns {Promise<any>} The answer\n   */\n  public static async question(question: IQuestion): Promise<any> {\n    const answers = await inquirer.prompt([question])\n    return answers[question.name]\n  }\n\n  /**\n   * Asks multiple questions\n   *\n   * @param {IQuestion[]} questions - The questions to ask\n   * @returns {Promise<Record<string, any>>} The answers\n   */\n  public static async questions(questions: IQuestion[]): Promise<Record<string, any>> {\n    return inquirer.prompt(questions)\n  }\n\n  /**\n   * Asks for input\n   *\n   * @param {string} message - The message to display\n   * @param {string} defaultValue - The default value\n   * @returns {Promise<string>} The input\n   */\n  public static async input(message: string, defaultValue?: string): Promise<string> {\n    return Ask.question({\n      type: QuestionType.Input,\n      name: 'input',\n      message,\n      default: defaultValue,\n    })\n  }\n\n  /**\n   * Asks for confirmation\n   *\n   * @param {string} message - The message to display\n   * @param {boolean} defaultValue - The default value\n   * @returns {Promise<boolean>} The confirmation\n   */\n  public static async confirm(message: string, defaultValue = false): Promise<boolean> {\n    return Ask.question({\n      type: QuestionType.Confirm,\n      name: 'confirm',\n      message,\n      default: defaultValue,\n    })\n  }\n\n  /**\n   * Asks for a selection from a list\n   *\n   * @param {string} message - The message to display\n   * @param {string[] | { name: string; value: any }[]} choices - The choices\n   * @param {any} defaultValue - The default value\n   * @returns {Promise<any>} The selection\n   */\n  public static async select(\n    message: string,\n    choices: string[] | { name: string; value: any }[],\n    defaultValue?: any,\n  ): Promise<any> {\n    return Ask.question({\n      type: QuestionType.List,\n      name: 'select',\n      message,\n      choices,\n      default: defaultValue,\n    })\n  }\n\n  /**\n   * Asks for multiple selections from a list\n   *\n   * @param {string} message - The message to display\n   * @param {string[] | { name: string; value: any }[]} choices - The choices\n   * @param {any[]} defaultValue - The default values\n   * @returns {Promise<any[]>} The selections\n   */\n  public static async multiSelect(\n    message: string,\n    choices: string[] | { name: string; value: any }[],\n    defaultValue?: any[],\n  ): Promise<any[]> {\n    return Ask.question({\n      type: QuestionType.Checkbox,\n      name: 'multiSelect',\n      message,\n      choices,\n      default: defaultValue,\n    })\n  }\n\n  /**\n   * Asks for a password\n   *\n   * @param {string} message - The message to display\n   * @returns {Promise<string>} The password\n   */\n  public static async password(message: string): Promise<string> {\n    return Ask.question({\n      type: QuestionType.Password,\n      name: 'password',\n      message,\n    })\n  }\n}\n","import cliProgress from \"cli-progress\"\nimport chalk from \"chalk\"\nimport type { IProgressBar } from \"@pixielity/ts-types\"\nimport type { IProgressBarFormat } from \"@pixielity/ts-types\"\nimport { injectable } from \"inversify\"\n\n/**\n * Progress bar utility class\n *\n * Provides methods for displaying progress bars in the console.\n */\n@injectable()\nexport class ProgressBar implements IProgressBar {\n  /**\n   * The progress bar instance\n   * @private\n   */\n  private bar: cliProgress.SingleBar\n\n  /**\n   * Creates a new ProgressBar instance\n   *\n   * @param {number} total - The total value\n   * @param {IProgressBarFormat} format - The format options\n   */\n  constructor(total = 100, format?: IProgressBarFormat) {\n    this.bar = new cliProgress.SingleBar({\n      format: format?.format || `${chalk.cyan(\"{bar}\")} {percentage}% | ETA: {eta}s | {value}/{total}`,\n      barCompleteChar: format?.barCompleteChar || \"\\u2588\",\n      barIncompleteChar: format?.barIncompleteChar || \"\\u2591\",\n    })\n\n    this.bar.start(total, 0)\n  }\n\n  /**\n   * Updates the progress bar\n   *\n   * @param {number} value - The current value\n   * @param {Record<string, any>} payload - Additional payload data\n   */\n  public update(value: number, payload?: Record<string, any>): void {\n    this.bar.update(value, payload)\n  }\n\n  /**\n   * Increments the progress bar\n   *\n   * @param {number} value - The value to increment by\n   * @param {Record<string, any>} payload - Additional payload data\n   */\n  public increment(value = 1, payload?: Record<string, any>): void {\n    this.bar.increment(value, payload)\n  }\n\n  /**\n   * Stops the progress bar\n   */\n  public stop(): void {\n    this.bar.stop()\n  }\n\n  /**\n   * Creates a multi-bar container\n   *\n   * @returns {cliProgress.MultiBar} The multi-bar container\n   */\n  public static createMultiBar(): cliProgress.MultiBar {\n    return new cliProgress.MultiBar({\n      format: `${chalk.cyan(\"{bar}\")} {percentage}% | ETA: {eta}s | {value}/{total}`,\n      barCompleteChar: \"\\u2588\",\n      barIncompleteChar: \"\\u2591\",\n    })\n  }\n}\n","import Table from 'cli-table3'\nimport { injectable } from \"inversify\"\nimport type { ITableOutput } from '@pixielity/ts-types'\nimport type { ITableStyle } from '@pixielity/ts-types'\n\n/**\n * Table utility class\n *\n * Provides methods for displaying tables in the console.\n */\n@injectable()\nexport class TableOutput implements ITableOutput {\n  /**\n   * The table instance\n   * @private\n   */\n  private table: Table.Table\n\n  /**\n   * Creates a new TableOutput instance\n   *\n   * @param {string[]} headers - The table headers\n   * @param {ITableStyle} style - The table style\n   */\n  constructor(headers: string[] = [], style?: ITableStyle) {\n    this.table = new Table({\n      head: headers,\n      ...style,\n    })\n  }\n\n  /**\n   * Adds a row to the table\n   *\n   * @param {any[]} row - The row data\n   * @returns {TableOutput} The table instance for chaining\n   */\n  public addRow(row: any[]): TableOutput {\n    this.table.push(row)\n    return this\n  }\n\n  /**\n   * Adds multiple rows to the table\n   *\n   * @param {any[][]} rows - The rows data\n   * @returns {TableOutput} The table instance for chaining\n   */\n  public addRows(rows: any[][]): TableOutput {\n    rows.forEach((row) => this.addRow(row))\n    return this\n  }\n\n  /**\n   * Renders the table to a string\n   *\n   * @returns {string} The rendered table\n   */\n  public toString(): string {\n    return this.table.toString()\n  }\n\n  /**\n   * Renders the table to the console\n   */\n  public render(): void {\n    console.log(this.toString())\n  }\n\n  /**\n   * Creates a new table from an array of objects\n   *\n   * @param {Record<string, any>[]} data - The data\n   * @param {string[]} columns - The columns to include\n   * @param {ITableStyle} style - The table style\n   * @returns {TableOutput} The table instance\n   */\n  public static fromObjects(data: Record<string, any>[], columns: string[], style?: ITableStyle): TableOutput {\n    const headers = columns\n    const table = new TableOutput(headers, style)\n\n    data.forEach((item) => {\n      const row = columns.map((column) => item[column] ?? \"\")\n      table.addRow(row)\n    })\n\n    return table\n  }\n}\n"]}