{"version":3,"sources":["../../src/stubs/stub-generator.ts"],"names":["StubGenerator","path","fs","injectable"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAWaA,wBAAN,mBAA8C,CAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAYnD,YAAY,QAAkB,EAAA;AAC5B,IAAA,IAAA,CAAK,QAAW,GAAA,QAAA;AAAA;AAClB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUO,QAAA,CACL,QACA,EAAA,UAAA,EACA,YACS,EAAA;AACT,IAAI,IAAA;AACF,MAAA,MAAM,WAAgBC,eAAK,CAAA,IAAA,CAAA,IAAA,CAAK,QAAU,EAAA,CAAA,EAAG,QAAQ,CAAO,KAAA,CAAA,CAAA;AAE5D,MAAI,IAAA,CAAIC,aAAW,CAAA,UAAA,CAAA,QAAQ,CAAG,EAAA;AAC5B,QAAA,MAAM,IAAI,KAAA,CAAM,CAAkB,eAAA,EAAA,QAAQ,CAAc,YAAA,CAAA,CAAA;AAAA;AAG1D,MAAI,IAAA,OAAA,GAAaA,aAAa,CAAA,YAAA,CAAA,QAAA,EAAU,MAAM,CAAA;AAG9C,MAAA,KAAA,MAAW,CAAC,WAAa,EAAA,KAAK,KAAK,MAAO,CAAA,OAAA,CAAQ,YAAY,CAAG,EAAA;AAC/D,QAAU,OAAA,GAAA,OAAA,CAAQ,QAAQ,IAAI,MAAA,CAAO,SAAS,WAAW,CAAA,MAAA,CAAA,EAAU,GAAG,CAAA,EAAG,KAAK,CAAA;AAAA;AAIhF,MAAM,MAAA,GAAA,GAAWD,wBAAQ,UAAU,CAAA;AACnC,MAAI,IAAA,CAAIC,aAAW,CAAA,UAAA,CAAA,GAAG,CAAG,EAAA;AACvB,QAAGA,aAAU,CAAA,SAAA,CAAA,GAAA,EAAK,EAAE,SAAA,EAAW,MAAM,CAAA;AAAA;AAIvC,MAAGA,aAAA,CAAA,aAAA,CAAc,YAAY,OAAO,CAAA;AAEpC,MAAO,OAAA,IAAA;AAAA,aACA,KAAO,EAAA;AACd,MAAQ,OAAA,CAAA,KAAA;AAAA,QACN,0BAA0B,KAAiB,YAAA,KAAA,GAAQ,MAAM,OAAU,GAAA,MAAA,CAAO,KAAK,CAAC,CAAA;AAAA,OAClF;AACA,MAAO,OAAA,KAAA;AAAA;AACT;AACF;AAAA;AAAA;AAAA;AAAA;AAAA,EAOO,iBAA8B,GAAA;AACnC,IAAI,IAAA;AACF,MAAA,OACGA,0BAAY,IAAK,CAAA,QAAQ,EACzB,MAAO,CAAA,CAAC,SAAS,IAAK,CAAA,QAAA,CAAS,OAAO,CAAC,CAAA,CACvC,IAAI,CAAC,IAAA,KAAS,KAAK,OAAQ,CAAA,OAAA,EAAS,EAAE,CAAC,CAAA;AAAA,aACnC,KAAO,EAAA;AACd,MAAQ,OAAA,CAAA,KAAA;AAAA,QACN,kCAAkC,KAAiB,YAAA,KAAA,GAAQ,MAAM,OAAU,GAAA,MAAA,CAAO,KAAK,CAAC,CAAA;AAAA,OAC1F;AACA,MAAA,OAAO,EAAC;AAAA;AACV;AAEJ;AA/EaF,qBAAN,GAAA,eAAA,CAAA;AAAA,EADNG,oBAAW;AAAA,CACC,EAAAH,qBAAA,CAAA","file":"stub-generator.js","sourcesContent":["import * as fs from 'fs'\nimport * as path from 'path'\nimport { injectable } from 'inversify'\nimport type { IStubGenerator } from '@pixielity/ts-types'\n\n/**\n * Stub Generator class\n *\n * Handles the generation of files from stub templates.\n */\n@injectable()\nexport class StubGenerator implements IStubGenerator {\n  /**\n   * The directory containing the stub templates\n   * @private\n   */\n  private stubsDir: string\n\n  /**\n   * Creates a new StubGenerator instance\n   *\n   * @param {string} stubsDir - The directory containing the stub templates\n   */\n  constructor(stubsDir: string) {\n    this.stubsDir = stubsDir\n  }\n\n  /**\n   * Generates a file from a stub template\n   *\n   * @param {string} stubName - The name of the stub template\n   * @param {string} outputPath - The path where the generated file will be saved\n   * @param {Record<string, string>} replacements - Map of placeholders to their replacements\n   * @returns {boolean} True if the file was generated successfully, false otherwise\n   */\n  public generate(\n    stubName: string,\n    outputPath: string,\n    replacements: Record<string, string>,\n  ): boolean {\n    try {\n      const stubPath = path.join(this.stubsDir, `${stubName}.stub`)\n\n      if (!fs.existsSync(stubPath)) {\n        throw new Error(`Stub template \"${stubName}\" not found.`)\n      }\n\n      let content = fs.readFileSync(stubPath, 'utf8')\n\n      // Replace placeholders with their values\n      for (const [placeholder, value] of Object.entries(replacements)) {\n        content = content.replace(new RegExp(`\\\\{\\\\{${placeholder}\\\\}\\\\}`, 'g'), value)\n      }\n\n      // Create directory if it doesn't exist\n      const dir = path.dirname(outputPath)\n      if (!fs.existsSync(dir)) {\n        fs.mkdirSync(dir, { recursive: true })\n      }\n\n      // Write the generated file\n      fs.writeFileSync(outputPath, content)\n\n      return true\n    } catch (error) {\n      console.error(\n        `Error generating file: ${error instanceof Error ? error.message : String(error)}`,\n      )\n      return false\n    }\n  }\n\n  /**\n   * Gets the list of available stub templates\n   *\n   * @returns {string[]} Array of stub template names\n   */\n  public getAvailableStubs(): string[] {\n    try {\n      return fs\n        .readdirSync(this.stubsDir)\n        .filter((file) => file.endsWith('.stub'))\n        .map((file) => file.replace('.stub', ''))\n    } catch (error) {\n      console.error(\n        `Error getting available stubs: ${error instanceof Error ? error.message : String(error)}`,\n      )\n      return []\n    }\n  }\n}\n"]}